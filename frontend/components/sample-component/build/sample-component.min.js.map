{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./node_modules/@polymer/polymer/lib/utils/boot.js","webpack:///./node_modules/core-js/library/modules/_core.js","webpack:///./node_modules/core-js/library/modules/_descriptors.js","webpack:///./node_modules/core-js/library/modules/_global.js","webpack:///./node_modules/core-js/library/modules/_is-object.js","webpack:///./node_modules/core-js/library/modules/_object-dp.js","webpack:///./node_modules/core-js/library/modules/_export.js","webpack:///./node_modules/core-js/library/modules/_has.js","webpack:///./node_modules/core-js/library/modules/_wks.js","webpack:///./node_modules/core-js/library/modules/_to-iobject.js","webpack:///./node_modules/core-js/library/modules/_hide.js","webpack:///./node_modules/core-js/library/modules/_fails.js","webpack:///./node_modules/core-js/library/modules/_an-object.js","webpack:///./node_modules/core-js/library/modules/_property-desc.js","webpack:///./node_modules/core-js/library/modules/_uid.js","webpack:///./node_modules/core-js/library/modules/_library.js","webpack:///./node_modules/@polymer/polymer/lib/utils/html-tag.js","webpack:///./node_modules/core-js/library/modules/_object-pie.js","webpack:///./node_modules/core-js/library/modules/_wks-define.js","webpack:///./node_modules/core-js/library/modules/_wks-ext.js","webpack:///./node_modules/core-js/library/modules/_set-to-string-tag.js","webpack:///./node_modules/core-js/library/modules/_object-create.js","webpack:///./node_modules/core-js/library/modules/_iterators.js","webpack:///./node_modules/core-js/library/modules/_enum-bug-keys.js","webpack:///./node_modules/core-js/library/modules/_to-integer.js","webpack:///./node_modules/core-js/library/modules/_object-keys.js","webpack:///./node_modules/core-js/library/modules/_to-primitive.js","webpack:///./node_modules/core-js/library/modules/_shared.js","webpack:///./node_modules/core-js/library/modules/_shared-key.js","webpack:///./node_modules/core-js/library/modules/_defined.js","webpack:///./node_modules/core-js/library/modules/_object-gopd.js","webpack:///./node_modules/core-js/library/modules/_object-gopn.js","webpack:///./node_modules/core-js/library/modules/_object-gops.js","webpack:///./node_modules/core-js/library/modules/_iter-define.js","webpack:///./node_modules/babel-runtime/helpers/typeof.js","webpack:///./node_modules/core-js/library/modules/_meta.js","webpack:///./node_modules/core-js/library/modules/_cof.js","webpack:///./node_modules/core-js/library/modules/_object-keys-internal.js","webpack:///./node_modules/core-js/library/modules/_object-dps.js","webpack:///./node_modules/core-js/library/modules/_dom-create.js","webpack:///./node_modules/core-js/library/modules/_ie8-dom-define.js","webpack:///./node_modules/core-js/library/modules/_ctx.js","webpack:///./node_modules/core-js/library/modules/_object-sap.js","webpack:///./node_modules/core-js/library/modules/_object-gpo.js","webpack:///./node_modules/core-js/library/modules/_to-object.js","webpack:///./node_modules/@polymer/polymer/lib/utils/resolve-url.js","webpack:///./node_modules/@polymer/polymer/lib/utils/mixin.js","webpack:///./node_modules/@polymer/polymer/lib/utils/style-gather.js","webpack:///./node_modules/@polymer/polymer/lib/utils/path.js","webpack:///./node_modules/@polymer/polymer/lib/utils/case-map.js","webpack:///./node_modules/@polymer/polymer/lib/mixins/template-stamp.js","webpack:///./node_modules/@polymer/polymer/lib/mixins/property-effects.js","webpack:///./node_modules/@polymer/polymer/lib/utils/settings.js","webpack:///./node_modules/@polymer/polymer/lib/elements/dom-module.js","webpack:///./node_modules/@polymer/polymer/lib/utils/async.js","webpack:///./node_modules/@polymer/polymer/lib/mixins/properties-changed.js","webpack:///./node_modules/@polymer/polymer/lib/mixins/property-accessors.js","webpack:///./node_modules/@polymer/polymer/lib/mixins/properties-mixin.js","webpack:///./node_modules/@polymer/polymer/lib/mixins/element-mixin.js","webpack:///./node_modules/@polymer/polymer/polymer-element.js","webpack:///./node_modules/core-js/library/modules/es6.object.create.js","webpack:///./node_modules/core-js/library/fn/object/create.js","webpack:///./node_modules/babel-runtime/core-js/object/create.js","webpack:///./node_modules/core-js/library/modules/_set-proto.js","webpack:///./node_modules/core-js/library/modules/es6.object.set-prototype-of.js","webpack:///./node_modules/core-js/library/fn/object/set-prototype-of.js","webpack:///./node_modules/babel-runtime/core-js/object/set-prototype-of.js","webpack:///./node_modules/babel-runtime/helpers/inherits.js","webpack:///./node_modules/core-js/library/modules/es6.object.define-property.js","webpack:///./node_modules/core-js/library/fn/object/define-property.js","webpack:///./node_modules/babel-runtime/core-js/object/define-property.js","webpack:///./node_modules/babel-runtime/helpers/createClass.js","webpack:///./node_modules/core-js/library/modules/es7.symbol.observable.js","webpack:///./node_modules/core-js/library/modules/_object-gopn-ext.js","webpack:///./node_modules/core-js/library/modules/_is-array.js","webpack:///./node_modules/core-js/library/modules/_enum-keys.js","webpack:///./node_modules/core-js/library/modules/es6.symbol.js","webpack:///./node_modules/core-js/library/fn/symbol/index.js","webpack:///./node_modules/babel-runtime/core-js/symbol.js","webpack:///./node_modules/core-js/library/modules/_iter-step.js","webpack:///./node_modules/core-js/library/modules/_add-to-unscopables.js","webpack:///./node_modules/core-js/library/modules/es6.array.iterator.js","webpack:///./node_modules/core-js/library/modules/web.dom.iterable.js","webpack:///./node_modules/core-js/library/modules/_html.js","webpack:///./node_modules/core-js/library/modules/_iter-create.js","webpack:///./node_modules/core-js/library/modules/_string-at.js","webpack:///./node_modules/core-js/library/modules/es6.string.iterator.js","webpack:///./node_modules/core-js/library/fn/symbol/iterator.js","webpack:///./node_modules/babel-runtime/core-js/symbol/iterator.js","webpack:///./node_modules/babel-runtime/helpers/possibleConstructorReturn.js","webpack:///./node_modules/babel-runtime/helpers/classCallCheck.js","webpack:///./node_modules/core-js/library/modules/es6.object.freeze.js","webpack:///./node_modules/core-js/library/fn/object/freeze.js","webpack:///./node_modules/babel-runtime/core-js/object/freeze.js","webpack:///./node_modules/core-js/library/modules/_to-absolute-index.js","webpack:///./node_modules/core-js/library/modules/_to-length.js","webpack:///./node_modules/core-js/library/modules/_array-includes.js","webpack:///./node_modules/core-js/library/modules/_iobject.js","webpack:///./node_modules/core-js/library/modules/es6.object.define-properties.js","webpack:///./node_modules/core-js/library/fn/object/define-properties.js","webpack:///./node_modules/babel-runtime/core-js/object/define-properties.js","webpack:///./node_modules/babel-runtime/helpers/taggedTemplateLiteral.js","webpack:///./node_modules/core-js/library/modules/_a-function.js","webpack:///./node_modules/core-js/library/modules/es6.object.get-prototype-of.js","webpack:///./node_modules/core-js/library/fn/object/get-prototype-of.js","webpack:///./node_modules/babel-runtime/core-js/object/get-prototype-of.js","webpack:///./src/index.js"],"names":["t","r","a","exports","o","i","l","e","call","m","c","d","Object","defineProperty","enumerable","get","Symbol","toStringTag","value","__esModule","create","bind","n","prototype","hasOwnProperty","p","s","window","JSCompiler_renameProperty","version","__e","Math","self","Function","__g","f","TypeError","_","u","F","G","S","y","P","B","h","W","g","b","this","arguments","length","apply","virtual","R","U","store","configurable","writable","random","concat","toString","Error","HTMLTemplateElement","innerHTML","[object Object]","document","createElement","reduce","propertyIsEnumerable","charAt","style","display","appendChild","src","contentWindow","open","write","close","ceil","floor","isNaN","keys","valueOf","push","mode","copyright","getOwnPropertyDescriptor","getOwnPropertyNames","getOwnPropertySymbols","O","T","x","E","v","C","I","A","entries","next","name","values","default","constructor","isExtensible","preventExtensions","w","KEY","NEED","fastKey","getWeak","onFreeze","slice","defineProperties","getPrototypeOf","be","test","he","URL","pathname","href","baseURI","location","ge","implementation","createHTMLDocument","base","head","anchor","body","replace","Pe","substring","lastIndexOf","customElements","import","textContent","trim","split","console","warn","_styles","querySelector","assetpath","content","querySelectorAll","getAttribute","Ae","filter","indexOf","Ie","hasAttribute","Ne","_unscopedStyle","setAttribute","_style","Array","isArray","join","path","Re","Me","toUpperCase","De","toLowerCase","Je","removeAttribute","ownerDocument","parentNode","replaceChild","attributes","parentInfo","firstChild","nextSibling","parentIndex","N","id","k","events","_addMethodEventListenerToNode","L","templateInfo","_templateInfo","M","Ze","D","info","lastRun","trigger","fn","structured","wildcard","H","method","property","__data","dynamicFn","z","Y","queueProperty","dispatchEvent","CustomEvent","detail","V","eventName","Te","attrName","_propertyToAttribute","oe","methodInfo","__dataHasAccessor","_setPendingProperty","$","bindings","kind","target","parts","literal","isCompound","Z","event","negate","listenerEvent","Qe","camelToDashCase","listenerNegate","nodeInfoList","compoundIndex","K","dependencies","index","binding","part","evaluator","pe","_addTemplatePropertyEffect","rootProperty","J","source","__isPropertyEffectsClient","_setPendingPropertyOrPath","_enqueueClient","__dataCompoundStorage","localName","Q","_valueToNodeAttribute","et","READ_ONLY","_setUnmanagedPropertyToNode","X","_evaluateBinding","te","ae","addEventListener","_invalidateProperties","re","static","methodName","args","_addPropertyEffect","_methodHost","de","ne","se","match","rt","map","ie","le","notifyPath","indexSplices","_e","addedCount","removed","object","type","ShadyDOM","ShadyCSS","nativeCss","polyfillWrapFlushCallback","ve","Ce","__mixinApplications","__mixinSet","Se","WeakMap","set","ke","Le","we","HTMLElement","observedAttributes","register","__assetpath","HTMLImports","importForElement","modules","define","Fe","He","je","ze","Ye","createTextNode","MutationObserver","setTimeout","splice","observe","characterData","qe","run","Ue","_createPropertyAccessor","_addPropertyToAttributeMap","assign","_definePropertyAccessor","__dataAttributes","attributeNameForProperty","_getProperty","_setProperty","super","__dataEnabled","__dataReady","__dataInvalid","__dataPending","__dataOld","__dataInstanceProps","__serializing","_initializeProperties","_flushProperties","_shouldPropertyChange","_initializeInstanceProperties","ready","_shouldPropertiesChange","_propertiesChanged","_attributeToProperty","attributeChangedCallback","_deserializeValue","typeForProperty","_serializeValue","Boolean","Number","We","me","$e","Ke","dashToCamelCase","__dataProto","_initializeProtoProperties","Date","JSON","stringify","parse","dom-if","dom-repeat","Xe","stripWhiteSpace","_parseTemplateContent","parent","_parseTemplateNode","hasInsertionPoint","_parseTemplateNestedTemplate","_parseTemplateChildNodes","hasAttributes","_parseTemplateNodeAttributes","nodeType","Node","TEXT_NODE","removeChild","infoIndex","_parseTemplate","createDocumentFragment","from","_parseTemplateNodeAttribute","decorate","importNode","__noInsertionPoint","nodeList","_addEventListenerToNode","removeEventListener","COMPUTE","REFLECT","NOTIFY","PROPAGATE","OBSERVE","tt","at","ot","nt","__dataCounter","__dataClientsReady","__dataPendingClients","__dataToNotify","__dataLinkedPaths","__dataHasPaths","__dataHost","__dataTemp","__dataClientsInitialized","__computeEffects","__reflectEffects","__notifyEffects","__propagateEffects","__observeEffects","__readOnly","__templateInfo","PROPERTY_EFFECT_TYPES","st","registerHost","_hasPropertyEffect","__enableOrFlushClients","_readyClients","_enableProperties","_flushClients","q","_propagatePropertyChanges","j","propertyEffects","nextTemplateInfo","pop","ye","shift","unshift","ue","_createPropertyObserver","_createMethodObserver","_createNotifyingProperty","_createReadOnlyProperty","_createReflectedProperty","_createComputedProperty","_bindTemplate","wasPreBound","__templateInfoLast","previousTemplateInfo","hostProps","beginHosting","_stampTemplate","endHosting","childNodes","ee","_parseBindings","exec","dynamicFns","customEvent","signature","lastIndex","stack","it","properties","ce","__ownProperties","_properties","finalize","__finalized","_finalizeClass","createProperties","__properties","connectedCallback","disconnectedCallback","pt","computed","readOnly","_hasReadOnlyEffect","reflectToAttribute","_hasReflectEffect","notify","_hasNotifyEffect","observer","is","lt","fe","__ownObservers","observers","createObservers","template","error","cloneNode","_template","importPath","importMeta","_importPath","url","rootPath","root","dt","_finalizeTemplate","__propertyDefaults","_hasAccessor","__polymerFinalized","firstElementChild","_processStyleText","insertBefore","prepareTemplate","styleElement","_attachDom","attachShadow","shadowRoot","styleSubtree","_t","html","ut","setPrototypeOf","__proto__","check","key","QObject","findChild","_k","iterator","for","keyFor","useSetter","useSimple","done","_i","Arguments","documentElement","charCodeAt","String","ReferenceError","freeze","max","min","raw","SampleComponent","PolymerElement"],"mappings":"aAIA,SAAAA,EAAAC,GAGA,GAAAC,EAAAD,GACA,OAAAC,EAAAD,GAAAE,QAGA,IAAAC,EAAAF,EAAAD,IACAI,EAAAJ,EACAK,GAAA,EACAH,YAUA,OANAI,EAAAN,GAAAO,KAAAJ,EAAAD,QAAAC,IAAAD,QAAAH,GAGAI,EAAAE,GAAA,EAGAF,EAAAD,QAvBA,IAAAD,KA4BAF,EAAAS,EAAAF,EAGAP,EAAAU,EAAAR,EAGAF,EAAAW,EAAA,SAAAJ,EAAAL,EAAAD,GACAD,EAAAI,EAAAG,EAAAL,IACAU,OAAAC,eAAAN,EAAAL,GAA0CY,YAAA,EAAAC,IAAAd,KAK1CD,EAAAC,EAAA,SAAAM,GACA,oBAAAS,eAAAC,aACAL,OAAAC,eAAAN,EAAAS,OAAAC,aAAwDC,MAAA,WAExDN,OAAAC,eAAAN,EAAA,cAAiDW,OAAA,KAQjDlB,IAAA,SAAAO,EAAAL,GAEA,GADA,EAAAA,IAAAK,EAAAP,EAAAO,IACA,EAAAL,EAAA,OAAAK,EACA,KAAAL,GAAA,iBAAAK,QAAAY,WAAA,OAAAZ,EACA,IAAAN,EAAAW,OAAAQ,OAAA,MAGA,GAFApB,EAAAC,KACAW,OAAAC,eAAAZ,EAAA,WAAyCa,YAAA,EAAAI,MAAAX,IACzC,EAAAL,GAAA,iBAAAK,EAAA,QAAAH,KAAAG,EAAAP,EAAAW,EAAAV,EAAAG,EAAA,SAAAJ,GAAgH,OAAAO,EAAAP,IAAqBqB,KAAA,KAAAjB,IACrI,OAAAH,GAIAD,EAAAsB,EAAA,SAAAf,GACA,IAAAL,EAAAK,KAAAY,WACA,WAA2B,OAAAZ,EAAA,SAC3B,WAAiC,OAAAA,GAEjC,OADAP,EAAAW,EAAAT,EAAA,IAAAA,GACAA,GAIAF,EAAAI,EAAA,SAAAG,EAAAP,GAAsD,OAAAY,OAAAW,UAAAC,eAAAhB,KAAAD,EAAAP,IAGtDA,EAAAyB,EAAA,GAIAzB,IAAA0B,EAAA,iBCxEAC,OAAAC,0BAAA,SAAArB,GAAmD,OAAAA,gBCVnD,IAAAP,EAAAO,EAAAJ,SAA6B0B,QAAA,SAC7B,iBAAAC,UAAA9B,oBCAAO,EAAAJ,SAAAD,EAAA,GAAAA,CAAA,WACA,OAA0E,GAA1EU,OAAAC,kBAAiC,KAAQE,IAAA,WAAmB,YAAcb,iBCD1E,IAAAF,EAAAO,EAAAJ,QAAA,oBAAAwB,eAAAI,WACAJ,OAAA,oBAAAK,WAAAD,WAAAC,KAEAC,SAAA,cAAAA,GACA,iBAAAC,UAAAlC,gBCLAO,EAAAJ,QAAA,SAAAI,GACA,uBAAAA,EAAA,OAAAA,EAAA,mBAAAA,wBCDAN,EAAAC,EAAA,IACAE,EAAAF,EAAA,IACAoB,EAAApB,EAAA,IACAwB,EAAAd,OAAAC,eAEAb,EAAAmC,EAAAjC,EAAA,GAAAU,OAAAC,eAAA,SAAAN,EAAAP,EAAAE,GAIA,GAHAD,EAAAM,GACAP,EAAAsB,EAAAtB,GAAA,GACAC,EAAAC,GACAE,EAAA,IACA,OAAAsB,EAAAnB,EAAAP,EAAAE,GACG,MAAAF,IACH,WAAAE,GAAA,QAAAA,EAAA,MAAAkC,UAAA,4BAEA,MADA,UAAAlC,IAAAK,EAAAP,GAAAE,EAAAgB,OACAX,wBCdAN,EAAAC,EAAA,GACAE,EAAAF,EAAA,GACAoB,EAAApB,EAAA,IACAwB,EAAAxB,EAAA,IACAG,EAAAH,EAAA,GAGAuB,EAAA,SAAAlB,EAAAP,EAAAE,GAAA,IAUAS,EAAAL,EAAA+B,EATAC,EAAA/B,EAAAkB,EAAAc,EACA7B,EAAAH,EAAAkB,EAAAe,EACAL,EAAA5B,EAAAkB,EAAAgB,EACAC,EAAAnC,EAAAkB,EAAAkB,EACAlC,EAAAF,EAAAkB,EAAAmB,EACAC,EAAAtC,EAAAkB,EAAAqB,EACAC,EAAArC,EAAAN,IAAAJ,KAAAI,EAAAJ,OACA2C,EAAAI,EAAAxB,UACAyB,EAAAtC,EAAAT,EAAAkC,EAAAlC,EAAAD,IAAAC,EAAAD,QAAAuB,UAGA,IAAAZ,KADAD,IAAAR,EAAAF,GACAE,GAEAI,GAAAgC,GAAAU,QAAA,IAAAA,EAAArC,KACAN,EAAA0C,EAAApC,KAEA0B,EAAA/B,EAAA0C,EAAArC,GAAAT,EAAAS,GAEAoC,EAAApC,GAAAD,GAAA,mBAAAsC,EAAArC,GAAAT,EAAAS,GAEAF,GAAAH,EAAAgB,EAAAe,EAAApC,GAEA4C,GAAAG,EAAArC,IAAA0B,EAAA,SAAA9B,GACA,IAAAP,EAAA,SAAAA,EAAAE,EAAAD,GACA,GAAAgD,gBAAA1C,EAAA,CACA,OAAA2C,UAAAC,QACA,kBAAA5C,EACA,kBAAAA,EAAAP,GACA,kBAAAO,EAAAP,EAAAE,GACW,WAAAK,EAAAP,EAAAE,EAAAD,GACF,OAAAM,EAAA6C,MAAAH,KAAAC,YAGT,OADAlD,EAAAuB,UAAAhB,EAAAgB,UACAvB,EAXA,CAaKqC,GAAAK,GAAA,mBAAAL,EAAAf,EAAAW,SAAAzB,KAAA6B,KAELK,KACAK,EAAAM,UAAAN,EAAAM,aAA+C1C,GAAA0B,EAE/C9B,EAAAkB,EAAA6B,GAAAX,MAAAhC,IAAAe,EAAAiB,EAAAhC,EAAA0B,MAKAZ,EAAAc,EAAA,EACAd,EAAAe,EAAA,EACAf,EAAAgB,EAAA,EACAhB,EAAAkB,EAAA,EACAlB,EAAAmB,EAAA,GACAnB,EAAAqB,EAAA,GACArB,EAAA8B,EAAA,GACA9B,EAAA6B,EAAA,IACA/C,EAAAJ,QAAAsB,eC7DA,IAAAzB,KAAuBwB,eACvBjB,EAAAJ,QAAA,SAAAI,EAAAL,GACA,OAAAF,EAAAQ,KAAAD,EAAAL,yBCFAD,EAAAC,EAAA,GAAAA,CAAA,OACAE,EAAAF,EAAA,IACAoB,EAAApB,EAAA,GAAAc,OACAU,EAAA,mBAAAJ,GAEAf,EAAAJ,QAAA,SAAAI,GACA,OAAAN,EAAAM,KAAAN,EAAAM,GACAmB,GAAAJ,EAAAf,KAAAmB,EAAAJ,EAAAlB,GAAA,UAAAG,MAGAiD,MAAAvD,uBCTAA,EAAAC,EAAA,IACAE,EAAAF,EAAA,IACAK,EAAAJ,QAAA,SAAAI,GACA,OAAAN,EAAAG,EAAAG,0BCJAN,EAAAC,EAAA,GACAE,EAAAF,EAAA,IACAK,EAAAJ,QAAAD,EAAA,YAAAK,EAAAP,EAAAE,GACA,OAAAD,EAAAkC,EAAA5B,EAAAP,EAAAI,EAAA,EAAAF,KACC,SAAAK,EAAAP,EAAAE,GAED,OADAK,EAAAP,GAAAE,EACAK,gBCNAA,EAAAJ,QAAA,SAAAI,GACA,IACA,QAAAA,IACG,MAAAP,GACH,4BCJA,IAAAC,EAAAC,EAAA,GACAK,EAAAJ,QAAA,SAAAI,GACA,IAAAN,EAAAM,GAAA,MAAA6B,UAAA7B,EAAA,sBACA,OAAAA,gBCHAA,EAAAJ,QAAA,SAAAI,EAAAP,GACA,OACAc,aAAA,EAAAP,GACAkD,eAAA,EAAAlD,GACAmD,WAAA,EAAAnD,GACAW,MAAAlB,qBCLAA,EAAA,EACAE,EAAA6B,KAAA4B,SACApD,EAAAJ,QAAA,SAAAI,GACA,gBAAAqD,YAAA,IAAArD,EAAA,GAAAA,EAAA,QAAAP,EAAAE,GAAA2D,SAAA,mBCHAtD,EAAAJ,SAAA,gCCiCA,SAAAF,EAAAM,GACA,GAAAA,aAAAF,EACA,OAAqCE,EAAAW,MAErC,UAAA4C,qEACuEvD,KASvE,SAAAH,EAAAG,GACA,GAAAA,aAAAwD,oBACA,OAA4CxD,EAAAyD,UACzC,GAAAzD,aAAAF,EACH,OAAAJ,EAAAM,GAEA,UAAAuD,+DACiEvD,6FDtDjEe,EAAApB,EAAA;;;;;;;;;EAAAA,EAAAoB,WCgBAjB,EACA4D,YAAA1D,GAEA0C,KAAA/B,MAAAX,EAAAsD,WAKAI,WACA,OAAAhB,KAAA/B,aAmEAO,EAAA,SAAAlB,KAAAP,GACA,MAAAE,EAAmDgE,SAAAC,cAAA,YAGnD,OAFAjE,EAAA8D,UAAAhE,EAAAoE,OAAA,CAAApE,EAAAE,EAAAD,IACAD,EAAAI,EAAAF,GAAAK,EAAAN,EAAA,GAAAM,EAAA,IACAL,GA2BAS,EAAA,SAAAJ,KAAAP,GACA,WAAAK,EAAAL,EAAAoE,OAAA,CAAApE,EAAAE,EAAAE,IACAJ,EAAAC,EAAAC,GAAAK,EAAAH,EAAA,GAAAG,EAAA,qBC7HAP,EAAAmC,KAAckC,0CCAdpE,EAAAC,EAAA,GACAE,EAAAF,EAAA,GACAoB,EAAApB,EAAA,IACAwB,EAAAxB,EAAA,IACAG,EAAAH,EAAA,GAAAiC,EACA5B,EAAAJ,QAAA,SAAAI,GACA,IAAAP,EAAAI,EAAAY,SAAAZ,EAAAY,OAAAM,KAA0DrB,EAAAe,YAC1D,KAAAT,EAAA+D,OAAA,IAAA/D,KAAAP,GAAAK,EAAAL,EAAAO,GAAkFW,MAAAQ,EAAAS,EAAA5B,uBCPlFP,EAAAmC,EAAAjC,EAAA,wBAAAD,EAAAC,EAAA,GAAAiC,ECCA/B,EAAAF,EAAA,GACAoB,EAAApB,EAAA,EAAAA,CAAA,eAEAK,EAAAJ,QAAA,SAAAI,EAAAP,EAAAE,GACAK,IAAAH,EAAAG,EAAAL,EAAAK,IAAAgB,UAAAD,IAAArB,EAAAM,EAAAe,GAAoEmC,cAAA,EAAAvC,MAAAlB,0BCJpEC,EAAAC,EAAA,IACAE,EAAAF,EAAA,IACAoB,EAAApB,EAAA,IACAwB,EAAAxB,EAAA,GAAAA,CAAA,YACAG,EAAA,aAIAoB,EAAA,eAMAlB,EAJAP,EAAAE,EAAA,GAAAA,CAAA,UACAD,EAAAqB,EAAA6B,OAHA,IAOAnD,EAAAuE,MAAAC,QAAA,OACAtE,EAAA,IAAAuE,YAAAzE,GACAA,EAAA0E,IAAA,eAGAnE,EAAAP,EAAA2E,cAAAT,UACAU,OACArE,EAAAsE,MAAA,uCACAtE,EAAAuE,QACArD,EAAAlB,EAAAgC,EACAtC,YAAAwB,EAAAF,UAAAD,EAAArB,IACA,OAAAwB,KAGAlB,EAAAJ,QAAAS,OAAAQ,QAAA,SAAAb,EAAAP,GACA,IAAAE,EAQA,OAPA,OAAAK,EAMGL,EAAAuB,KALHpB,EAAAkB,UAAAtB,EAAAM,GACAL,EAAA,IAAAG,EACAA,EAAAkB,UAAA,KAEArB,EAAAwB,GAAAnB,QAEA,IAAAP,EAAAE,EAAAE,EAAAF,EAAAF,iBCvCAO,EAAAJ,wBCCAI,EAAAJ,SAAA,8HCAAH,EAAA+B,KAAAgD,KACA7E,EAAA6B,KAAAiD,MACAzE,EAAAJ,QAAA,SAAAI,GACA,OAAA0E,MAAA1E,MAAA,KAAAA,EAAAL,EAAAF,GAAAO,yBCHAN,EAAAC,EAAA,IACAE,EAAAF,EAAA,IAEAK,EAAAJ,QAAAS,OAAAsE,MAAA,SAAA3E,GACA,OAAAN,EAAAM,EAAAH,qBCJA,IAAAH,EAAAC,EAAA,GAGAK,EAAAJ,QAAA,SAAAI,EAAAP,GACA,IAAAC,EAAAM,GAAA,OAAAA,EACA,IAAAL,EAAAE,EACA,GAAAJ,GAAA,mBAAAE,EAAAK,EAAAsD,YAAA5D,EAAAG,EAAAF,EAAAM,KAAAD,IAAA,OAAAH,EACA,sBAAAF,EAAAK,EAAA4E,WAAAlF,EAAAG,EAAAF,EAAAM,KAAAD,IAAA,OAAAH,EACA,IAAAJ,GAAA,mBAAAE,EAAAK,EAAAsD,YAAA5D,EAAAG,EAAAF,EAAAM,KAAAD,IAAA,OAAAH,EACA,MAAAgC,UAAA,iECVAnC,EAAAC,EAAA,GACAE,EAAAF,EAAA,GAEAoB,EAAAlB,EAAA,wBAAAA,EAAA,2BAEAG,EAAAJ,QAAA,SAAAI,EAAAP,GACA,OAAAsB,EAAAf,KAAAe,EAAAf,QAAA,IAAAP,UACC,eAAAoF,MACDvD,QAAA5B,EAAA4B,QACAwD,KAAAnF,EAAA,oBACAoF,UAAA,8DCVArF,EAAAC,EAAA,GAAAA,CAAA,QACAE,EAAAF,EAAA,IACAK,EAAAJ,QAAA,SAAAI,GACA,OAAAN,EAAAM,KAAAN,EAAAM,GAAAH,EAAAG,kBCFAA,EAAAJ,QAAA,SAAAI,GACA,SAAAA,EAAA,MAAA6B,UAAA,yBAAA7B,GACA,OAAAA,wBCHAN,EAAAC,EAAA,IACAE,EAAAF,EAAA,IACAoB,EAAApB,EAAA,GACAwB,EAAAxB,EAAA,IACAG,EAAAH,EAAA,GACAuB,EAAAvB,EAAA,IACAS,EAAAC,OAAA2E,yBAEAvF,EAAAmC,EAAAjC,EAAA,GAAAS,EAAA,SAAAJ,EAAAP,GAGA,GAFAO,EAAAe,EAAAf,GACAP,EAAA0B,EAAA1B,GAAA,GACAyB,EAAA,IACA,OAAAd,EAAAJ,EAAAP,GACG,MAAAA,IALH,OAMAK,EAAAE,EAAAP,GAAAI,GAAAH,EAAAkC,EAAA3B,KAAAD,EAAAP,GAAAO,EAAAP,SANA,wBCPAC,EAAAC,EAAA,IACAE,EAAAF,EAAA,IAAA0D,OAAA,sBAEA5D,EAAAmC,EAAAvB,OAAA4E,qBAAA,SAAAjF,GACA,OAAAN,EAAAM,EAAAH,mBCLAJ,EAAAmC,EAAAvB,OAAA6E,uCAAAlF,EAAAJ,QAAAD,EAAA,sCCCAD,EAAAC,EAAA,IACAE,EAAAF,EAAA,GACAoB,EAAApB,EAAA,IACAwB,EAAAxB,EAAA,IACAG,EAAAH,EAAA,IACAuB,EAAAvB,EAAA,IACAS,EAAAT,EAAA,IACAI,EAAAJ,EAAA,IACAmC,EAAAnC,EAAA,EAAAA,CAAA,YACAoC,OAAA4C,MAAA,WAAAA,QAKAxE,EAAA,WAA8B,OAAAuC,MAE9B1C,EAAAJ,QAAA,SAAAI,EAAAP,EAAAE,EAAAiC,EAAAO,EAAAjC,EAAAoC,GACApB,EAAAvB,EAAAF,EAAAmC,GADA,IAiBAY,EAAAJ,EAAAK,EAfA0C,EAAA,SAAAnF,GAAA,OACA+B,GAAA/B,KAAAoF,IAAApF,GAEA,WAAyC,WAAAL,EAAA+C,KAAA1C,KAIzCqF,EAAA5F,EAAA,YACA6F,EAAA,UAAAnD,EACAoD,GAAA,EACAH,EAAApF,EAAAgB,UACAwE,EAAAJ,EAAAtD,IAAAsD,EAAA,eAAAjD,GAAAiD,EAAAjD,GACAD,EAAAsD,GAAAL,EAAAhD,GACAsD,EAAAtD,EAAAmD,EAAAH,EAAA,WAAAjD,OAAA,EACAwD,EAAA,SAAAjG,GAAA2F,EAAAO,SAAAH,EAwBA,GArBAE,KACAjD,EAAA1C,EAAA2F,EAAAzF,KAAA,IAAAD,OACAK,OAAAW,WAAAyB,EAAAmD,OAEAxF,EAAAqC,EAAA4C,GAAA,IAEA3F,GAAA,mBAAA+C,EAAAX,IAAAX,EAAAsB,EAAAX,EAAA3B,KAIAmF,GAAAE,GAAA,WAAAA,EAAAK,OACAN,GAAA,EACArD,EAAA,WAAkC,OAAAsD,EAAAvF,KAAAyC,UAGlChD,GAAA4C,KAAAP,GAAAwD,IAAAH,EAAAtD,KACAX,EAAAiE,EAAAtD,EAAAI,GAGApC,EAAAL,GAAAyC,EACApC,EAAAuF,GAAAlF,EACAgC,EAMA,GALAK,GACAsD,OAAAR,EAAApD,EAAAiD,EAAA,UACAR,KAAAzE,EAAAgC,EAAAiD,EAAA,QACAQ,QAAAF,GAEAnD,EAAA,IAAAF,KAAAI,EACAJ,KAAAgD,GAAArE,EAAAqE,EAAAhD,EAAAI,EAAAJ,SACKvC,IAAAuC,EAAAvC,EAAAmC,GAAAD,GAAAwD,GAAA9F,EAAA+C,GAEL,OAAAA,iCCrDA,SAAA9C,EAAAM,GAAsC,OAAAA,KAAAY,WAAAZ,GAAuC+F,QAAA/F,GAZ7EP,EAAAmB,YAAA,MAIAG,EAAArB,EAFAC,EAAA,KAMAG,EAAAJ,EAFAC,EAAA,KAIAuB,EAAA,mBAAApB,EAAAiG,SAAA,iBAAAhF,EAAAgF,QAAA,SAAA/F,GAAiH,cAAAA,GAAqB,SAAAA,GAAmB,OAAAA,GAAA,mBAAAF,EAAAiG,SAAA/F,EAAAgG,cAAAlG,EAAAiG,SAAA/F,IAAAF,EAAAiG,QAAA/E,UAAA,gBAAAhB,GAIzJP,EAAAsG,QAAA,mBAAAjG,EAAAiG,SAAA,WAAA7E,EAAAH,EAAAgF,SAAA,SAAA/F,GACA,gBAAAA,EAAA,YAAAkB,EAAAlB,IACC,SAAAA,GACD,OAAAA,GAAA,mBAAAF,EAAAiG,SAAA/F,EAAAgG,cAAAlG,EAAAiG,SAAA/F,IAAAF,EAAAiG,QAAA/E,UAAA,kBAAAhB,EAAA,YAAAkB,EAAAlB,yBCnBAN,EAAAC,EAAA,GAAAA,CAAA,QACAE,EAAAF,EAAA,GACAoB,EAAApB,EAAA,GACAwB,EAAAxB,EAAA,GAAAiC,EACA9B,EAAA,EACAoB,EAAAb,OAAA4F,cAAA,WACA,UAEA7F,GAAAT,EAAA,GAAAA,CAAA,WACA,OAAAuB,EAAAb,OAAA6F,yBAEAnG,EAAA,SAAAC,GACAmB,EAAAnB,EAAAN,GAAqBiB,OACrBb,EAAA,OAAAA,EACAqG,SAgCArE,EAAA9B,EAAAJ,SACAwG,IAAA1G,EACA2G,MAAA,EACAC,QAhCA,SAAAtG,EAAAP,GAEA,IAAAI,EAAAG,GAAA,uBAAAA,KAAA,iBAAAA,EAAA,SAAAA,EACA,IAAAe,EAAAf,EAAAN,GAAA,CAEA,IAAAwB,EAAAlB,GAAA,UAEA,IAAAP,EAAA,UAEAM,EAAAC,GAEG,OAAAA,EAAAN,GAAAI,GAsBHyG,QApBA,SAAAvG,EAAAP,GACA,IAAAsB,EAAAf,EAAAN,GAAA,CAEA,IAAAwB,EAAAlB,GAAA,SAEA,IAAAP,EAAA,SAEAM,EAAAC,GAEG,OAAAA,EAAAN,GAAAyG,GAYHK,SATA,SAAAxG,GAEA,OADAI,GAAA0B,EAAAuE,MAAAnF,EAAAlB,KAAAe,EAAAf,EAAAN,IAAAK,EAAAC,GACAA,iBC5CA,IAAAP,KAAiB6D,SAEjBtD,EAAAJ,QAAA,SAAAI,GACA,OAAAP,EAAAQ,KAAAD,GAAAyG,MAAA,4BCHA/G,EAAAC,EAAA,GACAE,EAAAF,EAAA,GACAoB,EAAApB,EAAA,GAAAA,EAAA,GACAwB,EAAAxB,EAAA,GAAAA,CAAA,YAEAK,EAAAJ,QAAA,SAAAI,EAAAP,GAAA,IAIAE,EAHAuB,EAAArB,EAAAG,GACAI,EAAA,EACAL,KAEA,IAAAJ,KAAAuB,EAAAvB,GAAAwB,GAAAzB,EAAAwB,EAAAvB,IAAAI,EAAA8E,KAAAlF,GALA,KAOAF,EAAAmD,OAAAxC,GAAAV,EAAAwB,EAAAvB,EAAAF,EAAAW,SACAW,EAAAhB,EAAAJ,IAAAI,EAAA8E,KAAAlF,IAEA,OAAAI,wBCfAL,EAAAC,EAAA,GACAE,EAAAF,EAAA,IACAoB,EAAApB,EAAA,IAEAK,EAAAJ,QAAAD,EAAA,GAAAU,OAAAqG,iBAAA,SAAA1G,EAAAP,GACAI,EAAAG,GADA,QAKAL,EAHAwB,EAAAJ,EAAAtB,GACAyB,EAAAC,EAAAyB,OACAxC,EAAA,EAEAc,EAAAd,GAAAV,EAAAkC,EAAA5B,EAAAL,EAAAwB,EAAAf,KAAAX,EAAAE,IACA,OAAAK,wBCXAN,EAAAC,EAAA,GACAE,EAAAF,EAAA,GAAAgE,SAEA5C,EAAArB,EAAAG,IAAAH,EAAAG,EAAA+D,eACA5D,EAAAJ,QAAA,SAAAI,GACA,OAAAe,EAAAlB,EAAA+D,cAAA5D,wBCLAA,EAAAJ,SAAAD,EAAA,KAAAA,EAAA,GAAAA,CAAA,WACA,OAAuG,GAAvGU,OAAAC,eAAAX,EAAA,GAAAA,CAAA,YAAsEa,IAAA,WAAmB,YAAcb,qBCAvG,IAAAD,EAAAC,EAAA,IACAK,EAAAJ,QAAA,SAAAI,EAAAP,EAAAE,GAAA,OACAD,EAAAM,QACA,IAAAP,EAAAO,EAEA,IADAL,EACA,SAAAD,GACA,OAAAM,EAAAC,KAAAR,EAAAC,IAEA,IAJAC,EAIA,SAAAD,EAAAC,GACA,OAAAK,EAAAC,KAAAR,EAAAC,EAAAC,IAEA,IAPAA,EAOA,SAAAD,EAAAC,EAAAE,GACA,OAAAG,EAAAC,KAAAR,EAAAC,EAAAC,EAAAE,IAGA,WACA,OAAAG,EAAA6C,MAAApD,EAAAkD,kCChBAjD,EAAAC,EAAA,GACAE,EAAAF,EAAA,GACAoB,EAAApB,EAAA,IACAK,EAAAJ,QAAA,SAAAI,EAAAP,GAAA,IACAE,GAAAE,EAAAQ,YAA6BL,IAAAK,OAAAL,GAC7BmB,KACAA,EAAAnB,GAAAP,EAAAE,GACAD,IAAAwC,EAAAxC,EAAAsC,EAAAjB,EAAA,WAAqDpB,EAAA,KAAS,SAAAwB,yBCP9DzB,EAAAC,EAAA,GACAE,EAAAF,EAAA,IACAoB,EAAApB,EAAA,GAAAA,CAAA,YACAwB,EAAAd,OAAAW,UAEAhB,EAAAJ,QAAAS,OAAAsG,gBAAA,SAAA3G,GAAA,OACAA,EAAAH,EAAAG,GACAN,EAAAM,EAAAe,GAAAf,EAAAe,GACA,mBAAAf,EAAAgG,aAAAhG,eAAAgG,YACAhG,EAAAgG,YAAAhF,UACGhB,aAAAK,OAAAc,EAAA,uBCVH,IAAAzB,EAAAC,EAAA,IACAK,EAAAJ,QAAA,SAAAI,GACA,OAAAK,OAAAX,EAAAM,mCCuBA,SAAAN,EAAAM,EAAAP,GACA,GAAAO,GAAA4G,GAAAC,KAAA7G,GACA,OAAAA,EAGA,YAAA8G,EAAA,CACAA,GAAA,EACA,IACA,MAAA9G,EAAA,IAAA+G,IAAA,gBACA/G,EAAAgH,SAAA,QACAF,EAAA,mBAAA9G,EAAAiH,KACK,MAAAxH,KAXL,OAeAA,IACAA,EAAAkE,SAAAuD,SAAA9F,OAAA+F,SAAAF,MAEAH,EACA,IAAAC,IAAA/G,EAAAP,GAAAwH,MAGAG,MACAA,GAAAzD,SAAA0D,eAAAC,mBAAA,SACAC,KAAAH,GAAAxD,cAAA,QACAwD,GAAAI,KAAAtD,YAAAkD,GAAAG,MACAH,GAAAK,OAAAL,GAAAxD,cAAA,KACAwD,GAAAM,KAAAxD,YAAAkD,GAAAK,SAEAL,GAAAG,KAAAN,KAAAxH,EACA2H,GAAAK,OAAAR,KAAAjH,EACAoH,GAAAK,OAAAR,MAAAjH,GAYA,SAAAH,EAAAG,EAAAP,GACA,OAAAO,EAAA2H,QAAAC,GAAA,SAAA5H,EAAAL,EAAAE,EAAAkB,GACA,OAAApB,EAAA,IACAD,EAAAG,EAAA8H,QAAA,YAAAlI,GACA,IAAAsB,IAWA,SAAAA,EAAAf,GACA,OAAAA,EAAA6H,UAAA,EAAA7H,EAAA8H,YAAA;;;;;;;;;ECnEA,SAAA3G,KCHA,SAAArB,EAAAE,GACA,MAAAP,EAAAsI,eAAAvH,IAAA,cADA,OAEAf,EAGAA,EAAAuI,OAAAhI,GAFA,KAKA,SAAAI,EAAAJ,GAAA,MAKAL,EAAAE,GADAG,EAAA0H,KAAA1H,EAAA0H,KAAA1H,GACAiI,YACAjI,EAAAkH,SACAxH,EAAAiE,SAAAC,cAAA,SAEA,OADAlE,EAAAuI,YAAAtI,EACAD,EAyBA,SAAAwB,EAAAlB,GAAA,MACAP,EAAAO,EAAAkI,OAAAC,MAAA,OACAxI,KACA,QAAAD,EAAA,EAAcA,EAAAD,EAAAmD,OAAoBlD,IAClCC,EAAAkF,QAAA9E,EAAAN,EAAAC,KAEA,OAAAC,EAaA,SAAAI,EAAAC,GACA,MAAAP,EAAAK,EAAAE,GAEA,IAAAP,EAEA,OADA2I,QAAAC,KAAA,4CAAArI,MAIA,YAAAP,EAAA6I,QAAA,OACAtI,MAEAG,EAAAV,IAEAE,EAAAF,EAAA8I,cAAA,YACA5I,GACAK,EAAA6E,QAAA/C,EAAAnC,EACyCF,EAAA+I,YAGzC/I,EAAA6I,QAAAtI,EAGA,OAAAP,EAAA6I,QAWA,SAAAxG,EAAA9B,EAAAP,GACA,IAAAO,EAAAsI,QAAA,OACA3I,KAEAD,EAAAM,EAAAyI,QAAAC,iBAAA,SACA,QAAA3H,EAAA,EAAiBA,EAAArB,EAAAkD,OAAe7B,IAAA,KAChCI,EAAAzB,EAAAqB,GAGAf,EAAAmB,EAAAwH,aAAAC,IACA5I,GACAL,EAAAkF,QAAA3D,EAAAlB,GAAA6I,OAAA,SAAA7I,EAAAP,EAAAE,GACA,OAAAA,EAAAmJ,QAAA9I,KAAAP,KAGAA,IACA0B,EAAA8G,YAAApI,EAAAsB,EAAA8G,YAAAxI,IAEAE,EAAAkF,KAAA1D,GAEAnB,EAAAsI,QAAA3I,EAEA,OAAAK,EAAAsI,QAUA,SAAAvG,EAAA/B,GACA,IAAAP,EAAAK,EAAAE,GACA,OAAAP,EAAAU,EAAAV,MAQA,SAAAU,EAAAH,GAAA,MACAP,KACAE,EAAAK,EAAA0I,iBAAAK,IACA,QACArJ,EADAG,EAAA,EAAeA,EAAAF,EAAAiD,OAAe/C,IAE9B,IADAH,EAAAC,EAAAE,IACAmI,OAAA,OACAhI,EAAAN,EAAAsI,OACArI,EAAAD,EAAAsJ,aAAAC,IACA,GAAAtJ,IAAAK,EAAAkJ,eAAA,CACA,MAAAzJ,EAAAW,EAAAJ,GACAP,EAAA0J,aAAAF,GAAA,IACAjJ,EAAAkJ,eAAAzJ,OACOO,EAAAoJ,SACPpJ,EAAAoJ,OAAAhJ,EAAAJ,IAEAP,EAAAoF,KAAAlF,EAAAK,EAAAkJ,eAAAlJ,EAAAoJ,QAGA,OAAA3J;;;;;;;;;ECxIA,SAAAS,EAAAF,GACA,UAAAA,EAAA8I,QAAA,KAgBA,SAAAxG,EAAAtC,GACA,IAAAP,EAAAO,EAAA8I,QAAA,KADA,OAEA,IAAArJ,EACAO,EAEAA,EAAAyG,MAAA,EAAAhH,GAuCA,SAAA2C,EAAApC,EAAAP,GAEA,WAAAA,EAAAqJ,QAAA9I,EAAA,KAoBA,SAAAmF,EAAAnF,EAAAP,EAAAE,GACA,OAAAF,EAAAE,EAAA8G,MAAAzG,EAAA4C,QA6BA,SAAAH,EAAAzC,GACA,GAAAqJ,MAAAC,QAAAtJ,GAAA,CACA,IAAAP,KACA,QACAE,EADAD,EAAA,EAAiBA,EAAAM,EAAA4C,OAAelD,IAAA,CAChCC,EAAAK,EAAAN,GAAA4D,WAAA6E,MAAA,KACA,QAAAnI,EAAA,EAAmBA,EAAAL,EAAAiD,OAAe5C,IAClCP,EAAAoF,KAAAlF,EAAAK,IAGA,OAAAP,EAAA8J,KAAA,KAEA,OAAAvJ,EAoBA,SAAAqF,EAAArF,GAAA,OACAqJ,MAAAC,QAAAtJ,GACAyC,EAAAzC,GAAAmI,MAAA,KAEAnI,EAAAsD,WAAA6E,MAAA,KAeA,SAAA7C,EAAAtF,EAAAP,EAAAE,GAAA,IACAD,EAAAM,EACAH,EAAAwF,EAAA5F,GAEA,QAAAsB,EAAA,EAAeA,EAAAlB,EAAA+C,OAAgB7B,IAAA,CAC/B,IAAArB,EACA,OAGAA,IADAG,EAAAkB,IAMA,OAHApB,IACAA,EAAA6J,KAAA3J,EAAA0J,KAAA,MAEA7J,EAaA,SAAA6F,EAAAvF,EAAAP,EAAAE,GAAA,IACAD,EAAAM,EACAH,EAAAwF,EAAA5F,GACAsB,EAAAlB,IAAA+C,OAAA,GACA,KAAA/C,EAAA+C,OAAA,CAEA,QACA5C,EADAP,EAAA,EAAiBA,EAAAI,EAAA+C,OAAA,EAAkBnD,IAGnC,KADAC,IADAM,EAAAH,EAAAJ,KAGA,OAIAC,EAAAqB,GAAApB,OAGAD,EAAAD,GAAAE,EAEA,OAAAE,EAAA0J,KAAA,KCjNA,SAAAnE,EAAApF,GACA,OAAAyJ,GAAAzJ,KACAyJ,GAAAzJ,GAAA,EAAAA,EAAA8I,QAAA,KAAA9I,IAAA2H,QAAA+B,GACA1J,KAAA,GAAA2J,gBAYA,SAAAnE,EAAAxF,GACA,OAAAyJ,GAAAzJ,KACAyJ,GAAAzJ,KAAA2H,QAAAiC,GAAA,OAAAC;;;;;;;;;EC1BA,SAAApE,EAAAzF,GACA,IAAAL,EAAAK,EAAA2I,aAAA,MACA,GAAAhJ,GAAAmK,GAAAnK,GAAA,CACA,IAAAD,EAAAM,EADA,IAEAN,EAAAqK,gBAAA,MACA/J,EAAAN,EAAAsK,cAAApG,cAAAjE,GACAD,EAAAuK,WAAAC,aAAAlK,EAAAN,GACAM,EAAAkE,YAAAxE,GACAA,EAAAyK,WAAAvH,QACA5C,EAAAmJ,aAAAzJ,EAAAyK,WAAA,GAAAtE,KAAAnG,EAAAyK,WAAA,GAAAxJ,OACAjB,EAAAqK,gBAAArK,EAAAyK,WAAA,GAAAtE,MAGA,OAAA7F,EAGA,SAAA0F,EAAA1F,EAAAP,GAEA,IAAAE,EAAAF,EAAA2K,YAAA1E,EAAA1F,EAAAP,EAAA2K,YAEA,IAAAzK,EASA,OAAAK,EANA,QAAAA,EAAAL,EAAA0K,WAAA3K,EAAA,EAAsCM,EAAGA,IAAAsK,YACzC,GAAA7K,EAAA8K,cAAA7K,IACA,OAAAM,EASA,SAAAwK,EAAAxK,EAAAP,EAAAE,EAAAD,GACAA,EAAA+K,KACAhL,EAAAC,EAAA+K,IAAA9K,GAKA,SAAA+K,EAAAjL,EAAAE,EAAAD,GACA,GAAAA,EAAAiL,QAAAjL,EAAAiL,OAAA/H,OACA,QAAA/C,EAAAG,EAAA,EAAAe,EAAArB,EAAAiL,OAAwC3K,EAAAe,EAAA6B,SAAA/C,EAAAkB,EAAAf,IAA4BA,IACpEP,EAAAmL,8BAAAjL,EAAAE,EAAAgG,KAAAhG,EAAAc,MAAAlB,GAMA,SAAAoL,EAAA7K,EAAAP,EAAAE,GACAA,EAAAmL,eACArL,EAAAsL,cAAApL,EAAAmL,cCWA,SAAA/H,EAAA/C,EAAAP,GACA,IAAAE,EAAAK,EAAAP,GACA,GAAAE,GAEG,IAAAK,EAAAiB,eAAAxB,GAEH,QAAAC,KADAC,EAAAK,EAAAP,GAAAY,OAAAQ,OAAAb,EAAAP,IACA,KACAO,EAAAL,EAAAD,GACAD,EAAAE,EAAAD,GAAA2J,MAAArJ,EAAA4C,QACA,QAAAjD,EAAA,EAAmBA,EAAAK,EAAA4C,OAAkBjD,IACrCF,EAAAE,GAAAK,EAAAL,SAPAA,EAAAK,EAAAP,MAWA,OAAAE,EAkBA,SAAAqL,EAAAhL,EAAAP,EAAAE,EAAAD,EAAAG,EAAAkB,GACA,GAAAtB,EAAA,KACA0B,GAAA,EACArB,EAAAmL,KACA,QAAA/J,KAAAvB,EACAuL,EAAAlL,EAAAP,EAAAK,EAAAoB,EAAAvB,EAAAD,EAAAG,EAAAkB,KACAI,GAAA,GAGA,OAAAA,EAEA,SAiBA,SAAA+J,EAAAlL,EAAAP,EAAAE,EAAAD,EAAAG,EAAAkB,EAAAI,EAAAD,GAAA,IACAd,GAAA,EAEA0B,EAAArC,EADA0B,EAAAmB,EAAA5C,MAEA,GAAAoC,EACA,QAAArC,EAAAsC,EAAA,EAAAjC,EAAAgC,EAAAc,OAAmCb,EAAAjC,IAAAL,EAAAqC,EAAAC,IAAsBA,IACzDtC,EAAA0L,MAAA1L,EAAA0L,KAAAC,UAAAzL,GACAwB,IAAAa,EAAAtC,EAAAD,EAAA4L,WACA5L,EAAA0L,OACA1L,EAAA0L,KAAAC,QAAAzL,GAEAF,EAAA6L,GAAAtL,EAAAN,EAAAG,EAAAkB,EAAAtB,EAAA0L,KAAAhK,EAAAD,GACAd,GAAA,GAIA,OAAAA,EAqBA,SAAA4B,EAAAhC,EAAAP,GACA,GAAAA,EAAA,CACA,IAAAE,EAAAF,EAAAoG,KACA,OAAAlG,GAAAK,GACAP,EAAA8L,YHlHA,SAAAvL,EAAAP,GAEA,WAAAO,EAAA8I,QAAArJ,EAAA,KGgHA+C,CAAA7C,EAAAK,IACAP,EAAA+L,UAAApJ,EAAAzC,EAAAK,GAEA,SAkBA,SAAAyL,EAAAzL,EAAAP,EAAAE,EAAAD,EAAAG,GAAA,IACAkB,EAAA,iBAAAlB,EAAA6L,OAAA1L,EAAAH,EAAA6L,QAAA7L,EAAA6L,OACAvK,EAAAtB,EAAA8L,SACA5K,EACAA,EAAAd,KAAAD,IAAA4L,OAAAzK,GAAAzB,EAAAyB,KACGtB,EAAAgM,WACHzD,QAAAC,KAAA,oBAAAxI,EAAA6L,OAAA,iBAwDA,SAAAI,EAAA9L,EAAAP,EAAAE,GACA,IAAAD,EAAA4C,EAAA7C,GACA,GAAAC,IAAAD,EAAA,CAGA,OADAsM,EAAA/L,EADAwF,EAAA9F,GAAA,WACAC,EAAAF,OACA,EAEA,SAgBA,SAAAsM,EAAA/L,EAAAP,EAAAE,EAAAD,GACA,IAAAG,GACAc,MAAAhB,EACAqM,eAAA,GAEAtM,IACAG,EAAA2J,KAAA9J,GAE0BM,EAAAiM,cAAA,IAAAC,YAAAzM,GAAoD0M,OAAAtM,KAkB9E,SAAAuM,EAAApM,EAAAP,EAAAE,EAAAD,EAAAG,EAAAkB,GAAA,IAEAjB,GADAiB,EAAAuB,EAAA7C,OACAA,EAAA,KAAAA,EACAyB,EAAApB,EAAAwF,EAAAtF,EAAAF,GAAAE,EAAA4L,OAAAnM,GACAK,QAAA,IAAAoB,IACAA,EAAAvB,EAAAF,IAEAsM,EAAA/L,EAAAH,EAAAwM,UAAAnL,EAAApB,GAoDA,SAAAmC,EAAAjC,EAAAP,EAAAE,EAAAD,EAAAG,GACA,IAAAkB,EAAAf,EAAA4L,OAAAnM,GACA6M,KACAvL,EAAAuL,GAAAvL,EAAAlB,EAAA0M,SAAA,YAAgFvM,IAEhFA,EAAAwM,qBAAA/M,EAAAI,EAAA0M,SAAAxL,GA8CA,SAAAiC,EAAAhD,EAAAP,EAAAE,EAAAD,EAAAG,GAAA,IACAkB,EAAA0L,EAAAzM,EAAAP,EAAAE,EAAAD,EAAAG,GACAsB,EAAAtB,EAAA6M,WACA1M,EAAA2M,mBAAA3M,EAAA2M,kBAAAxL,GACAnB,EAAA4M,oBAAAzL,EAAAJ,GAAA,GAEAf,EAAAmB,GAAAJ,EAkDA,SAAA8L,EAAA7M,EAAAP,EAAAE,EAAAD,EAAAG,EAAAkB,EAAAI,GAEAxB,EAAAmN,SAAAnN,EAAAmN,aACA,IAAA5L,GAAgC6L,KAAArN,EAAAsN,OAAAnN,EAAAoN,MAAAlM,EAAAmM,QAAA/L,EAAAgM,WAAA,IAAApM,EAAA6B,QAGhC,GAFAjD,EAAAmN,SAAAjI,KAAA3D,GA0KA,SAAAlB,GACA,QAAAA,EAAAgN,QACA,aAAAhN,EAAA+M,MACA,QAAA/M,EAAA+M,OACA/M,EAAAmN,YACA,MAAAnN,EAAAiN,MAAA,GAAAnI,KA7KAsI,CAAAlM,GAAA,CACA,IAASmM,MAAArN,EAAAsN,OAAA7N,GAAcyB,EAAA+L,MAAA,GACvB/L,EAAAqM,cAAAvN,GAAAwN,GAAAC,gBAAA5N,GAAA,WACAqB,EAAAwM,eAAAjO,EAGA,IAAAW,EAAAX,EAAAkO,aAAA/K,OACA,QACA7C,EADA+B,EAAA,EAAeA,EAAAZ,EAAA+L,MAAArK,OAAwBd,KACvC/B,EAAAmB,EAAA+L,MAAAnL,IACA8L,cAAA9L,EACA+L,EAAA7N,EAAAP,EAAAyB,EAAAnB,EAAAK,GAgBA,SAAAyN,EAAA7N,EAAAP,EAAAE,EAAAD,EAAAG,GACA,IAAAH,EAAAwN,QACA,iBAAAvN,EAAAoN,MAAA,MAAApN,EAAAqN,OAAA,GACA5E,QAAAC,KAAA,wBAAA1I,EAAAqN,OACA,gEACK,KACLjM,EAAArB,EAAAoO,aACA3M,GAAkB4M,MAAAlO,EAAAmO,QAAArO,EAAAsO,KAAAvO,EAAAwO,UAAAlO,GAClB,QACAL,EADAD,EAAA,EAAmBA,EAAAqB,EAAA6B,OAAuBlD,IAE1C,iBADAC,EAAAoB,EAAArB,OAEAC,EAAAwO,EAAAxO,IACA6L,UAAA,GAEAxL,EAAAoO,2BAAA3O,EAAAE,EAAA0O,cACA/C,GAAAgD,EACAnD,KAAAhK,EAAAkK,QAAA1L,KA2BA,SAAA2O,EAAAtO,EAAAP,EAAAE,EAAAD,EAAAG,EAAAkB,EAAAI,GAAA,IACArB,EAAAqB,EAAAtB,EAAAkO,OACA7M,EAAArB,EAAAmO,QACA5N,EAAAP,EAAAoO,KAGA,GAAAlN,GAAAX,EAAAmO,QAAA9O,EAAAmD,OAAAxC,EAAAmO,OAAA3L,QACA,YAAA1B,EAAA6L,OAAA7L,EAAAiM,YACArN,EAAA0O,2BACA1O,EAAA6M,mBAAA7M,EAAA6M,kBAAAzL,EAAA8L,QAAA,CACA,IAAAtN,EAAAC,EAAAF,GACAA,EAAA0F,EAAA/E,EAAAmO,OAAArN,EAAA8L,OAAAvN,GACAK,EAAA2O,0BAAAhP,EAAAC,GAAA,OACAM,EAAA0O,eAAA5O,OAEG,EAmBH,SAAAE,EAAAP,EAAAE,EAAAD,EAAAG,GAKA,GAJAA,EAkCA,SAAAG,EAAAP,EAAAE,EAAAD,GACA,GAAAC,EAAAwN,WAAA,CACA,IAAAtN,EAAAG,EAAA2O,sBAAAhP,EAAAqN,QACAnN,EAAAH,EAAAkO,eAAAnO,EACAA,EAAAI,EAAA0J,KAAA,IAUA,MARA,cAAA5J,EAAAoN,OAEA,gBAAApN,EAAAqN,QACA,UAAArN,EAAAqN,SACA,UAAAhN,EAAA4O,WAAA,aAAA5O,EAAA4O,cACAnP,EAAA,MAAAA,EAAA,GAAAA,GAGAA,EAhDAoP,CAAApP,EAAAI,EAAAF,EAAAD,GACA4M,KACAzM,EAAAyM,GAAAzM,EAAAF,EAAAqN,OAAArN,EAAAoN,KAAAtN,IAEA,aAAAE,EAAAoN,KAEA/M,EAAA8O,sBAAkDrP,EAAAI,EAAAF,EAAAqN,YAC/C,CAEH,IAAAtN,EAAAC,EAAAqN,OACAvN,EAAA+O,2BACA/O,EAAAkN,mBAAAlN,EAAAkN,kBAAAjN,KACAD,EAAAsP,GAAAC,aAAAvP,EAAAsP,GAAAC,WAAAtP,KACAD,EAAAmN,oBAAAlN,EAAAG,IACAG,EAAA0O,eAAAjP,GAIAO,EAAAiP,4BAAAxP,EAAAC,EAAAG,IAnCAqP,CAAAlP,EAAAF,EAAAoB,EAAAd,EAFAP,EAAAqO,UAAAiB,iBAAAnP,EAAAI,EAAAX,EAAAE,EAAAD,EAAAqB,KAsIA,SAAAqO,EAAApP,EAAAP,GACA,GAAAA,EAAA0N,WAAA,KAEAxN,EAAAK,EAAA2O,wBACA3O,EAAA2O,0BACAjP,EAAAD,EAAAwN,MAEApN,EAAAwJ,MAAA3J,EAAAkD,QACA,QAAA5C,EAAA,EAAiBA,EAAAN,EAAAkD,OAAgB5C,IACjCH,EAAAG,GAAAN,EAAAM,GAAAkN,QAEA,IAAAnM,EAAAtB,EAAAuN,OACArN,EAAAoB,GAAAlB,EAEAJ,EAAAyN,SAAA,YAAAzN,EAAAsN,OACA/M,EAAAe,GAAAtB,EAAAyN,UAcA,SAAAmC,EAAArP,EAAAP,EAAAE,GACA,GAAAA,EAAA4N,cAAA,CACA,IAAA7N,EAAAC,EAAAsN,MAAA,GACAjN,EAAAsP,iBAAA3P,EAAA4N,cAAA,SAAA1N,IA5YA,SAAAG,EAAAP,EAAAE,EAAAD,EAAAG,GAAA,IACAkB,EACAI,EAAiCnB,EAAAmM,OACjCrM,EAAAqB,KAAAqI,KACA1J,GACAJ,EAAAyF,EAAAxF,EAAAD,EAAAI,GACAiB,EAAAI,KAAAR,OAEAI,EAAAf,EAAAgN,OAAArN,GAEAoB,EAAAlB,GAAAkB,IACAtB,EAAAsP,GAAAC,YAAAvP,EAAAsP,GAAAC,WAAAtP,KACAD,EAAAgP,0BAAA/O,EAAAqB,GAAA,IAAAjB,IACAqB,KAAA6K,eACAvM,EAAA8P,wBA+XAlN,CAAAxC,EAAAJ,EAAAE,EAAAqN,OAAAtN,EAAA6O,OAAA7O,EAAA4N,WAwBA,SAAAkC,EAAAxP,EAAAP,EAAAE,EAAAD,EAAAG,EAAAkB,GACAA,EAAAtB,EAAAgQ,QAAA1O,IACA,iBAAAA,KAAAtB,EAAAiQ,aACA,IAAAvO,GACAuO,WAAAjQ,EAAAiQ,WACAC,KAAAlQ,EAAAkQ,KACAjD,WAAA7M,EACAgM,UAAA9K,GAEA,QAAAG,EAAAd,EAAA,EAAoBA,EAAAX,EAAAkQ,KAAA/M,SAAA1B,EAAAzB,EAAAkQ,KAAAvP,IAA0CA,IAC9Dc,EAAAgM,SACAlN,EAAA4P,mBAAA1O,EAAAmN,aAAA1O,GACA2L,GAAA5L,EAAAyL,KAAAhK,EAAAkK,QAAAnK,IAIAH,GACAf,EAAA4P,mBAAAnQ,EAAAiQ,WAAA/P,GACA2L,GAAA5L,EAAAyL,KAAAhK,IAqBA,SAAAsL,EAAAzM,EAAAP,EAAAE,EAAAD,EAAAG,GAAA,IAGAkB,EAAAf,EAAA6P,aAAA7P,EACAmB,EAAAJ,EAAAlB,EAAA6P,YACA,GAAAvO,EAAA,CACA,IAAAzB,EA0KA,SAAAM,EAAAP,EAAAE,EAAAD,GACA,IAAAG,KACA,QAAAkB,EAAA,EAAAI,EAAA1B,EAAAmD,OAA8B7B,EAAAI,EAAKJ,IAAA,KAGnCI,EAFArB,EAAAL,EAAAsB,GACAG,EAAApB,EAAA+F,KAeA,GAbA/F,EAAAoN,QACA/L,EAAArB,EAAAa,MAEAb,EAAAyL,gBAGA,KAFApK,EAAAmE,EAAAtF,EAAAkB,MAGAC,EAAAzB,EAAAwB,IAGAC,EAAAnB,EAAAkB,GAGApB,EAAA0L,SAAA,KAGAxL,EAAA,IAAAkB,EAAA4H,QAAAnJ,EAAA,KACAF,EAAA,IAAAE,EAAAmJ,QAAA5H,KAAAlB,EACAH,EAAAkB,IACAyI,KAAA/J,EAAAE,EAAAuB,EACAP,MAAAlB,EAAAC,EAAAC,GAAAwB,EACAoG,KAAApG,QAGAtB,EAAAkB,GAAAI,EAGA,OAAAtB,EA3MAiQ,CAAA9P,EAAA4L,OAAA/L,EAAA8P,KAAAlQ,EAAAE,GACA,OAAAwB,EAAA0B,MAAA9B,EAAArB,GACGG,EAAAgM,WACHzD,QAAAC,KAAA,WAAAxI,EAAA6P,WAAA,iBA8BA,SAAAK,EAAA/P,GACA,IAAAP,EAAA,GACA,QACAE,EADAD,EAAA,EAAeA,EAAAM,EAAA4C,OAAgBlD,IAE/BD,IADAE,EAAAK,EAAAN,GAAAwN,UACA,GAEA,OAAAzN,EAaA,SAAAuQ,EAAAhQ,GAEA,IAAAP,EAAAO,EAAAiQ,MAAA,0BACA,GAAAxQ,EAAA,KAEAE,GAAe+P,WADfjQ,EAAA,GACegQ,QAAA,EAAAE,KAAAO,IACf,GAAAzQ,EAAA,GAAAyI,OAAA,CAGA,OAkBA,SAAAlI,EAAAP,GAQA,OAPAA,EAAAkQ,KAAA3P,EAAAmQ,IAAA,SAAAnQ,GACA,IAAAL,EAAAwO,EAAAnO,GAIA,OAHAL,EAAAuN,UACAzN,EAAAgQ,QAAA,GAEA9P,GACG+C,MACHjD,EA1BA2Q,CADA3Q,EAAA,GAAAkI,QAAA,kBAA8CQ,MAAA,KAC9CxI,GAEA,OAAAA,EAGA,YAwCA,SAAAwO,EAAAnO,GAAA,IAEAP,EAAAO,EAAAkI,OAEAP,QAAA,WAAqB,KAIrBA,QAAA,eAGAjI,GACAmG,KAAApG,EACAkB,MAAA,GACAuM,SAAA,GAGAvN,EAAAF,EAAA,GA8BA,MA7BA,MAAAE,IACAA,EAAAF,EAAA,IAEA,KAAAE,GAAA,KAAAA,IACAA,EAAA,KAGA,MADAA,GAEA,MAFAA,GAGAD,EAAAiB,MAAAlB,EAAAgH,MAAA,MACA/G,EAAAwN,SAAA,GAEA,MANAvN,IAOAD,EAAAiB,OAAAlB,EACAC,EAAAwN,SAAA,GAIAxN,EAAAwN,UACAxN,EAAA2O,aAAA/L,EAAA7C,GAEAC,EAAA6L,WAAArL,EAAAT,GACAC,EAAA6L,aACA7L,EAAA8L,SAAA,MAAA/L,EAAAgH,OAAA,GACA/G,EAAA8L,WACA9L,EAAAmG,KAAApG,EAAAgH,MAAA,SAIA/G,EAmEA,SAAA2Q,EAAArQ,EAAAP,EAAAE,EAAAD,GACA,IAAAG,EAAAF,EAAA,WACAK,EAAAsQ,WAAAzQ,GAAgC0Q,aAAA7Q,IAChCM,EAAAsQ,WAAA3Q,EAAA,UAAAF,EAAAmD,QAEA5C,EAAA4L,OAAA/L,IAA8B0Q,aAAA,MAkB9B,SAAAC,EAAAxQ,EAAAP,EAAAE,EAAAD,EAAAG,EAAAkB,GACAsP,EAAArQ,EAAAP,EAAAE,IACAoO,MAAArO,EACA+Q,WAAA5Q,EACA6Q,QAAA3P,EACA4P,OAAAlR,EACAmR,KAAA,kBA42BApP,KAAAiD;;;;;;;;;;INr4DAqC,EACAM,GAHAQ,GAAA,sBACAhB,GAAA,0BOAAxF,OAAAyP,SACAzP,OAAA0P,UAAA1P,OAAA0P,SAAAC,UACA3P,OAAA2G,eAAAiJ,0BAWA,IA8BA1E,GA9BA2E,GACAlQ,EAAA4C,SAAAuD,SAAA9F,OAAA+F,SAAAF,MNdAiK,GAAA,EAQA/P,EAAAH,UAAAmQ,oBAEAhQ,EAAAH,UAAAoQ,iBAaAC,GAAA,SAAArR,GACA,IAAAL,EAAoDK,EAAAmR,oBACpDxR,IACAA,EAAA,IAAA2R,QAC8BtR,EAAAmR,oBAAAxR,GAG9B,IAAAD,EAAAwR,KAqBA,OApBA,SAAAzR,GACA,IAAAI,EAA4CJ,EAAA2R,WAC5C,GAAAvR,KAAAH,GACA,OAAAD,EAHA,IAKAsB,EAAApB,EACAwB,EAAAJ,EAAAP,IAAAf,GACA0B,IACAA,EAAsCnB,EAAAP,GACtCsB,EAAAwQ,IAAA9R,EAAA0B,IAKA,IAAArB,EAAAO,OAAAQ,OAA2DM,EAAAiQ,YAAAvR,GAAA,MAG3D,OAFAC,EAAAJ,IAAA,EAC8ByB,EAAAiQ,WAAAtR,EAC9BqB,ICjDA4H,GAAA,8BACAH,GAAA,UACAK,GAAA;;;;;;;;;MMAAuI,MACAC,YAoCAC,WAAAC,YAEAC,gCAAmC,aAUnClO,cAAA1D,EAAAP,GACA,GAAAO,EAAA,CACA,IAAAL,EAjDA,SAAAK,GACA,OAAAwR,GAAAxR,IAAAyR,GAAAzR,EAAA6J,eAgDAjI,CAAA5B,GADA,OAEAL,GAAAF,EACAE,EAAA4I,cAAA9I,GAEAE,EAEA,YAWA+D,yBAAA1D,EAAAP,EAAAE,GACAF,IAAAE,GACA+C,KAAAmP,WAgBArJ,gBAEA,IAAA9F,KAAAoP,YAAA,OAGA9R,EAAAoB,OAAA2Q,yBAAAC,iBACAD,YAAAC,iBAAAtP,OAAAiB,SAAAjB,KAAAsH,cACAvK,EAAAC,EACAgD,KAAAiG,aAAA,iBAAA3I,EAAAkH,SACAxE,KAAAoP,YAAA/Q,EAAAtB,GAEA,OAAAiD,KAAAoP,YAUApO,SAAA1D,IACAA,KAAA0C,KAAA+H,MAEA/H,KAAA+H,GAAAzK,EAIAwR,GAAAxR,GAAA0C,KACA+O,GAAAzR,EAAA6J,eAAAnH,KA7GA,SAAA1C,GACAA,EAAAuI,cAAA,UACAH,QAAAC,KAAA,2CAAArI,EAAAyK,IA4GAtI,CAAAO,QAKAgP,GAAA1Q,UAAAiR,QAAAT,GAEAzJ,eAAAmK,OAAA,aAAAR,UJ7HAjI,MACAC,GAAA,UACAE,GAAA;;;;;;;;;MKYAuI,GAAA,EACAC,GAAA,EACAC,MACAC,GAAA,EACAC,GAAA5O,SAAA6O,eAAA,IACA,IAAApR,OAAAqR,iBAEA,WACA,MAAAzS,EAAAqS,GAAAzP,OACA,QACAnD,EADAE,EAAA,EAAiBA,EAAAK,EAASL,IAE1B,GADAF,EAAA4S,GAAA1S,GAEA,IACAF,IACO,MAAAA,GACPiT,WAAA,KAA0B,MAAAjT,IAI1B4S,GAAAM,OAAA,EAAA3S,GACAoS,IAAApS,IAfA4S,QAAAL,IAAoEM,eAAA,UA+IpEC,IASAC,IAAA/S,IACAuS,GAAAtK,YAAAqK,KACAD,GAAAxN,KAAA7E,GACAmS,MAUAzO,OAAA1D,GACA,MAAAP,EAAAO,EAAAoS,GACA,MAAA3S,EAAA,CACA,IAAA4S,GAAA5S,GACA,UAAA8D,MAAA,yBAAAvD,GAEAqS,GAAA5S,GAAA,QCtKAuT,GAAA3B,GAAArR,kBASAA,EAQA0D,wBAAA1D,GACA,MAAAP,EAAAiD,KAAA1B,UACA,QAAArB,KAAAK,EAEAL,KAAAF,GACAA,EAAAwT,wBAAAtT,GAcA+D,gCAAA1D,GACA,OAAAA,EAAA6J,cAUAnG,0BAkBAA,wBAAA1D,EAAAP,GACAiD,KAAAwQ,2BAAAlT,GACA0C,KAAAzB,eAAA,uBACAyB,KAAAiK,kBAAAtM,OAAA8S,UAAiDzQ,KAAAiK,oBAEjDjK,KAAAiK,kBAAA3M,KACA0C,KAAAiK,kBAAA3M,IAAA,EACA0C,KAAA0Q,wBAAApT,EAAAP,IAWAiE,2BAAA1D,GAIA,GAHA0C,KAAAzB,eAAA,sBACAyB,KAAA2Q,iBAAAhT,OAAA8S,UAAgDzQ,KAAA2Q,oBAEhD3Q,KAAA2Q,iBAAArT,GAAA,CACA,MAAAP,EAAAiD,KAAAsD,YAAAsN,yBAAAtT,GACA0C,KAAA2Q,iBAAA5T,GAAAO,GAUA0D,wBAAA1D,EAAAP,GACAY,OAAAC,eAAAoC,KAAA1C,GAGA0D,MACA,OAAAhB,KAAA6Q,aAAAvT,IAGAuR,IAAA9R,EAAA,aAAsC,SAAAA,GACtCiD,KAAA8Q,aAAAxT,EAAAP,MAMAiE,cACA+P,QACA/Q,KAAAgR,eAAA,EACAhR,KAAAiR,aAAA,EACAjR,KAAAkR,eAAA,EACAlR,KAAAkJ,UACAlJ,KAAAmR,cAAA,KACAnR,KAAAoR,UAAA,KACApR,KAAAqR,oBAAA,KACArR,KAAAsR,eAAA,EACAtR,KAAAuR,wBAiBAvQ,QACAhB,KAAAiR,aAAA,EACAjR,KAAAwR,mBAYAxQ,wBAIA,QAAA1D,KAAA0C,KAAAiK,kBACAjK,KAAAzB,eAAAjB,KACA0C,KAAAqR,oBAAArR,KAAAqR,wBACArR,KAAAqR,oBAAA/T,GAAA0C,KAAA1C,UACA0C,KAAA1C,IAkBA0D,8BAAA1D,GACAK,OAAA8S,OAAAzQ,KAAA1C,GAYA0D,aAAA1D,EAAAP,GACAiD,KAAAkK,oBAAA5M,EAAAP,IACAiD,KAAA6M,wBAUA7L,aAAA1D,GACA,OAAA0C,KAAAkJ,OAAA5L,GAgBA0D,oBAAA1D,EAAAP,GAAA,IACAE,EAAA+C,KAAAkJ,OAAA5L,GACAN,EAAAgD,KAAAyR,sBAAAnU,EAAAP,EAAAE,GAaA,OAZAD,KACAgD,KAAAmR,gBACAnR,KAAAmR,iBACAnR,KAAAoR,cAGApR,KAAAoR,aAAA9T,KAAA0C,KAAAoR,aACApR,KAAAoR,UAAA9T,GAAAL,GAEA+C,KAAAkJ,OAAA5L,GAAAP,EACAiD,KAAAmR,cAAA7T,GAAAP,GAEAC,EAWAgE,yBACAhB,KAAAkR,eAAAlR,KAAAiR,cACAjR,KAAAkR,eAAA,EA/QAd,GAgRAC,IAAA,KACArQ,KAAAkR,gBACAlR,KAAAkR,eAAA,EACAlR,KAAAwR,uBAiBAxQ,oBACAhB,KAAAgR,gBACAhR,KAAAgR,eAAA,EACAhR,KAAAqR,sBACArR,KAAA0R,8BAAA1R,KAAAqR,qBACArR,KAAAqR,oBAAA,MAEArR,KAAA2R,SAaA3Q,mBAAA,MACA1D,EAAA0C,KAAAkJ,OACAnM,EAAAiD,KAAAmR,cACAlU,EAAA+C,KAAAoR,UACApR,KAAA4R,wBAAAtU,EAAAP,EAAAE,KACA+C,KAAAmR,cAAA,KACAnR,KAAAoR,UAAA,KACApR,KAAA6R,mBAAAvU,EAAAP,EAAAE,IAgBA+D,wBAAA1D,EAAAP,GACA,QAAAA,EAeAiE,sBAqBAA,sBAAA1D,EAAAP,EAAAE,GACA,OAEAA,IAAAF,IAEAE,MAAAF,MAeAiE,yBAAA1D,EAAAP,EAAAE,EAAAD,GACAD,IAAAE,GACA+C,KAAA8R,qBAAAxU,EAAAL,GAEA8T,MAAAgB,0BACAhB,MAAAgB,yBAAAzU,EAAAP,EAAAE,EAAAD,GAgBAgE,qBAAA1D,EAAAP,EAAAE,GACA,IAAA+C,KAAAsR,cAAA,OACAtU,EAAAgD,KAAA2Q,iBACAxT,EAAAH,KAAAM,MACA0C,KAAA7C,GAAA6C,KAAAgS,kBAAAjV,EAAAE,GACA+C,KAAAsD,YAAA2O,gBAAA9U,KAcA6D,qBAAA1D,EAAAP,EAAAE,GACA+C,KAAAsR,eAAA,EACArU,EAAA,EAAAgD,UAAAC,OAAAF,KAAA1C,GAAAL,EACA+C,KAAAoM,sBAAyDpM,KAAA/C,EACzDF,GAAAiD,KAAAsD,YAAAsN,yBAAAtT,IACA0C,KAAAsR,eAAA,EAgBAtQ,sBAAA1D,EAAAP,EAAAE,GACA,MAAAD,EAAAgD,KAAAkS,gBAAAnV,QACA,IAAAC,EACAM,EAAA+J,gBAAApK,GAEAK,EAAAmJ,aAAAxJ,EAAAD,GAeAgE,gBAAA1D,GACA,cAAAA,GACA,cACA,OAAAA,EAAA,UACA,QACA,aAAAA,OAAA,EAAAA,EAAAsD,YAgBAI,kBAAA1D,EAAAP,GAAA,OACAA,IACAoV,QACA,OAAA7U,EAFAP,IAGAqV,QACA9U,EAEAA;;;;;;;;;;;;;;;;;;ECrfA,IAAA+U,GAAAC,EAKA,MAAAC,UACA,IAAAvV,EAAAiS,YAAA3Q,UACAtB,GAAA,CACA,IAAAM,EAAAK,OAAA4E,oBAAAvF,GACA,QAAAD,EAAA,EAAeA,EAAAO,EAAA4C,OAAgBnD,IAC/BwV,GAAAjV,EAAAP,KAAA,EAEAC,EAAAW,OAAAsG,eAAAjH,SAmEAwV,GAAA7D,GAAArR,IAQA,MAAAP,EAAAuT,GAAAhT,GAgNA,qBAvMAP,EAWAiE,uCACA,IAAA1D,EAAA0C,KAAAkP,mBACA,QAAAnS,EAAA,EAAmBA,EAAAO,EAAA4C,OAAenD,IAClCiD,KAAA1B,UAAAiS,wBAAA8B,GAAAI,gBAAAnV,EAAAP,KAYAiE,gCAAA1D,GACA,OAAA+U,GAAAtH,gBAAAzN,GAWA0D,wBACAhB,KAAA0S,cACA1S,KAAA2S,2BAAA3S,KAAA0S,aACA1S,KAAA0S,YAAA,MAEA3B,MAAAQ,wBAgBAvQ,2BAAA1D,GACA,QAAAP,KAAAO,EACA0C,KAAA8Q,aAAA/T,EAAAO,EAAAP,IAcAiE,iBAAA1D,EAAAP,GACyCiD,KACzCsG,aAAAhJ,IACA0C,KAAAoM,sBAFyCpM,KAEzCjD,EAAAO,GAUA0D,gBAAA1D,GAEA,cAAAA,GACA,aACA,GAAAA,aAAAsV,KACA,OAAAtV,EAAAsD,WACW,GAAAtD,EACX,IACA,OAAAuV,KAAAC,UAAAxV,GACa,MAAAA,GACb,SAIA,QACA,OAAAyT,MAAAmB,gBAAA5U,IAmBA0D,kBAAA1D,EAAAP,GAIA,IAAAE,EACA,OAAAF,GACA,KAAAY,OACA,IACAV,EAAA4V,KAAAE,MAAoDzV,GACzC,MAAAP,GAEXE,EAAAK,EAEA,MACA,KAAAqJ,MACA,IACA1J,EAAA4V,KAAAE,MAAoDzV,GACzC,MAAAP,GACXE,EAAA,KACAyI,QAAAC,4DAAgFrI,KAEhF,MACA,KAAAsV,KACA3V,EAAA+E,MAAA1E,KAAA,IAAAA,EACAL,EAAA,IAAA2V,KAAA3V,GACA,MACA,QACAA,EAAA8T,MAAAiB,kBAAA1U,EAAAP,GAGA,OAAAE,EAmBA+D,wBAAA1D,EAAAP,IA9OA,SAAAO,EAAAP,GAEA,IAAAwV,GAAAxV,GAAA,CACA,IAAAE,EAAAK,EAAAP,QACA,IAAAE,IACAK,EAAA4L,OAGA5L,EAAA4M,oBAAAnN,EAAAE,IAGAK,EAAAoV,aAESpV,EAAAiB,eAAAI,0BAAA,cAAArB,MACTA,EAAAoV,YAAA/U,OAAAQ,OAAAb,EAAAoV,cAFApV,EAAAoV,eAIApV,EAAAoV,YAAA3V,GAAAE,MA+NAuC,CAAAQ,KAAA1C,GACAyT,MAAAL,wBAAApT,EAAAP,GASAiE,aAAA1D,GACA,OAAA0C,KAAAiK,mBAAAjK,KAAAiK,kBAAA3M,GAUA0D,mBAAA1D,GACA,SAAA0C,KAAAmR,eAAA7T,KAAA0C,KAAAmR,mBN7RA/J,IACA4L,UAAA,EACAC,cAAA,GAqFAC,GAAAvE,GAAArR,kBAOAA,EA6EA0D,sBAAA1D,EAAAP,GAEA,IAAAO,EAAA+K,cAAA,CACA,IAAApL,EAAAK,EAAA+K,iBACApL,EAAAgO,gBACAhO,EAAAkW,gBACApW,KAAAoW,iBACA7V,EAAAgJ,aAAA,oBACAtG,KAAAoT,sBAAA9V,EAAAL,GAA4DoW,OAAA,OAE5D,OAAA/V,EAAA+K,cAGArH,6BAAA1D,EAAAP,EAAAE,GACA,OAAA+C,KAAAsT,mBAAAhW,EAAAyI,QAAAhJ,EAAAE,GAgBA+D,0BAAA1D,EAAAP,EAAAE,GAAA,IACAD,EACAG,EAAuCG,EAavC,MAZA,YAAAH,EAAA+O,WAAA/O,EAAAmJ,aAAA,oBAEO,SAAAnJ,EAAA+O,YAEPnP,EAAAwW,mBAAA,GAHAvW,EAAAgD,KAAAwT,6BAAArW,EAAAJ,EAAAE,IAAAD,EAKAG,EAAAwK,aACA3K,EAAAgD,KAAAyT,yBAAAtW,EAAAJ,EAAAE,IAAAD,GAEAG,EAAAuW,eAAAvW,EAAAuW,kBACA1W,EAAAgD,KAAA2T,6BAAAxW,EAAAJ,EAAAE,IAAAD,GAEAA,EAgBAgE,gCAAA1D,EAAAP,EAAAE,GACA,cAAAK,EAAA4O,WAAA,UAAA5O,EAAA4O,UAGA,QAAAlP,EAAAG,EAAAG,EAAAqK,WAAAtJ,EAAA,EAAyDlB,EAAMA,EAAAH,EAAA,CAU/D,GARA,YAAAG,EAAA+O,YACA/O,EAAA4F,EAAA5F,IAMAH,EAAAG,EAAAyK,YACAzK,EAAAyW,WAAAC,KAAAC,UAAA,KACA,IAAA/W,EAAAC,EACAD,KAAA6W,WAAAC,KAAAC,WACA3W,EAAAoI,aAAAxI,EAAAwI,YACAvI,EAAAD,EAAA6K,YACAtK,EAAAyW,YAAAhX,GACAA,EAAAC,EAGA,GAAAD,EAAAoW,kBAAAhW,EAAAoI,YAAAC,OAAA,CACAlI,EAAAyW,YAAA5W,GACA,UAGA,IAAAsB,GAAyBoJ,YAAAxJ,EAAAqJ,WAAAzK,GACzB+C,KAAAsT,mBAAAnW,EAAAJ,EAAA0B,KACAA,EAAAuV,UAAAjX,EAAAkO,aAAA9I,KAAoF1D,GAAA,GAGpFtB,EAAAoK,YACAlJ,KAsBA2C,oCAAA1D,EAAAP,EAAAE,GAAA,IACAD,EAAAgD,KAAAiU,eAAA3W,EAAAP,GAKA,OAJAC,EAAA+I,QACAzI,EAAAyI,QAAAuB,cAAA4M,0BACA1S,YAAAlE,EAAAyI,SACA9I,EAAAmL,aAAApL,GACA,EAaAgE,oCAAA1D,EAAAP,EAAAC,GAAA,IAGAG,GAAA,EACAkB,EAAAsI,MAAAwN,KAAA7W,EAAAmK,YACA,QAAAhJ,EAAAxB,EAAAoB,EAAA6B,OAAA,EAAmCzB,EAAAJ,EAAApB,GAAcA,IACjDE,EAAA6C,KAAAoU,4BAAA9W,EAAAP,EAAAC,EAAAyB,EAAA0E,KAAA1E,EAAAR,QAAAd,EAEA,OAAAA,EAkBA6D,mCAAA1D,EAAAP,EAAAE,EAAAD,EAAAG,GAAA,MAEA,QAAAH,EAAA+G,MAAA,MACAzG,EAAA+J,gBAAArK,GACAC,EAAAgL,OAAAhL,EAAAgL,WACAhL,EAAAgL,OAAA9F,MACAgB,KAAAnG,EAAA+G,MAAA,GACA9F,MAAAd,KAPA,KAYA,OAAAH,IACAC,EAAA8K,GAAA5K,EAbA,IA6BA6D,2BAAA1D,GACA,IAAAP,EAAgEO,EAAA+K,cAChE,OAAAtL,KAAAgJ,SAAAzI,EAAAyI,QAyBA/E,eAAA1D,GAEAA,MAAAyI,SACArH,OAAAoC,yCAAAuT,UACAvT,oBAAAuT,SAAA/W,GAJA,IAMAP,EAAAiD,KAAAsD,YAAA2Q,eAAA3W,GACAL,EAAAF,EAAAkO,aACAjO,EAAAD,EAAAgJ,SAAAzI,EAAAyI,QACA5I,EAA4C8D,SAAAqT,WAAAtX,GAAA,GAE5CG,EAAAoX,oBAAAxX,EAAAwW,kBACA,IAAAlV,EAAAlB,EAAAqX,SAAA7N,MAAA1J,EAAAiD,QACA/C,EAAAgN,KACA,QAAApN,EACAC,EADAyB,EAAA,EAAArB,EAAAH,EAAAiD,OAA4CzB,EAAArB,IAAAL,EAAAE,EAAAwB,IAA6BA,IACzEzB,EAAAqB,EAAAI,GAAAuE,EAAA7F,EAAAJ,GACA+K,EAAA9H,EAAA7C,EAAAgN,EAAAnN,EAAAD,GACAoL,EAAAnI,EAAAhD,EAAAD,GACAiL,EAAAhI,KAAAhD,EAAAD,GAGA,OADAI,EAAwCA,EAiBxC6D,8BAAA1D,EAAAP,EAAAE,EAAAD,GAEA,IAAAG,EAhXA,SAAAJ,EAAAO,EAAAL,GAWA,OARAF,IAAAoQ,aAAApQ,EACA,SAAAC,GACAD,EAAAE,GACAF,EAAAE,GAAAD,IAAAyM,QAEA/D,QAAAC,KAAA,oBAAA1I,EAAA,kBAwWAwG,CADAzG,KAAAM,EACAP,EAAAE,GAEA,OADA+C,KAAAyU,wBAAAnX,EAAAP,EAAAI,GACAA,EAWA6D,wBAAA1D,EAAAP,EAAAE,GACAK,EAAAsP,iBAAA7P,EAAAE,GAWA+D,6BAAA1D,EAAAP,EAAAE,GACAK,EAAAoX,oBAAA3X,EAAAE,OCncA6N,GAAAwH;;;;;;;;;;;;;;;;;;EAIA,IAAA/J,GAAA,QAMA8D,IACAsI,QAAA,mBACAC,QAAA,mBACAC,OAAA,kBACAC,UAAA,qBACAC,QAAA,mBACAzI,UAAA,cAIA0I,GAAA,YAoBAC,SAqvBAzH,MAkBA0H,GAAA,iWAkRAC,GAAAxG,GAAArR,IASA,MAAAP,EAAAmW,GAAAV,GAAAlV,UASAL,UAAAF,EAEAiE,cACA+P,QAGA/Q,KAAA8L,2BAAA,EAKA9L,KAAAoV,cAAA,EAEApV,KAAAqV,mBAEArV,KAAAsV,qBAEAtV,KAAAuV,eAEAvV,KAAAwV,kBAEAxV,KAAAyV,eAEAzV,KAAAiM,sBAEAjM,KAAA0V,WAEA1V,KAAA2V,WAEA3V,KAAA4V,yBAEA5V,KAAAkJ,OAEAlJ,KAAAmR,cAEAnR,KAAAoR,UAEApR,KAAA6V,iBAEA7V,KAAA8V,iBAEA9V,KAAA+V,gBAEA/V,KAAAgW,mBAEAhW,KAAAiW,iBAEAjW,KAAAkW,WAEAlW,KAAAmW,eAGAC,4BACA,OAAA/J,GAMArL,wBACA+P,MAAAQ,wBACA8E,GAAAC,aAAAtW,MACAA,KAAAqV,oBAAA,EACArV,KAAAsV,qBAAA,KACAtV,KAAAuV,eAAA,KACAvV,KAAAwV,kBAAA,KACAxV,KAAAyV,gBAAA,EAEAzV,KAAAiM,sBAAAjM,KAAAiM,uBAAA,KACAjM,KAAA0V,WAAA1V,KAAA0V,YAAA,KACA1V,KAAA2V,cACA3V,KAAA4V,0BAAA,EAYA5U,2BAAA1D,GACA0C,KAAAkJ,OAAAvL,OAAAQ,OAAAb,GACA0C,KAAAmR,cAAAxT,OAAAQ,OAAAb,GACA0C,KAAAoR,aAWApQ,8BAAA1D,GACA,IAAAP,EAAAiD,KAAAqM,GAAAC,WACA,QAAArP,KAAAK,EACAP,KAAAE,KACA+C,KAAAmR,cAAAnR,KAAAmR,kBACAnR,KAAAoR,UAAApR,KAAAoR,cACApR,KAAAkJ,OAAAjM,GAAA+C,KAAAmR,cAAAlU,GAAAK,EAAAL,IAkBA+D,mBAAA1D,EAAAP,EAAAE,GACA+C,KAAAuQ,wBAAAjT,EAAAP,GAAAsP,GAAAC,WAEA,IAAAtP,EAAAqD,EAAAL,KAAAjD,GAAAO,GACAN,IACAA,EAAAgD,KAAAjD,GAAAO,OAEAN,EAAAmF,KAAAlF,GAWA+D,sBAAA1D,EAAAP,EAAAE,GAAA,IACAD,EAAAqD,EAAAL,KAAAjD,GAAAO,GACAH,EAAAH,EAAAoJ,QAAAnJ,GACA,GAAAE,GACAH,EAAAiT,OAAA9S,EAAA,GAaA6D,mBAAA1D,EAAAP,GACA,IAAAE,EAAA+C,KAAAjD,GACA,SAAAE,MAAAK,IAWA0D,mBAAA1D,GACA,OAAA0C,KAAAuW,mBAAAjZ,EAAA+O,GAAAC,WAWAtL,iBAAA1D,GACA,OAAA0C,KAAAuW,mBAAAjZ,EAAA+O,GAAAwI,QAWA7T,kBAAA1D,GACA,OAAA0C,KAAAuW,mBAAAjZ,EAAA+O,GAAAuI,SAWA5T,mBAAA1D,GACA,OAAA0C,KAAAuW,mBAAAjZ,EAAA+O,GAAAsI,SAiCA3T,0BAAA1D,EAAAP,EAAAE,EAAAD,GACA,GAAAA,GACA4C,EAAA+G,MAAAC,QAAAtJ,KAAA,GAAAA,OAAA,CASA,IAAAN,EAAA,CACA,IAAAC,EAAA2F,EAAA5C,KAAA1C,GAGA,KAFAA,EAAmCuF,EAAA7C,KAAA1C,EAAAP,MAEnCgU,MAAAU,sBAAAnU,EAAAP,EAAAE,GACA,SAIA,GADA+C,KAAAyV,gBAAA,EACAzV,KAAAkK,oBAAqD5M,EAAAP,EAAAE,GAErD,OA76BA,SAAAK,EAAAP,EAAAC,GACA,IAAAG,EAAAG,EAAAkY,kBACA,GAAArY,EAAA,CACA,IAAAkB,EACA,QAAAI,KAAAtB,EAAA,CACA,IAAAF,EAAAE,EAAAsB,GACAiB,EAAAjB,EAAA1B,IACAsB,EAAAoE,EAAAhE,EAAAxB,EAAAF,GACAO,EAAAyO,0BAAA1N,EAAArB,GAAA,OACO0C,EAAAzC,EAAAF,KACPsB,EAAAoE,EAAAxF,EAAAwB,EAAA1B,GACAO,EAAAyO,0BAAA1N,EAAArB,GAAA,SAi6BA6C,CAAAG,KAAA1C,EAAAP,IACA,MAEO,CACP,GAAAiD,KAAAiK,mBAAAjK,KAAAiK,kBAAA3M,GACA,OAAA0C,KAAAkK,oBAA0D5M,EAAAP,EAAAE,GAE1D+C,KAAA1C,GAAAP,EAGA,SAwBAiE,4BAAA1D,EAAAP,EAAAE,IAKAA,IAAAK,EAAAP,IAAA,iBAAAE,KACAK,EAAAP,GAAAE,GAuCA+D,oBAAA1D,EAAAP,EAAAE,GAAA,IACAD,EAAAgD,KAAAyV,gBAAAjY,EAAAF,GACAH,EAAAH,EAAAgD,KAAA2V,WAAA3V,KAAAkJ,OAFA,QAGAlJ,KAAAyR,sBAAAnU,EAAAP,EAAAI,EAAAG,MACA0C,KAAAmR,gBACAnR,KAAAmR,iBACAnR,KAAAoR,cAGA9T,KAAA0C,KAAAoR,YACApR,KAAAoR,UAAA9T,GAAA0C,KAAAkJ,OAAA5L,IAIAN,EACAgD,KAAA2V,WAAArY,GAAAP,EAEAiD,KAAAkJ,OAAA5L,GAAAP,EAGAiD,KAAAmR,cAAA7T,GAAAP,GAEAC,GAAAgD,KAAAqM,GAAAwI,SAAA7U,KAAAqM,GAAAwI,QAAAvX,MACA0C,KAAAuV,eAAAvV,KAAAuV,mBACAvV,KAAAuV,eAAAjY,GAAAL,IAxBA,GAwCA+D,aAAA1D,EAAAP,GACAiD,KAAAkK,oBAAA5M,EAAAP,GAAA,IACAiD,KAAA6M,wBAaA7L,wBACAhB,KAAAiR,aACAjR,KAAAwR,mBAaAxQ,eAAA1D,GACA0C,KAAAsV,qBAAAtV,KAAAsV,yBACAhY,IAAA0C,MACAA,KAAAsV,qBAAAnT,KAAA7E,GAUA0D,mBACAhB,KAAAoV,gBACArE,MAAAS,mBACAxR,KAAAoV,gBAUApU,gBACAhB,KAAAqV,mBAQArV,KAAAwW,0BAPAxW,KAAAqV,oBAAA,EACArV,KAAAyW,gBAIAzW,KAAAiR,aAAA,GAkBAjQ,yBACA,IAAA1D,EAAA0C,KAAAsV,qBACA,GAAAhY,EAAA,CACA0C,KAAAsV,qBAAA,KACA,QACAvY,EADAE,EAAA,EAAqBA,EAAAK,EAAA4C,OAAoBjD,KACzCF,EAAAO,EAAAL,IACA+T,cAEWjU,EAAAoU,eACXpU,EAAAyU,mBAFAzU,EAAA2Z,qBAgBA1V,gBACAhB,KAAAwW,yBAkBAxV,cAAA1D,EAAAP,GACA,QAAAE,KAAAK,GACAP,GAAAiD,KAAAqM,GAAAC,YAAAtM,KAAAqM,GAAAC,WAAArP,IAKA+C,KAAA+L,0BAAA9O,EAAAK,EAAAL,IAAA,GAGA+C,KAAA6M,wBAYA7L,QAKAhB,KAAAwR,mBAGAxR,KAAAqV,oBACArV,KAAA2W,gBAIA3W,KAAAmR,eACAnR,KAAAwR,mBAiBAxQ,mBAAA1D,EAAAP,EAAAE,GAMA,IAAAD,EAAAgD,KAAAyV,eACAzV,KAAAyV,gBAAA,EAxwCA,SAAAnY,EAAAP,EAAAE,EAAAD,GACA,IAAAG,EAAAG,EAAA+O,GAAAsI,SACA,GAAAxX,EAAA,IACA,IAAAkB,EAAAtB,EACAuL,EAAAhL,EAAAH,EAAAkB,EAAApB,EAAAD,IACAW,OAAA8S,OAAAxT,EAAAK,EAAA8T,WACAzT,OAAA8S,OAAA1T,EAAAO,EAAA6T,eACA9S,EAAAf,EAAA6T,cACA7T,EAAA6T,cAAA,KAkwCAyF,CAAA5W,KAAAjD,EAAAE,EAAAD,GAGA,IAAAG,EAAA6C,KAAAuV,eACAvV,KAAAuV,eAAA,KAEAvV,KAAA6W,0BAAA9Z,EAAAE,EAAAD,GAEAgD,KAAA2W,gBAEArO,EAAAtI,UAAAqM,GAAAuI,SAAA7X,EAAAE,EAAAD,GAEAsL,EAAAtI,UAAAqM,GAAA0I,SAAAhY,EAAAE,EAAAD,GAEAG,GA/7CA,SAAAG,EAAAP,EAAAE,EAAAD,EAAAG,GAAA,IAGAkB,EAeAG,EAhBAC,EAAAnB,EAAA+O,GAAAwI,QAEAzX,EAAAmL,KAEA,QAAA/J,KAAAzB,EACAA,EAAAyB,KACAC,GAAA+J,EAAAlL,EAAAmB,EAAArB,EAAAoB,EAAAvB,EAAAD,EAAAG,GACAkB,GAAA,EACOlB,GAAAiM,EAAA9L,EAAAkB,EAAAvB,KACPoB,GAAA,IAQAA,IAAAG,EAAAlB,EAAAoY,aAAAlX,EAAAqO,uBACArO,EAAAqO,wBA46CAiK,CAAA9W,KAAA7C,EAAAJ,EAAAE,EAAAD,GAGA,GAAAgD,KAAAoV,gBACApV,KAAA2V,eAiBA3U,0BAAA1D,EAAAP,EAAAE,GACA+C,KAAAqM,GAAAyI,YACAxM,EAAAtI,UAAAqM,GAAAyI,WAAAxX,EAAAP,EAAAE,GAFA,IAIA,IAAAD,EAAAgD,KAAAmW,eACAnZ,GACAsL,EAAAtI,KAAAhD,EAAA+Z,gBAAAzZ,EAAAP,EACAE,EAAAD,EAAAwX,UACAxX,IAAAga,iBAaAhW,UAAA1D,EAAAP,GACAO,EAAAyC,EAAAzC,GACAP,EAAAgD,EAAAhD,GACAiD,KAAAwV,kBAAAxV,KAAAwV,sBACAxV,KAAAwV,kBAAAlY,GAAAP,EAaAiE,YAAA1D,GACAA,EAAAyC,EAAAzC,GACA0C,KAAAwV,0BACAxV,KAAAwV,kBAAAlY,GAkCA0D,cAAA1D,EAAAP,GAAA,IACAE,GAAkB6J,KAAA,IAElB6G,EAAA3N,KADmC4C,EAAA5C,KAAA1C,EAAAL,GACnCA,EAAA6J,KAAA/J,GAsBAiE,IAAA1D,EAAAP,GACA,OAAA6F,EAAA7F,GAAAiD,KAAA1C,GAwBA0D,IAAA1D,EAAAP,EAAAE,GACAA,EACA4F,EAAA5F,EAAAK,EAAAP,KAEAiD,KAAAqM,GAAAC,aAAAtM,KAAAqM,GAAAC,WAA+EhP,KAC/E0C,KAAA+L,0BAAAzO,EAAAP,GAAA,IACAiD,KAAA6M,wBAoBA7L,KAAA1D,KAAAP,GAAA,IACAE,GAAkB6J,KAAA,IAClB9J,EAAmC4F,EAAA5C,KAAA1C,EAAAL,GACnCE,EAAAH,EAAAkD,OACA7B,EAAArB,EAAAmF,QAAApF,GAIA,OAHAA,EAAAmD,QACA4N,EAAA9N,KAAAhD,EAAAC,EAAA6J,KAAA3J,EAAAJ,EAAAmD,WAEA7B,EAgBA2C,IAAA1D,GAAA,IACAP,GAAkB+J,KAAA,IAClB7J,EAAmC2F,EAAA5C,KAAA1C,EAAAP,GACnCC,IAAAC,EAAAiD,OACA/C,EAAAF,EAAAga,MAIA,OAHAja,GACA8Q,EAAA9N,KAAA/C,EAAAF,EAAA+J,KAAA7J,EAAAiD,OAAA,GAAA/C,IAEAA,EAoBA6D,OAAA1D,EAAAP,EAAAE,KAAAD,GAAA,IAiBAyB,EAhBAtB,GAAkB2J,KAAA,IAClBzI,EAAmCuE,EAAA5C,KAAA1C,EAAAH,GAkCnC,OAhCA,EAAAJ,EACAA,EAAAsB,EAAA6B,OAAAgX,GAAAna,GACOA,IACPA,EAAAma,EAAAna,IAaA0B,EADA,IAAAwB,UAAAC,OACA7B,EAAA4R,OAAAlT,GAQAsB,EAAA4R,OAAAlT,EAAAE,KAAAD,IAKAA,EAAAkD,QAAAzB,EAAAyB,SACA4N,EAAA9N,KAAA3B,EAAAlB,EAAA2J,KAAA/J,EAAAC,EAAAkD,OAAAzB,GAEAA,EAgBAuC,MAAA1D,GAAA,IACAP,GAAkB+J,KAAA,IAClB7J,EAAmC2F,EAAA5C,KAAA1C,EAAAP,GACnCC,IAAAC,EAAAiD,OACA/C,EAAAF,EAAAka,QAIA,OAHAna,GACA8Q,EAAA9N,KAAA/C,EAAAF,EAAA+J,KAAA,KAAA3J,IAEAA,EAiBA6D,QAAA1D,KAAAP,GAAA,IACAE,GAAkB6J,KAAA,IAClB9J,EAAmC4F,EAAA5C,KAAA1C,EAAAL,GACnCE,EAAAH,EAAAoa,WAAAra,GAIA,OAHAA,EAAAmD,QACA4N,EAAA9N,KAAAhD,EAAAC,EAAA6J,KAAA,EAAA/J,EAAAmD,WAEA/C,EAgBA6D,WAAA1D,EAAAP,GAEA,IAAAE,EACA,MAAAgD,UAAAC,OAAA,CAEA,IAAAlD,GAAoB8J,KAAA,IACpB/J,EAAA6F,EAAA5C,KAAA1C,EAAAN,GACAC,EAAAD,EAAA8J,UAGA7J,EAFO0J,MAAAC,QAAAtJ,GAEPyC,EAAAzC,GAEoCA,EAEpC0C,KAAA+L,0BAAA9O,EAAAF,GAAA,OACAiD,KAAA6M,wBAeA7L,wBAAA1D,EAAAP,GACAiD,KAAAkN,mBAAA5P,EAAA+O,GAAAC,WACAvP,IACAiD,KAAA,OAj+BA,SAAA1C,GACA,OAAAA,EAAA,GAAA2J,cAAA3J,EAAA6H,UAAA;;;;;;;;;EAg+BAkS,CAAA/Z,IAAoE,SAAAP,GACpEiD,KAAA8Q,aAAAxT,EAAAP,KAiBAiE,wBAAA1D,EAAAP,EAAAE,GACA,IAAAD,GAAkBiM,SAAA3L,EAAA0L,OAAAjM,EAAAoM,YAAAlM,GAClB+C,KAAAkN,mBAAA5P,EAAA+O,GAAA0I,SACAnM,GAAAG,EAAAN,KAAAzL,EAAA2L,SAA+CxF,KAAA7F,KAE/CL,GACA+C,KAAAkN,mBAAkDnQ,EAAAsP,GAAA0I,SAClDnM,GAAAG,EAAAN,KAAAzL,EAAA2L,SAAiDxF,KAAApG,KAgBjDiE,sBAAA1D,EAAAP,GACA,IAAAE,EAAAqQ,EAAAhQ,GACA,IAAAL,EACA,UAAA4D,MAAA,kCAAAvD,EAAA,KAEAwP,EAAA9M,KAAA/C,EAAAoP,GAAA0I,QAAAhL,EAAA,KAAAhN,GAYAiE,yBAAA1D,GACA0C,KAAAkN,mBAAA5P,EAAA+O,GAAAwI,QACAjM,GAAAc,EACAjB,MACAkB,UAAAmB,GAAAC,gBAAAzN,GAAA,WACA2L,SAAA3L,KAcA0D,yBAAA1D,GACA,IAAAP,EAAAiD,KAAAsD,YAAAsN,yBAAAtT,GACA,MAAAP,EAAA,GACA2I,QAAAC,KAAA,YAAArI,EAAA,qCACAP,EAAA,+GAEAiD,KAAAkN,mBAAA5P,EAAA+O,GAAAuI,SACAhM,GAAArJ,EACAkJ,MACAoB,SAAA9M,KAkBAiE,wBAAA1D,EAAAP,EAAAE,GACA,IAAAD,EAAAsQ,EAAAvQ,GACA,IAAAC,EACA,UAAA6D,MAAA,kCAAA9D,EAAA,KAEA+P,EAAA9M,KAAAhD,EAAAqP,GAAAsI,QAAArU,EAAAhD,EAAAL,GAyCA+D,yBAAA1D,EAAAP,EAAAE,GACA+C,KAAA1B,UAAA4O,mBAAA5P,EAAAP,EAAAE,GAaA+D,8BAAA1D,EAAAP,EAAAE,GACA+C,KAAA1B,UAAAgZ,wBAAAha,EAAAP,EAAAE,GAgBA+D,4BAAA1D,EAAAP,GACAiD,KAAA1B,UAAAiZ,sBAAAja,EAAAP,GAWAiE,+BAAA1D,GACA0C,KAAA1B,UAAAkZ,yBAAAla,GAmBA0D,8BAAA1D,EAAAP,GACAiD,KAAA1B,UAAAmZ,wBAAAna,EAAAP,GAWAiE,+BAAA1D,GACA0C,KAAA1B,UAAAoZ,yBAAApa,GAiBA0D,8BAAA1D,EAAAP,EAAAE,GACA+C,KAAA1B,UAAAqZ,wBAAAra,EAAAP,EAAAE,GAeA+D,oBAAA1D,GACA,OAAA0C,KAAA1B,UAAAsZ,cAAAta,GA2BA0D,cAAA1D,EAAAP,GAAA,IACAE,EAAA+C,KAAAsD,YAAA2Q,eAAA3W,GACAN,EAAAgD,KAAAmW,gBAAAlZ,EAGA,IAAAD,EACA,QAAAM,KAAAL,EAAA8Z,gBACA/W,KAAAuQ,wBAAAjT,GAGA,GAAAP,KAGAE,EAAgDU,OAAAQ,OAAAlB,IAChD4a,YAAA7a,GACAA,GAAAgD,KAAAmW,gBAAA,CACA,IAAA7Y,EAAA0C,KAAA8X,oBAAA9X,KAAAmW,eAGA,OAFAnW,KAAA8X,mBAAAxa,EAAA0Z,iBAAA/Z,EACAA,EAAA8a,qBAAAza,EACAL,EAGA,OAAA+C,KAAAmW,eAAAlZ,EAgBA+D,kCAAA1D,EAAAP,EAAAE,IACAK,EAAA0a,UAAA1a,EAAA0a,eACAjb,IAAA,EAFA,IAGAI,EAAAG,EAAAyZ,gBAAAzZ,EAAAyZ,qBACA5Z,EAAAJ,GAAAI,EAAAJ,QACAoF,KAAAlF,GAuBA+D,eAAA1D,GAGA+Y,GAAA4B,aAAAjY,MACA,IAAAjD,EAAAgU,MAAAmH,eAAA5a,GACA+Y,GAAA8B,WAAAnY,MACA,IAAA/C,EAAkD+C,KAAA4X,cAAAta,GAAA,GAIlD,GAFAL,EAAAuX,SAAAzX,EAAAyX,UAEAvX,EAAA4a,YAAA,CACA,IAAAva,EAAAL,EAAAmb,cACA,QAAAnb,EAAAF,EAAA4K,WAAkC1K,EAAGA,IAAA2K,YACrCtK,EAAA6E,KAAAlF,GAWA,OARAF,EAAAqL,aAAAnL,EA9tDA,SAAAK,EAAAP,GAEA,IAAOyX,SAAAvX,EAAAgO,aAAAjO,GAAuBD,EAC9B,GAAAC,EAAAkD,OACA,QAAAnD,EAAA,EAAiBA,EAAAC,EAAAkD,OAAyBnD,IAAA,KAC1CI,EAAAH,EAAAD,GACAsB,EAAApB,EAAAF,GACA0B,EAAAtB,EAAAiN,SACA,GAAA3L,EACA,QACA1B,EADAE,EAAA,EAAqBA,EAAAwB,EAAAyB,OAAmBjD,IAExCyP,EAAArO,EADAtB,EAAA0B,EAAAxB,IAEA0P,EAAAtO,EAAAf,EAAAP,GAGAsB,EAAAqX,WAAApY,GAitDA+a,CAAArY,KAAA/C,GAEA+C,KAAAiR,aACA3I,EAAAtI,KAAA/C,EAAA8Z,gBAAA/W,KAAAkJ,OAAA,QACAjM,EAAAuX,UAEAzX,EAYAiE,gBAAA1D,GAEA,IAAAP,EAAAO,EAAA8K,aACArL,EAAAgb,uBACAhb,EAAAgb,qBAAAf,iBACAja,EAAAia,kBAEAja,EAAAia,mBACAja,EAAAia,iBAAAe,qBACAhb,EAAAgb,sBAEA/X,KAAA8X,oBAAA/a,IACAiD,KAAA8X,mBAAA/a,EAAAgb,sBAEAhb,EAAAgb,qBAAAhb,EAAAia,iBAAA,KAEA,IAAA/Z,EAAAF,EAAAqb,WACA,QACArb,EADAC,EAAA,EAAmBA,EAAAC,EAAAiD,OAAgBlD,KACnCD,EAAAE,EAAAD,IACAuK,WAAAwM,YAAAhX,GAqBAiE,0BAAA1D,EAAAP,EAAAE,GACA,IAAAD,EAAA+T,MAAAuC,mBAAAhW,EAAAP,EAAAE,GACA,GAAAK,EAAAsW,WAAAC,KAAAC,UAAA,CACA,IAAA3W,EAAA6C,KAAAsY,eAAAhb,EAAAiI,YAAAxI,GACAI,IAIAG,EAAAiI,YAAA8H,EAAAlQ,IAAA,IACAgN,EAAAnK,KAAAjD,EAAAE,EAAA,qBAAAE,GACAH,GAAA,GAGA,OAAAA,EAsBAgE,mCAAA1D,EAAAP,EAAAE,EAAAD,EAAAG,GACA,IAAAkB,EAAA2B,KAAAsY,eAAAnb,EAAAJ,GACA,GAAAsB,EAAA,KAEAlB,EAAAH,EACAyB,EAAA,WAIAuW,GAAA7Q,KAAAnH,GACAyB,EAAA,YACS,KAAAzB,IAAAkD,OAAA,KACTlD,IAAA+G,MAAA,MACAtF,EAAA,aAGA,IAAArB,EAAAiQ,EAAAhP,GAqBA,OApBAjB,GAAA,aAAAqB,GACAnB,EAAAmJ,aAAAzJ,EAAAI,GAMA,UAAAE,EAAA4O,WAAA,UAAA/O,GACAG,EAAAmJ,aAAAtJ,EAAA,IAGAG,EAAA+J,gBAAAlK,GAKA,YAAAsB,IACAzB,EAAA0F,EAAA1F,IAEAmN,EAAAnK,KAAAjD,EAAAE,EAAAwB,EAAAzB,EAAAqB,EAAAjB,IACA,EAEA,OAAA2T,MAAAqD,4BAAA9W,EAAAP,EAAAE,EAAAD,EAAAG,GAkBA6D,oCAAA1D,EAAAP,EAAAE,GAAA,IACAD,EAAA+T,MAAAyC,6BAAAlW,EAAAP,EAAAE,GAEAE,EAAAF,EAAAmL,aAAA4P,UAEA,QAAAhb,KAAAG,EAEAgN,EAAAnK,KAAAjD,EAAAE,EAAA,oBAAAD,IADsBoF,KAAA,IAAAyJ,OAAA7O,EAAAoO,cAAApO,MAGtB,OAAAA,EA+CAgE,sBAAA1D,EAAAP,GAAA,IAGAE,EAFAD,KACAG,EAAA,EAFA,KAUA,QAAAF,EAAAiY,GAAAqD,KAAAjb,KAAA,CAEAL,EAAAoO,MAAAlO,GACAH,EAAAmF,MAAsBqI,QAAAlN,EAAAyG,MAAA5G,EAAAF,EAAAoO,SAHtB,IAMAhN,EAAApB,EAAA,MACAwB,IAAAxB,EAAA,GACAG,EAAAH,EAAA,GAAAuI,OACAhH,GAAA,EAAAd,EAAA,GAAAL,GAAA,EACA,KAAAgB,GAAsB,GAAAhB,EAAAD,EAAAgJ,QAAA,SACtB1I,EAAAN,EAAA+H,UAAA9H,EAAA,GACAD,IAAA+H,UAAA,EAAA9H,GACAmB,GAAA,GAbA,IAeAY,EAAAkO,EAAAlQ,GACAiC,KACA,GAAAD,EAAA,CAEA,IAAe6N,KAAA3P,EAAA0P,WAAA/P,GAAiBmC,EAChC,QACArC,EADAE,EAAA,EAAuBA,EAAAK,EAAA4C,OAAejD,KACtCF,EAAAO,EAAAL,IACAuN,SACAnL,EAAA8C,KAAApF,GAGA,IAAAC,EAAAD,EAAAyb,YACAxb,KAAAC,IAAAmC,EAAA2N,UACA1N,EAAA8C,KAAAlF,GACAmC,EAAA+J,WAAA,QAIA9J,EAAA8C,KAAA/E,GAEAJ,EAAAmF,MACA0J,OAAAzO,EAAAgF,KAAA/D,EAAAuM,OAAAnM,EAAAga,YAAAja,EAAAka,UAAAtZ,EAAAgM,aAAA/L,EACAsL,MAAAjN,IAEAP,EAAA+X,GAAAyD,UAGA,GAAAxb,KAAAG,EAAA4C,OAAA,CACA,IAAAnD,EAAAO,EAAA6H,UAAAhI,GACAJ,GACAC,EAAAmF,MACAqI,QAAAzN,IAxDA,OA4DAC,EAAAkD,OACAlD,EAEA,KAkBAgE,wBAAA1D,EAAAP,EAAAE,EAAAD,EAAAG,EAAAkB,GACA,IAAAI,EAeA,OAbAA,EADA1B,EAAA2b,UACA3O,EAAAzM,EAAAL,EAAAD,EAAAG,EAAAJ,EAAA2b,WACOzb,GAAAF,EAAA8O,OAGPxN,GAAAb,EAAAP,GACA2F,EAAAtF,EAAAL,GAEAK,EAAA4L,OAAAjM,GALA2F,EAAAtF,EAAAP,EAAA8O,QAQA9O,EAAA6N,SACAnM,MAEAA,GAQA,OAFAwW,GAAAhY,EAEAA,IA0BA,IAAAoZ,IAEAuC,SAOA5X,aAAA1D,GACA,GAAA0C,KAAA4Y,MAAA1Y,OAAA,CACAF,KAAA4Y,MAAA5Y,KAAA4Y,MAAA1Y,OAAA,GACA8L,eAAA1O,KASA0D,aAAA1D,GACA0C,KAAA4Y,MAAAzW,KAAA7E,IAQA0D,WAAA1D,GACA,IAAAP,EAAAiD,KAAA4Y,MAAA1Y,OACAnD,GAAAiD,KAAA4Y,MAAA7b,EAAA,IAAAO,GACA0C,KAAA4Y,MAAA3B,cMtsFA4B,GAAAlK,GAAArR,IAgBA,SAAAP,EAAAO,GACA,MAAAP,EAAAY,OAAAsG,eAAA3G,GAMA,OAAAP,EAAAuB,qBAAAnB,EAC2CJ,EAAA,KAW3C,SAAAE,EAAAK,GACA,IAAAA,EAAAiB,eAAAI,0BAAA,kBAAArB,IAAA,CACA,IAAAP,EAAA,KAEAO,EAAAiB,eAAAI,0BAAA,aAAArB,OAAAwb,aACA/b,EAlEA,SAAAO,GACA,MAAAP,KACA,QAAAE,KAAAK,EAAA,CACA,MAAAN,EAAAM,EAAAL,GACAF,EAAAE,GAAA,mBAAAD,GAA6CkR,KAAAlR,GAAQA,EAErD,OAAAD,EA4DAgc,CAAAzb,EAAAwb,aAGAxb,EAAA0b,gBAAAjc,EAEA,OAAAO,EAAA0b,gBAtCA,MAAAhc,EAAAsT,GAAAhT,SAgDAH,UAAAH,EAOAkS,gCACA,MAAA5R,EAAA0C,KAAAiZ,YACA,OAAA3b,EAAAK,OAAAsE,KAAA3E,GAAAmQ,IAAAnQ,GAAA0C,KAAA4Q,yBAAAtT,OAUA0D,kBACA,IAAAhB,KAAAzB,eAAAI,0BAAA,cAAAqB,OAAA,CACA,MAAA1C,EAAAP,EAAoFiD,MACpF1C,GACAA,EAAA4b,WAEAlZ,KAAAmZ,aAAA,EACAnZ,KAAAoZ,kBAWApY,wBACA,MAAA1D,EAAAL,EAAuE+C,MACvE1C,GACA0C,KAAAqZ,iBAAA/b,GAYA2b,yBACA,IAAAjZ,KAAAzB,eACAI,0BAAA,eAAAqB,OAAA,CACA,MAAA1C,EAAAP,EAAoFiD,MACpFA,KAAAsZ,aAAA3b,OAAA8S,UACAnT,KAAA2b,YACAhc,EAA6D+C,OAE7D,OAAAA,KAAAsZ,aAWAtY,uBAAA1D,GACA,MAAAP,EAAAiD,KAAAiZ,YAAA3b,GACA,OAAAP,KAAAmR,KASAlN,wBACAhB,KAAAsD,YAAA4V,WACAnI,MAAAQ,wBAUAvQ,oBACA+P,MAAAwI,mBACAxI,MAAAwI,oBAEAvZ,KAAA0W,oBAQA1V,uBACA+P,MAAAyI,sBACAzI,MAAAyI,wBAMA,OAAArc,IClIAsc,GAAA9K,GAAArR,IAgHA,SAAAmB,EAAAnB,EAAAP,EAAAE,EAAAD,GAEAC,EAAAyc,WACAzc,EAAA0c,UAAA,GAOA1c,EAAAyc,WAAApc,EAAAsc,mBAAA7c,IACAO,EAAAqa,wBAAA5a,EAAAE,EAAAyc,SAAA1c,GAEAC,EAAA0c,WAAArc,EAAAsc,mBAAA7c,IACAO,EAAAma,wBAAA1a,GAAAE,EAAAyc,UAEAzc,EAAA4c,qBAAAvc,EAAAwc,kBAAA/c,IACAO,EAAAoa,yBAAA3a,GAEAE,EAAA8c,SAAAzc,EAAA0c,iBAAAjd,IACAO,EAAAka,yBAAAza,GAGAE,EAAAgd,UACA3c,EAAAga,wBAAAva,EAAAE,EAAAgd,SAAAjd,EAAAC,EAAAgd,WAGA3c,EAAAkT,2BAAAzT,GAnIA,MAAAyB,EAAAqa,GAAA1D,GAAA7X,IA8jBA,qBAxYAkB,EAUAwC,wBACA+P,MAAAqI,iBACApZ,KAAAzB,eACAI,0BAAA,KAAAqB,aAAAka,IAoaA,SAAA5c,GACA6c,GAAAhY,KAAA7E,GApaA8c,CAAApa,KAAA1B,WAEA,MAAAhB,EAnKA,SAAAA,GAOA,OANAA,EAAAiB,eACAI,0BAAA,iBAAArB,MACAA,EAAA+c,eACA/c,EAAAiB,eAAAI,0BAAA,YAAArB,IAC6CA,EAAAgd,UAAA,MAE7Chd,EAAA+c,eA4JApd,CAAA+C,MACA1C,GACA0C,KAAAua,gBAAAjd,EAAA0C,KAAAiZ,aAGA,IAAAlc,EAA0DiD,KAAAwa,SAC1Dzd,IACA,iBAAAA,GACA2I,QAAA+U,MAAA,mDACA1d,EAAA,MAEAA,IAAA2d,WAAA,IAIA1a,KAAA1B,UAAAqc,UAAA5d,EAUAiE,wBAAA1D,GACA,QAAAP,KAAAO,EACAmB,EAAAuB,KAAA1B,UAAAvB,EAAAO,EAAAP,GAAAO,GAeA0D,uBAAA1D,EAAAP,GACA,MAAAE,EAAA+C,KAAA1B,UACA,QAAAtB,EAAA,EAAmBA,EAAAM,EAAA4C,OAAsBlD,IACzCC,EAAAsa,sBAAAja,EAAAN,GAAAD,GAyCAyd,sBASA,OARAxa,KAAAzB,eAAAI,0BAAA,YAAAqB,SACAA,KAAA2a,UAAA3L,OAAA1J,OAC+CtF,KAAAka,GAAA,aAI/Cvc,OAAAsG,eAAqEjE,KAAA1B,WAAAgF,YAAAkX,UAErExa,KAAA2a,UAsBAC,wBACA,IAAA5a,KAAAzB,eAAAI,0BAAA,cAAAqB,OAAA,CACA,MAAA1C,EAAA0C,KAAA6a,WACA,GAAAvd,EACA0C,KAAA8a,YAAAzc,EAAAf,EAAAyd,SACS,CACT,MAAAzd,EAAA0R,OAAA1J,OAA4FtF,KAAAka,IAC5Fla,KAAA8a,YAAAxd,KAAAwI,WACAnI,OAAAsG,eAAuEjE,KAAA1B,WAAAgF,YAAAsX,YAGvE,OAAA5a,KAAA8a,YAGA9Z,cACA+P,QAEA/Q,KAAA2a,UAEA3a,KAAA8a,YAEA9a,KAAAgb,SAEAhb,KAAA4a,WAEA5a,KAAAib,KAEAjb,KAAAmK,EAeAnJ,wBACAka,EACAlb,KAAAsD,YAAA4V,WAGAlZ,KAAAsD,YAAA6X,kBAAiEnb,KAAAkM,WACjE6E,MAAAQ,wBAEAvR,KAAAgb,SAAAzM,GACAvO,KAAA4a,WAAA5a,KAAAsD,YAAAsX,WAEA,IAAAtd,EAnWA,SAAAA,GACA,IAAAA,EAAAiB,eACAI,0BAAA,qBAAArB,IAAA,CACAA,EAAA8d,mBAAA,KACA,IAAAre,EAAAO,EAAA2b,YACA,QAAAhc,KAAAF,EAAA,CACA,IAAAC,EAAAD,EAAAE,GACA,UAAAD,IACAM,EAAA8d,mBAAA9d,EAAA8d,uBACA9d,EAAA8d,mBAAAne,GAAAD,IAIA,OAAAM,EAAA8d,mBAsVAre,CAAAiD,KAAAsD,aACA,GAAAhG,EAGA,QAAAP,KAAAO,EAAA,CACA,IAAAL,EAAAK,EAAAP,GAIA,IAAAiD,KAAAzB,eAAAxB,GAAA,CACA,IAAAO,EAAA,mBAAAL,EAAAgB,MACAhB,EAAAgB,MAAAV,KAAAyC,MACA/C,EAAAgB,MAGA+B,KAAAqb,aAAAte,GACAiD,KAAAkK,oBAAAnN,EAAAO,GAAA,GAEA0C,KAAAjD,GAAAO,IAcA0D,yBAAA1D,EAAAP,GACA,OAAAI,EAAAG,EAAAP,GAYAiE,yBAAA1D,GAEA,MAAAP,EAAAiD,KAAA1B,UAAAqc,UACA,GAAA5d,MAAAue,mBAAA,CACAve,EAAAue,oBAAA,EADA,MAEAre,EAAA+C,KAAA4a,YAlRA,SAAAtd,EAAAP,EAAAE,EAAAD,GAAA,MACAG,EAAAJ,EAAAgJ,QAAAC,iBAAA,SACA3H,EAAAe,EAAArC,GAEAK,EAAAiC,EAAApC,GACAuB,EAAAzB,EAAAgJ,QAAAwV,kBACA,QACApe,EADAkB,EAAA,EAAqBA,EAAAjB,EAAA8C,OAA2B7B,KAChDlB,EAAAC,EAAAiB,IACAkH,YAAAjI,EAAAke,kBAAAre,EAAAoI,YAAAvI,GACAD,EAAAgJ,QAAA0V,aAAAte,EAAAqB,GAGA,IAAAd,EAAA,EAEA,QAAAc,EAAA,EAAmBA,EAAAH,EAAA6B,OAA8B1B,IAAA,KACjDzB,EAAAsB,EAAAG,GACAvB,EAAAE,EAAAO,GAGAT,IAAAF,EAIAW,KAHAX,IAAA2d,WAAA,GACAzd,EAAAsK,WAAAkU,aAAA1e,EAAAE,IAIAF,EAAAwI,YAAAjI,EAAAke,kBAAAze,EAAAwI,YAAAvI,GAEA0B,OAAA0P,UACA1P,OAAA0P,SAAAsN,gBAAA3e,EAAAE,IAyPAG,CAAA4C,KAAAjD,EAAAO,EAFAL,EAAAD,EAAAC,GAAA,IAGA+C,KAAA1B,UAAAsZ,cAAA7a,IAeAiE,oBACAtC,OAAA0P,UAAApO,KAAA2a,WACAjc,OAAA0P,SAAAuN,aAA6D3b,MAE7D+Q,MAAAwI,oBASAvY,QACAhB,KAAA2a,YACA3a,KAAAib,KAAAjb,KAAAkY,eAAAlY,KAAA2a,WACA3a,KAAAmK,EAAAnK,KAAAib,KAAA9Q,GAEA4G,MAAAY,QAaA3Q,gBACAhB,KAAA2a,YACA3a,KAAAib,KAAAjb,KAAA4b,WAA+D5b,KAAAib,OAM/DlK,MAAA0F,gBAeAzV,WAAA1D,GACA,GAAA0C,KAAA6b,aAAA,OACAve,GACA0C,KAAA8b,YACA9b,KAAA6b,cAA+BzZ,KAAA,SAE/BpC,KAAA8b,WAAAta,YAAAlE,GACA0C,KAAA8b,YAEA,KAEA,UAAAjb,MAAA,6IA4BAG,aAAA1D,GACAoB,OAAA0P,UACA1P,OAAA0P,SAAA2N,aAA6D/b,KAAA1C,GAmB7D0D,WAAA1D,EAAAP,GAIA,OAHAA,GAAAiD,KAAA4a,aACA7d,EAAAC,EAAAgD,KAAA4a,aAEA5d,EAAAM,EAAAP,GAYAiE,6BAAA1D,EAAAP,EAAAE,GAEA,OADAF,EAAAyb,WAAAzb,EAAAyb,YAAAxY,KAAAiZ,YACAlI,MAAAqC,sBAAA9V,EAAAP,EAAAE;;;;;;;;;QA6BAkd,iECtrBAld,EAAAS,EAAAX,EAAA,yBAAAif,GAAAC;;;;;;;;;;AA4BA,MAAAC,GAAAzC,GAAAxK,8BC5BA,IAAAjS,EAAAC,EAAA,GAEAD,IAAAwC,EAAA,UAA8BrB,OAAAlB,EAAA,uBCF9BA,EAAA,IACA,IAAAD,EAAAC,EAAA,GAAAU,OACAL,EAAAJ,QAAA,SAAAI,EAAAP,GACA,OAAAC,EAAAmB,OAAAb,EAAAP,qBCHAO,EAAAJ,SAAkBmG,QAAApG,EAAA,IAAAiB,YAAA,wBCElBlB,EAAAC,EAAA,GACAE,EAAAF,EAAA,IACAoB,EAAA,SAAAf,EAAAP,GAEA,GADAI,EAAAG,IACAN,EAAAD,IAAA,OAAAA,EAAA,MAAAoC,UAAApC,EAAA,8BAEAO,EAAAJ,SACA2R,IAAAlR,OAAAwe,iBAAA,gBACA,SAAA7e,EAAAP,EAAAC,GACA,KACAA,EAAAC,EAAA,GAAAA,CAAA+B,SAAAzB,KAAAN,EAAA,IAAAiC,EAAAvB,OAAAW,UAAA,aAAAuQ,IAAA,IACAvR,MACAP,IAAAO,aAAAqJ,OACO,MAAA1J,GAAYF,GAAA,EACnB,gBAAAO,EAAAL,GAIA,OAHAoB,EAAAf,EAAAL,GACAF,EAAAO,EAAA8e,UAAAnf,EACAD,EAAAM,EAAAL,GACAK,GAVA,aADA,GAcA+e,MAAAhe,oBCtBA,IAAArB,EAAAC,EAAA,GACAD,IAAAwC,EAAA,UAA8B2c,eAAAlf,EAAA,IAAA4R,uBCF9B5R,EAAA,IACAK,EAAAJ,QAAAD,EAAA,GAAAU,OAAAwe,gCCDA7e,EAAAJ,SAAkBmG,QAAApG,EAAA,IAAAiB,YAAA,iCCgBlB,SAAAlB,EAAAM,GAAsC,OAAAA,KAAAY,WAAAZ,GAAuC+F,QAAA/F,GAd7EP,EAAAmB,YAAA,MAIAG,EAAArB,EAFAC,EAAA,KAMAG,EAAAJ,EAFAC,EAAA,KAMAS,EAAAV,EAFAC,EAAA,KAMAF,EAAAsG,QAAA,SAAA/F,EAAAP,GACA,sBAAAA,GAAA,OAAAA,EACA,UAAAoC,UAAA,qEAAApC,EAAA,eAAAW,EAAA2F,SAAAtG,KAGAO,EAAAgB,WAAA,EAAAlB,EAAAiG,SAAAtG,KAAAuB,WACAgF,aACArF,MAAAX,EACAO,YAAA,EACA4C,UAAA,EACAD,cAAA,KAGAzD,IAAAsB,EAAAgF,SAAA,EAAAhF,EAAAgF,SAAA/F,EAAAP,GAAAO,EAAA8e,UAAArf,qBC/BA,IAAAC,EAAAC,EAAA,GAEAD,IAAAwC,EAAAxC,EAAAsC,GAAArC,EAAA,aAAuEW,eAAAX,EAAA,GAAAiC,qBCFvEjC,EAAA,IACA,IAAAD,EAAAC,EAAA,GAAAU,OACAL,EAAAJ,QAAA,SAAAI,EAAAP,EAAAE,GACA,OAAAD,EAAAY,eAAAN,EAAAP,EAAAE,qBCHAK,EAAAJ,SAAkBmG,QAAApG,EAAA,IAAAiB,YAAA,iCCElBnB,EAAAmB,YAAA,MAIAf,EAEA,SAAAG,GAAsC,OAAAA,KAAAY,WAAAZ,GAAuC+F,QAAA/F,GAA7E,CAJAL,EAAA,KAMAF,EAAAsG,QAAA,WACA,SAAA/F,IAAAP,GACA,QACAE,EADAD,EAAA,EAAmBA,EAAAD,EAAAmD,OAAkBlD,KACrCC,EAAAF,EAAAC,IACAa,WAAAZ,EAAAY,aAAA,EACAZ,EAAAuD,cAAA,EACA,UAAAvD,MAAAwD,UAAA,IACA,EAAAtD,EAAAkG,SAAA/F,EAAAL,EAAAqf,IAAArf,GAIA,gBAAAF,EAAAE,EAAAD,GAGA,OAFAC,GAAAK,EAAAP,EAAAuB,UAAArB,GACAD,GAAAM,EAAAP,EAAAC,GACAD,GAdA,oBCVAE,EAAA,GAAAA,CAAA,+BAAAA,EAAA,GAAAA,CAAA,mDCCAD,EAAAC,EAAA,GACAE,EAAAF,EAAA,IAAAiC,EACAb,KAAiBuC,SAEjBnC,EAAA,iBAAAC,gBAAAf,OAAA4E,oBACA5E,OAAA4E,oBAAA7D,WAUApB,EAAAJ,QAAAgC,EAAA,SAAA5B,GACA,OAAAmB,GAAA,mBAAAJ,EAAAd,KAAAD,GATA,SAAAA,GACA,IACA,OAAAH,EAAAG,GACG,MAAAP,GACH,OAAA0B,EAAAsF,SAKA3G,CAAAE,GAAAH,EAAAH,EAAAM,sBChBA,IAAAN,EAAAC,EAAA,IACAK,EAAAJ,QAAAyJ,MAAAC,SAAA,SAAAtJ,GACA,eAAAN,EAAAM,yBCFAN,EAAAC,EAAA,IACAE,EAAAF,EAAA,IACAoB,EAAApB,EAAA,IACAK,EAAAJ,QAAA,SAAAI,GAAA,IACAP,EAAAC,EAAAM,GACAL,EAAAE,EAAA+B,EACA,GAAAjC,EAAA,QAIAwB,EAHAD,EAAAvB,EAAAK,GACAI,EAAAW,EAAAa,EACA7B,EAAA,EAEAmB,EAAA0B,OAAA7C,GAAAK,EAAAH,KAAAD,EAAAmB,EAAAD,EAAAnB,OAAAN,EAAAoF,KAAA1D,GACG,OAAA1B,qCCXHC,EAAAC,EAAA,GACAE,EAAAF,EAAA,GACAoB,EAAApB,EAAA,GACAwB,EAAAxB,EAAA,GACAG,EAAAH,EAAA,IACAuB,EAAAvB,EAAA,IAAAyG,IACAhG,EAAAT,EAAA,IACAI,EAAAJ,EAAA,IACAmC,EAAAnC,EAAA,IACAoC,EAAApC,EAAA,IACAQ,EAAAR,EAAA,GACAiC,EAAAjC,EAAA,IACAwC,EAAAxC,EAAA,IACAO,EAAAP,EAAA,IACA2C,EAAA3C,EAAA,IACA6C,EAAA7C,EAAA,IACAyC,EAAAzC,EAAA,GACA8C,EAAA9C,EAAA,GACAwF,EAAAxF,EAAA,IACA0F,EAAA1F,EAAA,IACA2F,EAAA3F,EAAA,IACA4F,EAAA5F,EAAA,IACAyF,EAAAzF,EAAA,IACA6F,EAAA7F,EAAA,GACAuC,EAAAvC,EAAA,IACA8F,EAAAL,EAAAxD,EACA8D,EAAAF,EAAA5D,EACA4I,EAAAjF,EAAA3D,EACAiJ,EAAAnL,EAAAe,OACA0F,EAAAzG,EAAA6V,KACAxS,EAAAoD,KAAAqP,UAEAxK,EAAA7K,EAAA,WACA+K,EAAA/K,EAAA,eACA6B,KAAe8B,qBACf2H,EAAA1L,EAAA,mBACA+L,EAAA/L,EAAA,WACAgM,EAAAhM,EAAA,cACAqM,EAAA/L,OAAAW,UACAqB,EAAA,mBAAAwI,EACA5I,EAAAvC,EAAAuf,QAEA3F,GAAArX,MAAAjB,YAAAiB,EAAAjB,UAAAke,UAGAlc,EAAAjC,GAAAX,EAAA,WACA,OAEG,GAFHkF,EAAAI,KAAsB,KACtBlF,IAAA,WAAsB,OAAAkF,EAAAhD,KAAA,KAAuB/B,MAAA,IAAWhB,MACrDA,IACF,SAAAK,EAAAP,EAAAE,GACD,IAAAD,EAAA+F,EAAA2G,EAAA3M,GACAC,UAAA0M,EAAA3M,GACAiG,EAAA1F,EAAAP,EAAAE,GACAD,GAAAM,IAAAoM,GAAA1G,EAAA0G,EAAA3M,EAAAC,IACCgG,EAEDnD,EAAA,SAAAvC,GACA,IAAAP,EAAAqM,EAAA9L,GAAAsF,EAAAuF,EAAA7J,WAEA,OADAvB,EAAA0f,GAAAnf,EACAP,GAGAoN,EAAAxK,GAAA,iBAAAwI,EAAAuU,SAAA,SAAApf,GACA,uBAAAA,GACC,SAAAA,GACD,OAAAA,aAAA6K,GAGAgD,EAAA,SAAA7N,EAAAP,EAAAE,GAAA,OACAK,IAAAoM,GAAAyB,EAAA9B,EAAAtM,EAAAE,GACA6C,EAAAxC,GACAP,EAAA0F,EAAA1F,GAAA,GACA+C,EAAA7C,GACAE,EAAAiM,EAAArM,IACAE,EAAAY,YAIAV,EAAAG,EAAAgL,IAAAhL,EAAAgL,GAAAvL,KAAAO,EAAAgL,GAAAvL,IAAA,GACAE,EAAA2F,EAAA3F,GAAsBY,WAAA8E,EAAA,WAJtBxF,EAAAG,EAAAgL,IAAAtF,EAAA1F,EAAAgL,EAAA3F,EAAA,OACArF,EAAAgL,GAAAvL,IAAA,GAIKuD,EAAAhD,EAAAP,EAAAE,IACF+F,EAAA1F,EAAAP,EAAAE,IAEH2O,EAAA,SAAAtO,EAAAP,GACA+C,EAAAxC,GADA,QAKAL,EAHAD,EAAAQ,EAAAT,EAAAgD,EAAAhD,IACAI,EAAA,EACAkB,EAAArB,EAAAkD,OAEA7B,EAAAlB,GAAAgO,EAAA7N,EAAAL,EAAAD,EAAAG,KAAAJ,EAAAE,IACA,OAAAK,GAKAkP,EAAA,SAAAlP,GACA,IAAAP,EAAAuC,EAAA/B,KAAAyC,KAAA1C,EAAAmF,EAAAnF,GAAA,IADA,OAEA0C,OAAA0J,IAAAvM,EAAAiM,EAAA9L,IAAAH,EAAAkM,EAAA/L,QACAP,IAAAI,EAAA6C,KAAA1C,KAAAH,EAAAiM,EAAA9L,IAAAH,EAAA6C,KAAAsI,IAAAtI,KAAAsI,GAAAhL,KAAAP,IAEAoP,EAAA,SAAA7O,EAAAP,GAGA,GAFAO,EAAAyC,EAAAzC,GACAP,EAAA0F,EAAA1F,GAAA,GACAO,IAAAoM,IAAAvM,EAAAiM,EAAArM,IAAAI,EAAAkM,EAAAtM,GAAA,CACA,IAAAE,EAAA8F,EAAAzF,EAAAP,GAEA,OADAE,GAAAE,EAAAiM,EAAArM,MAAAI,EAAAG,EAAAgL,IAAAhL,EAAAgL,GAAAvL,MAAAE,EAAAY,YAAA,GACAZ,IAEAyN,EAAA,SAAApN,GAAA,QAIAP,EAHAE,EAAA6K,EAAA/H,EAAAzC,IACAN,KACAqB,EAAA,EAEApB,EAAAiD,OAAA7B,GACAlB,EAAAiM,EAAArM,EAAAE,EAAAoB,OAAAtB,GAAAuL,GAAAvL,GAAAyB,GAAAxB,EAAAmF,KAAApF,GACG,OAAAC,GAEHqb,EAAA,SAAA/a,GAAA,QAKAP,EAJAE,EAAAK,IAAAoM,EACA1M,EAAA8K,EAAA7K,EAAAoM,EAAAtJ,EAAAzC,IACAe,KACAI,EAAA,EAEAzB,EAAAkD,OAAAzB,GACAtB,EAAAiM,EAAArM,EAAAC,EAAAyB,SAAAxB,GAAAE,EAAAuM,EAAA3M,KAAAsB,EAAA8D,KAAAiH,EAAArM,IACG,OAAAsB,GAIHsB,IAYAvC,GAXA+K,EAAA,WACA,GAAAnI,gBAAAmI,EAAA,MAAAhJ,UAAA,gCADA,IAEA7B,EAAA+B,EAAA,EAAAY,UAAAC,OAAAD,UAAA,WACAlD,EAAA,SAAAE,GACA+C,OAAA0J,GAAA3M,EAAAQ,KAAA8L,EAAApM,GACAE,EAAA6C,KAAAsI,IAAAnL,EAAA6C,KAAAsI,GAAAhL,KAAA0C,KAAAsI,GAAAhL,IAAA,GACAgD,EAAAN,KAAA1C,EAAAqF,EAAA,EAAA1F,KAGA,OADAoB,GAAAuY,GAAAtW,EAAAoJ,EAAApM,GAAgEkD,cAAA,EAAAqO,IAAA9R,IAChE8C,EAAAvC,KAEAgB,UAAA,sBACA,OAAA0B,KAAAyc,KAGA/Z,EAAAxD,EAAAiN,EACArJ,EAAA5D,EAAAiM,EACAlO,EAAA,IAAAiC,EAAA2D,EAAA3D,EAAAwL,EACAzN,EAAA,IAAAiC,EAAAsN,EACAvP,EAAA,IAAAiC,EAAAmZ,EAEAha,IAAApB,EAAA,KACAG,EAAAsM,EAAA,uBAAA8C,GAAA,GAGAtN,IAAA,SAAA5B,GACA,OAAAuC,EAAApC,EAAAH,MAIAmB,IAAAc,EAAAd,EAAAoB,EAAApB,EAAAa,GAAAK,GAA0D5B,OAAAoK,IAE1D,QAAAuE,GAAA,sIAGAC,GAAA,EAAoBD,EAAAxM,OAAAyM,IAAuBlP,EAAAiP,EAAAC,OAE3C,QAAAG,GAAAtN,EAAA/B,EAAA8C,OAAAwJ,GAAA,EAAoD+C,GAAA5M,OAAA6J,IAA6BtK,EAAAqN,GAAA/C,OAEjFtL,IAAAe,EAAAf,EAAAa,GAAAK,EAAA,UAEAgd,IAAA,SAAArf,GACA,OAAAH,EAAA4L,EAAAzL,GAAA,IACAyL,EAAAzL,GACAyL,EAAAzL,GAAA6K,EAAA7K,IAGAsf,OAAA,SAAAtf,GACA,IAAA6M,EAAA7M,GAAA,MAAA6B,UAAA7B,EAAA,qBACA,QAAAP,KAAAgM,EAAA,GAAAA,EAAAhM,KAAAO,EAAA,OAAAP,GAEA8f,UAAA,WAA0BjG,GAAA,GAC1BkG,UAAA,WAA0BlG,GAAA,KAG1BnY,IAAAe,EAAAf,EAAAa,GAAAK,EAAA,UAEAxB,OA/FA,SAAAb,EAAAP,GACA,gBAAAA,EAAA6F,EAAAtF,GAAAsO,EAAAhJ,EAAAtF,GAAAP,IAgGAa,eAAAuN,EAEAnH,iBAAA4H,EAEAtJ,yBAAA6J,EAEA5J,oBAAAmI,EAEAlI,sBAAA6V,IAIA5U,GAAAhF,IAAAe,EAAAf,EAAAa,IAAAK,GAAAjC,EAAA,WACA,IAAAJ,EAAA6K,IAIA,gBAAA9H,GAAA/C,KAA2D,MAA3D+C,GAAoDpD,EAAAK,KAAe,MAAA+C,EAAA1C,OAAAL,OAClE,QACDwV,UAAA,SAAAxV,GAAA,QAGAP,EAAAE,EAFAD,GAAAM,GACAH,EAAA,EAEA8C,UAAAC,OAAA/C,GAAAH,EAAAmF,KAAAlC,UAAA9C,MAEA,GADAF,EAAAF,EAAAC,EAAA,IACA0C,EAAA3C,SAAA,IAAAO,KAAA6M,EAAA7M,GAMA,OALAsC,EAAA7C,OAAA,SAAAO,EAAAP,GAEA,GADA,mBAAAE,IAAAF,EAAAE,EAAAM,KAAAyC,KAAA1C,EAAAP,KACAoN,EAAApN,GAAA,OAAAA,IAEAC,EAAA,GAAAD,EACAsD,EAAAF,MAAAsD,EAAAzG,MAKAmL,EAAA7J,UAAAkK,IAAAvL,EAAA,GAAAA,CAAAkL,EAAA7J,UAAAkK,EAAAL,EAAA7J,UAAA4D,SAEA9C,EAAA+I,EAAA,UAEA/I,EAAAN,KAAA,WAEAM,EAAApC,EAAA6V,KAAA,4BCzOA5V,EAAA,IACAA,EAAA,IACAA,EAAA,IACAA,EAAA,IACAK,EAAAJ,QAAAD,EAAA,GAAAc,wBCJAT,EAAAJ,SAAkBmG,QAAApG,EAAA,IAAAiB,YAAA,gBCAlBZ,EAAAJ,QAAA,SAAAI,EAAAP,GACA,OAAUkB,MAAAlB,EAAAggB,OAAAzf,iBCDVA,EAAAJ,QAAA,+CCCAF,EAAAC,EAAA,IACAE,EAAAF,EAAA,IACAoB,EAAApB,EAAA,IACAwB,EAAAxB,EAAA,GAMAK,EAAAJ,QAAAD,EAAA,GAAAA,CAAA0J,MAAA,iBAAArJ,EAAAP,GACAiD,KAAAgc,GAAAvd,EAAAnB,GACA0C,KAAAgd,GAAA,EACAhd,KAAAyc,GAAA1f,GAEC,eACDO,EAAA0C,KAAAgc,GACAjf,EAAAiD,KAAAyc,GACAxf,EAAA+C,KAAAgd,KAHC,OAID1f,GAAAL,GAAAK,EAAA4C,QACAF,KAAAgc,QAAA,EACA7e,EAAA,IAEAA,EAAA,UAAAJ,EAAAE,EACA,UAAAF,EAAAO,EAAAL,IACAA,EAAAK,EAAAL,MACC,UAGDoB,EAAA4e,UAAA5e,EAAAsI,MAEA3J,EAAA,QACAA,EAAA,UACAA,EAAA,4BCjCAC,EAAA,IAYA,QAXAD,EAAAC,EAAA,GACAE,EAAAF,EAAA,IACAoB,EAAApB,EAAA,IACAwB,EAAAxB,EAAA,EAAAA,CAAA,eAEAuB,EAAA,wbAIAiH,MAAA,KAEA/H,EAAA,EAAeA,EAAAc,EAAA0B,OAAyBxC,IAAA,KACxCL,EAAAmB,EAAAd,GACA0B,EAAApC,EAAAK,GACAgC,EAAAD,KAAAd,UACAe,MAAAZ,IAAAtB,EAAAkC,EAAAZ,EAAApB,GACAgB,EAAAhB,GAAAgB,EAAAsI,wBCjBA,IAAA3J,EAAAC,EAAA,GAAAgE,SACA3D,EAAAJ,QAAAF,KAAAkgB,kDCAAlgB,EAAAC,EAAA,IACAE,EAAAF,EAAA,IACAoB,EAAApB,EAAA,IACAwB,KAGAxB,EAAA,GAAAA,CAAAwB,EAAAxB,EAAA,EAAAA,CAAA,uBAAkF,OAAA+C,OAElF1C,EAAAJ,QAAA,SAAAI,EAAAP,EAAAE,GACAK,EAAAgB,UAAAtB,EAAAyB,GAAqDyE,KAAA/F,EAAA,EAAAF,KACrDoB,EAAAf,EAAAP,EAAA,mCCXAC,EAAAC,EAAA,IACAE,EAAAF,EAAA,IAGAK,EAAAJ,QAAA,SAAAI,GACA,gBAAAP,EAAAsB,GAAA,IAIAG,EAAAd,EAHA0B,EAAAjC,EAAAJ,GAAA,GACA0B,EAAAzB,EAAAqB,GACAjB,EAAAgC,EAAAc,OAHA,OAKA,EAAAzB,MAAArB,EAAAE,EAAA,UAEA,OADAkB,EAAAY,EAAA+d,WAAA1e,KACA,MAAAD,GAAAC,EAAA,IAAArB,GAAA,OAAAM,EAAA0B,EAAA+d,WAAA1e,EAAA,WAAAf,EACAJ,EAAA8B,EAAAiC,OAAA5C,GAAAD,EACAlB,EAAA8B,EAAA2E,MAAAtF,IAAA,GAAAf,EAAA,OAAAc,EAAA,iDCbA,IAAAxB,EAAAC,EAAA,GAAAA,EAAA,GAGAA,EAAA,GAAAA,CAAAmgB,OAAA,kBAAA9f,GACA0C,KAAAgc,GAAA1e,EAAA,GACA0C,KAAAgd,GAAA,GAEC,eAGD1f,EAFAP,EAAAiD,KAAAgc,GACA/e,EAAA+C,KAAAgd,GAFC,OAID/f,GAAAF,EAAAmD,QAAiCjC,WAAA,EAAA8e,MAAA,IACjCzf,EAAAN,EAAAD,EAAAE,GACA+C,KAAAgd,IAAA1f,EAAA4C,QACUjC,MAAAX,EAAAyf,MAAA,uBCfV9f,EAAA,IACAA,EAAA,IACAK,EAAAJ,QAAAD,EAAA,IAAAiC,EAAA,6BCFA5B,EAAAJ,SAAkBmG,QAAApG,EAAA,IAAAiB,YAAA,iCCElBnB,EAAAmB,YAAA,MAIAf,EAEA,SAAAG,GAAsC,OAAAA,KAAAY,WAAAZ,GAAuC+F,QAAA/F,GAA7E,CAJAL,EAAA,KAMAF,EAAAsG,QAAA,SAAA/F,EAAAP,GACA,IAAAO,EACA,UAAA+f,eAAA,6DAGA,OAAAtgB,GAAA,qBAAAA,EAAA,eAAAI,EAAAkG,SAAAtG,KAAA,mBAAAA,EAAAO,EAAAP,+BCbAA,EAAAmB,YAAA,EAEAnB,EAAAsG,QAAA,SAAA/F,EAAAP,GACA,KAAAO,aAAAP,GACA,UAAAoC,UAAA,2DCLAnC,EAAAC,EAAA,GACAE,EAAAF,EAAA,IAAA6G,SAEA7G,EAAA,GAAAA,CAAA,kBAAAK,GACA,gBAAAP,GACA,OAAAO,GAAAN,EAAAD,GAAAO,EAAAH,EAAAJ,0BCNAE,EAAA,IACAK,EAAAJ,QAAAD,EAAA,GAAAU,OAAA2f,wBCDAhgB,EAAAJ,SAAkBmG,QAAApG,EAAA,IAAAiB,YAAA,wBCAlBlB,EAAAC,EAAA,IACAE,EAAA2B,KAAAye,IACAlf,EAAAS,KAAA0e,IACAlgB,EAAAJ,QAAA,SAAAI,EAAAP,GAEA,UADAO,EAAAN,EAAAM,IACAH,EAAAG,EAAAP,EAAA,GAAAsB,EAAAf,EAAAP,yBCJAC,EAAAC,EAAA,IACAE,EAAA2B,KAAA0e,IACAlgB,EAAAJ,QAAA,SAAAI,GACA,SAAAA,EAAAH,EAAAH,EAAAM,GAAA,0CCFAN,EAAAC,EAAA,GACAE,EAAAF,EAAA,IACAoB,EAAApB,EAAA,IACAK,EAAAJ,QAAA,SAAAI,GACA,gBAAAP,EAAAE,EAAAwB,GAAA,IAIArB,EAHAoB,EAAAxB,EAAAD,GACAW,EAAAP,EAAAqB,EAAA0B,QACA7C,EAAAgB,EAAAI,EAAAf,GAIA,GAAAJ,GAAAL,MAAA,KAAAS,EAAAL,GAGA,IAFAD,EAAAoB,EAAAnB,OAEAD,EAAA,cAEK,KAAYM,EAAAL,EAAeA,IAAA,IAAAC,GAAAD,KAAAmB,IAChCA,EAAAnB,KAAAJ,EAAA,OAAAK,GAAAD,GAAA,EACK,OAAAC,IAAA,qBCnBL,IAAAN,EAAAC,EAAA,IAEAK,EAAAJ,QAAAS,OAAA,KAAAyD,qBAAA,GAAAzD,OAAA,SAAAL,GACA,gBAAAN,EAAAM,KAAAmI,MAAA,IAAA9H,OAAAL,qBCJA,IAAAN,EAAAC,EAAA,GAEAD,IAAAwC,EAAAxC,EAAAsC,GAAArC,EAAA,aAAuE+G,iBAAA/G,EAAA,uBCFvEA,EAAA,IACA,IAAAD,EAAAC,EAAA,GAAAU,OACAL,EAAAJ,QAAA,SAAAI,EAAAP,GACA,OAAAC,EAAAgH,iBAAA1G,EAAAP,qBCHAO,EAAAJ,SAAkBmG,QAAApG,EAAA,IAAAiB,YAAA,iCCYlB,SAAAlB,EAAAM,GAAsC,OAAAA,KAAAY,WAAAZ,GAAuC+F,QAAA/F,GAV7EP,EAAAmB,YAAA,MAIAG,EAAArB,EAFAC,EAAA,KAMAG,EAAAJ,EAFAC,EAAA,KAMAF,EAAAsG,QAAA,SAAA/F,EAAAP,GACA,SAAAK,EAAAiG,UAAA,EAAAhF,EAAAgF,SAAA/F,GACAmgB,KACAxf,OAAA,EAAAb,EAAAiG,SAAAtG,qBCjBAO,EAAAJ,QAAA,SAAAI,GACA,sBAAAA,EAAA,MAAA6B,UAAA7B,EAAA,uBACA,OAAAA,wBCDAN,EAAAC,EAAA,IACAE,EAAAF,EAAA,IAEAA,EAAA,GAAAA,CAAA,4BACA,gBAAAK,GACA,OAAAH,EAAAH,EAAAM,wBCNAL,EAAA,IACAK,EAAAJ,QAAAD,EAAA,GAAAU,OAAAsG,gCCDA3G,EAAAJ,SAAkBmG,QAAApG,EAAA,IAAAiB,YAAA,mjBCAlB0B,EAAA3C,EAAA,IACA6C,EAAA7C,EAAA,IAUMygB,cAiBJ,SAAA3gB,IAAc,SAAAW,EAAA2F,SAAArD,KAAAjD,IAAA,EAAAqC,EAAAiE,SAAArD,MAAAjD,EAAAqf,YAAA,EAAA/d,EAAAgF,SAAAtG,IAAAQ,KAAAyC,qFAfZ,SAAOic,EAAPA,MAAAze,sDAoBA,gCAtB0BmgB,kBA0B9Bjf,6BAA6Bgf,EAA7Bhf","file":"sample-component.min.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 95);\n","/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\n\nwindow.JSCompiler_renameProperty = function(prop) { return prop; };\n","var core = module.exports = { version: '2.5.7' };\nif (typeof __e == 'number') __e = core; // eslint-disable-line no-undef\n","// Thank's IE8 for his funny defineProperty\nmodule.exports = !require('./_fails')(function () {\n  return Object.defineProperty({}, 'a', { get: function () { return 7; } }).a != 7;\n});\n","// https://github.com/zloirock/core-js/issues/86#issuecomment-115759028\nvar global = module.exports = typeof window != 'undefined' && window.Math == Math\n  ? window : typeof self != 'undefined' && self.Math == Math ? self\n  // eslint-disable-next-line no-new-func\n  : Function('return this')();\nif (typeof __g == 'number') __g = global; // eslint-disable-line no-undef\n","module.exports = function (it) {\n  return typeof it === 'object' ? it !== null : typeof it === 'function';\n};\n","var anObject = require('./_an-object');\nvar IE8_DOM_DEFINE = require('./_ie8-dom-define');\nvar toPrimitive = require('./_to-primitive');\nvar dP = Object.defineProperty;\n\nexports.f = require('./_descriptors') ? Object.defineProperty : function defineProperty(O, P, Attributes) {\n  anObject(O);\n  P = toPrimitive(P, true);\n  anObject(Attributes);\n  if (IE8_DOM_DEFINE) try {\n    return dP(O, P, Attributes);\n  } catch (e) { /* empty */ }\n  if ('get' in Attributes || 'set' in Attributes) throw TypeError('Accessors not supported!');\n  if ('value' in Attributes) O[P] = Attributes.value;\n  return O;\n};\n","var global = require('./_global');\nvar core = require('./_core');\nvar ctx = require('./_ctx');\nvar hide = require('./_hide');\nvar has = require('./_has');\nvar PROTOTYPE = 'prototype';\n\nvar $export = function (type, name, source) {\n  var IS_FORCED = type & $export.F;\n  var IS_GLOBAL = type & $export.G;\n  var IS_STATIC = type & $export.S;\n  var IS_PROTO = type & $export.P;\n  var IS_BIND = type & $export.B;\n  var IS_WRAP = type & $export.W;\n  var exports = IS_GLOBAL ? core : core[name] || (core[name] = {});\n  var expProto = exports[PROTOTYPE];\n  var target = IS_GLOBAL ? global : IS_STATIC ? global[name] : (global[name] || {})[PROTOTYPE];\n  var key, own, out;\n  if (IS_GLOBAL) source = name;\n  for (key in source) {\n    // contains in native\n    own = !IS_FORCED && target && target[key] !== undefined;\n    if (own && has(exports, key)) continue;\n    // export native or passed\n    out = own ? target[key] : source[key];\n    // prevent global pollution for namespaces\n    exports[key] = IS_GLOBAL && typeof target[key] != 'function' ? source[key]\n    // bind timers to global for call from export context\n    : IS_BIND && own ? ctx(out, global)\n    // wrap global constructors for prevent change them in library\n    : IS_WRAP && target[key] == out ? (function (C) {\n      var F = function (a, b, c) {\n        if (this instanceof C) {\n          switch (arguments.length) {\n            case 0: return new C();\n            case 1: return new C(a);\n            case 2: return new C(a, b);\n          } return new C(a, b, c);\n        } return C.apply(this, arguments);\n      };\n      F[PROTOTYPE] = C[PROTOTYPE];\n      return F;\n    // make static versions for prototype methods\n    })(out) : IS_PROTO && typeof out == 'function' ? ctx(Function.call, out) : out;\n    // export proto methods to core.%CONSTRUCTOR%.methods.%NAME%\n    if (IS_PROTO) {\n      (exports.virtual || (exports.virtual = {}))[key] = out;\n      // export proto methods to core.%CONSTRUCTOR%.prototype.%NAME%\n      if (type & $export.R && expProto && !expProto[key]) hide(expProto, key, out);\n    }\n  }\n};\n// type bitmap\n$export.F = 1;   // forced\n$export.G = 2;   // global\n$export.S = 4;   // static\n$export.P = 8;   // proto\n$export.B = 16;  // bind\n$export.W = 32;  // wrap\n$export.U = 64;  // safe\n$export.R = 128; // real proto method for `library`\nmodule.exports = $export;\n","var hasOwnProperty = {}.hasOwnProperty;\nmodule.exports = function (it, key) {\n  return hasOwnProperty.call(it, key);\n};\n","var store = require('./_shared')('wks');\nvar uid = require('./_uid');\nvar Symbol = require('./_global').Symbol;\nvar USE_SYMBOL = typeof Symbol == 'function';\n\nvar $exports = module.exports = function (name) {\n  return store[name] || (store[name] =\n    USE_SYMBOL && Symbol[name] || (USE_SYMBOL ? Symbol : uid)('Symbol.' + name));\n};\n\n$exports.store = store;\n","// to indexed object, toObject with fallback for non-array-like ES3 strings\nvar IObject = require('./_iobject');\nvar defined = require('./_defined');\nmodule.exports = function (it) {\n  return IObject(defined(it));\n};\n","var dP = require('./_object-dp');\nvar createDesc = require('./_property-desc');\nmodule.exports = require('./_descriptors') ? function (object, key, value) {\n  return dP.f(object, key, createDesc(1, value));\n} : function (object, key, value) {\n  object[key] = value;\n  return object;\n};\n","module.exports = function (exec) {\n  try {\n    return !!exec();\n  } catch (e) {\n    return true;\n  }\n};\n","var isObject = require('./_is-object');\nmodule.exports = function (it) {\n  if (!isObject(it)) throw TypeError(it + ' is not an object!');\n  return it;\n};\n","module.exports = function (bitmap, value) {\n  return {\n    enumerable: !(bitmap & 1),\n    configurable: !(bitmap & 2),\n    writable: !(bitmap & 4),\n    value: value\n  };\n};\n","var id = 0;\nvar px = Math.random();\nmodule.exports = function (key) {\n  return 'Symbol('.concat(key === undefined ? '' : key, ')_', (++id + px).toString(36));\n};\n","module.exports = true;\n","/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\nimport './boot.js';\n\n/**\n * Class representing a static string value which can be used to filter\n * strings by asseting that they have been created via this class. The\n * `value` property returns the string passed to the constructor.\n */\nclass LiteralString {\n  constructor(string) {\n    /** @type {string} */\n    this.value = string.toString();\n  }\n  /**\n   * @return {string} LiteralString string value\n   */\n  toString() {\n    return this.value;\n  }\n}\n\n/**\n * @param {*} value Object to stringify into HTML\n * @return {string} HTML stringified form of `obj`\n */\nfunction literalValue(value) {\n  if (value instanceof LiteralString) {\n    return /** @type {!LiteralString} */(value).value;\n  } else {\n    throw new Error(\n        `non-literal value passed to Polymer's htmlLiteral function: ${value}`\n    );\n  }\n}\n\n/**\n * @param {*} value Object to stringify into HTML\n * @return {string} HTML stringified form of `obj`\n */\nfunction htmlValue(value) {\n  if (value instanceof HTMLTemplateElement) {\n    return /** @type {!HTMLTemplateElement } */(value).innerHTML;\n  } else if (value instanceof LiteralString) {\n    return literalValue(value);\n  } else {\n    throw new Error(\n        `non-template value passed to Polymer's html function: ${value}`);\n  }\n}\n\n/**\n * A template literal tag that creates an HTML <template> element from the\n * contents of the string.\n *\n * This allows you to write a Polymer Template in JavaScript.\n *\n * Templates can be composed by interpolating `HTMLTemplateElement`s in\n * expressions in the JavaScript template literal. The nested template's\n * `innerHTML` is included in the containing template.  The only other\n * values allowed in expressions are those returned from `htmlLiteral`\n * which ensures only literal values from JS source ever reach the HTML, to\n * guard against XSS risks.\n *\n * All other values are disallowed in expressions to help prevent XSS\n * attacks; however, `htmlLiteral` can be used to compose static\n * string values into templates. This is useful to compose strings into\n * places that do not accept html, like the css text of a `style`\n * element.\n *\n * Example:\n *\n *     static get template() {\n *       return html`\n *         <style>:host{ content:\"...\" }</style>\n *         <div class=\"shadowed\">${this.partialTemplate}</div>\n *         ${super.template}\n *       `;\n *     }\n *     static get partialTemplate() { return html`<span>Partial!</span>`; }\n *\n * @param {!ITemplateArray} strings Constant parts of tagged template literal\n * @param {...*} values Variable parts of tagged template literal\n * @return {!HTMLTemplateElement} Constructed HTMLTemplateElement\n */\nexport const html = function html(strings, ...values) {\n  const template = /** @type {!HTMLTemplateElement} */(document.createElement('template'));\n  template.innerHTML = values.reduce((acc, v, idx) =>\n      acc + htmlValue(v) + strings[idx + 1], strings[0]);\n  return template;\n};\n\n/**\n * An html literal tag that can be used with `html` to compose.\n * a literal string.\n *\n * Example:\n *\n *     static get template() {\n *       return html`\n *         <style>\n *           :host { display: block; }\n *           ${this.styleTemplate()}\n *         </style>\n *         <div class=\"shadowed\">${staticValue}</div>\n *         ${super.template}\n *       `;\n *     }\n *     static get styleTemplate() {\n *        return htmlLiteral`.shadowed { background: gray; }`;\n *     }\n *\n * @param {!ITemplateArray} strings Constant parts of tagged template literal\n * @param {...*} values Variable parts of tagged template literal\n * @return {!LiteralString} Constructed literal string\n */\nexport const htmlLiteral = function(strings, ...values) {\n  return new LiteralString(values.reduce((acc, v, idx) =>\n      acc + literalValue(v) + strings[idx + 1], strings[0]));\n};\n","exports.f = {}.propertyIsEnumerable;\n","var global = require('./_global');\nvar core = require('./_core');\nvar LIBRARY = require('./_library');\nvar wksExt = require('./_wks-ext');\nvar defineProperty = require('./_object-dp').f;\nmodule.exports = function (name) {\n  var $Symbol = core.Symbol || (core.Symbol = LIBRARY ? {} : global.Symbol || {});\n  if (name.charAt(0) != '_' && !(name in $Symbol)) defineProperty($Symbol, name, { value: wksExt.f(name) });\n};\n","exports.f = require('./_wks');\n","var def = require('./_object-dp').f;\nvar has = require('./_has');\nvar TAG = require('./_wks')('toStringTag');\n\nmodule.exports = function (it, tag, stat) {\n  if (it && !has(it = stat ? it : it.prototype, TAG)) def(it, TAG, { configurable: true, value: tag });\n};\n","// 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])\nvar anObject = require('./_an-object');\nvar dPs = require('./_object-dps');\nvar enumBugKeys = require('./_enum-bug-keys');\nvar IE_PROTO = require('./_shared-key')('IE_PROTO');\nvar Empty = function () { /* empty */ };\nvar PROTOTYPE = 'prototype';\n\n// Create object with fake `null` prototype: use iframe Object with cleared prototype\nvar createDict = function () {\n  // Thrash, waste and sodomy: IE GC bug\n  var iframe = require('./_dom-create')('iframe');\n  var i = enumBugKeys.length;\n  var lt = '<';\n  var gt = '>';\n  var iframeDocument;\n  iframe.style.display = 'none';\n  require('./_html').appendChild(iframe);\n  iframe.src = 'javascript:'; // eslint-disable-line no-script-url\n  // createDict = iframe.contentWindow.Object;\n  // html.removeChild(iframe);\n  iframeDocument = iframe.contentWindow.document;\n  iframeDocument.open();\n  iframeDocument.write(lt + 'script' + gt + 'document.F=Object' + lt + '/script' + gt);\n  iframeDocument.close();\n  createDict = iframeDocument.F;\n  while (i--) delete createDict[PROTOTYPE][enumBugKeys[i]];\n  return createDict();\n};\n\nmodule.exports = Object.create || function create(O, Properties) {\n  var result;\n  if (O !== null) {\n    Empty[PROTOTYPE] = anObject(O);\n    result = new Empty();\n    Empty[PROTOTYPE] = null;\n    // add \"__proto__\" for Object.getPrototypeOf polyfill\n    result[IE_PROTO] = O;\n  } else result = createDict();\n  return Properties === undefined ? result : dPs(result, Properties);\n};\n","module.exports = {};\n","// IE 8- don't enum bug keys\nmodule.exports = (\n  'constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf'\n).split(',');\n","// 7.1.4 ToInteger\nvar ceil = Math.ceil;\nvar floor = Math.floor;\nmodule.exports = function (it) {\n  return isNaN(it = +it) ? 0 : (it > 0 ? floor : ceil)(it);\n};\n","// 19.1.2.14 / 15.2.3.14 Object.keys(O)\nvar $keys = require('./_object-keys-internal');\nvar enumBugKeys = require('./_enum-bug-keys');\n\nmodule.exports = Object.keys || function keys(O) {\n  return $keys(O, enumBugKeys);\n};\n","// 7.1.1 ToPrimitive(input [, PreferredType])\nvar isObject = require('./_is-object');\n// instead of the ES6 spec version, we didn't implement @@toPrimitive case\n// and the second argument - flag - preferred type is a string\nmodule.exports = function (it, S) {\n  if (!isObject(it)) return it;\n  var fn, val;\n  if (S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it))) return val;\n  if (typeof (fn = it.valueOf) == 'function' && !isObject(val = fn.call(it))) return val;\n  if (!S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it))) return val;\n  throw TypeError(\"Can't convert object to primitive value\");\n};\n","var core = require('./_core');\nvar global = require('./_global');\nvar SHARED = '__core-js_shared__';\nvar store = global[SHARED] || (global[SHARED] = {});\n\n(module.exports = function (key, value) {\n  return store[key] || (store[key] = value !== undefined ? value : {});\n})('versions', []).push({\n  version: core.version,\n  mode: require('./_library') ? 'pure' : 'global',\n  copyright: '© 2018 Denis Pushkarev (zloirock.ru)'\n});\n","var shared = require('./_shared')('keys');\nvar uid = require('./_uid');\nmodule.exports = function (key) {\n  return shared[key] || (shared[key] = uid(key));\n};\n","// 7.2.1 RequireObjectCoercible(argument)\nmodule.exports = function (it) {\n  if (it == undefined) throw TypeError(\"Can't call method on  \" + it);\n  return it;\n};\n","var pIE = require('./_object-pie');\nvar createDesc = require('./_property-desc');\nvar toIObject = require('./_to-iobject');\nvar toPrimitive = require('./_to-primitive');\nvar has = require('./_has');\nvar IE8_DOM_DEFINE = require('./_ie8-dom-define');\nvar gOPD = Object.getOwnPropertyDescriptor;\n\nexports.f = require('./_descriptors') ? gOPD : function getOwnPropertyDescriptor(O, P) {\n  O = toIObject(O);\n  P = toPrimitive(P, true);\n  if (IE8_DOM_DEFINE) try {\n    return gOPD(O, P);\n  } catch (e) { /* empty */ }\n  if (has(O, P)) return createDesc(!pIE.f.call(O, P), O[P]);\n};\n","// 19.1.2.7 / 15.2.3.4 Object.getOwnPropertyNames(O)\nvar $keys = require('./_object-keys-internal');\nvar hiddenKeys = require('./_enum-bug-keys').concat('length', 'prototype');\n\nexports.f = Object.getOwnPropertyNames || function getOwnPropertyNames(O) {\n  return $keys(O, hiddenKeys);\n};\n","exports.f = Object.getOwnPropertySymbols;\n","'use strict';\nvar LIBRARY = require('./_library');\nvar $export = require('./_export');\nvar redefine = require('./_redefine');\nvar hide = require('./_hide');\nvar Iterators = require('./_iterators');\nvar $iterCreate = require('./_iter-create');\nvar setToStringTag = require('./_set-to-string-tag');\nvar getPrototypeOf = require('./_object-gpo');\nvar ITERATOR = require('./_wks')('iterator');\nvar BUGGY = !([].keys && 'next' in [].keys()); // Safari has buggy iterators w/o `next`\nvar FF_ITERATOR = '@@iterator';\nvar KEYS = 'keys';\nvar VALUES = 'values';\n\nvar returnThis = function () { return this; };\n\nmodule.exports = function (Base, NAME, Constructor, next, DEFAULT, IS_SET, FORCED) {\n  $iterCreate(Constructor, NAME, next);\n  var getMethod = function (kind) {\n    if (!BUGGY && kind in proto) return proto[kind];\n    switch (kind) {\n      case KEYS: return function keys() { return new Constructor(this, kind); };\n      case VALUES: return function values() { return new Constructor(this, kind); };\n    } return function entries() { return new Constructor(this, kind); };\n  };\n  var TAG = NAME + ' Iterator';\n  var DEF_VALUES = DEFAULT == VALUES;\n  var VALUES_BUG = false;\n  var proto = Base.prototype;\n  var $native = proto[ITERATOR] || proto[FF_ITERATOR] || DEFAULT && proto[DEFAULT];\n  var $default = $native || getMethod(DEFAULT);\n  var $entries = DEFAULT ? !DEF_VALUES ? $default : getMethod('entries') : undefined;\n  var $anyNative = NAME == 'Array' ? proto.entries || $native : $native;\n  var methods, key, IteratorPrototype;\n  // Fix native\n  if ($anyNative) {\n    IteratorPrototype = getPrototypeOf($anyNative.call(new Base()));\n    if (IteratorPrototype !== Object.prototype && IteratorPrototype.next) {\n      // Set @@toStringTag to native iterators\n      setToStringTag(IteratorPrototype, TAG, true);\n      // fix for some old engines\n      if (!LIBRARY && typeof IteratorPrototype[ITERATOR] != 'function') hide(IteratorPrototype, ITERATOR, returnThis);\n    }\n  }\n  // fix Array#{values, @@iterator}.name in V8 / FF\n  if (DEF_VALUES && $native && $native.name !== VALUES) {\n    VALUES_BUG = true;\n    $default = function values() { return $native.call(this); };\n  }\n  // Define iterator\n  if ((!LIBRARY || FORCED) && (BUGGY || VALUES_BUG || !proto[ITERATOR])) {\n    hide(proto, ITERATOR, $default);\n  }\n  // Plug for library\n  Iterators[NAME] = $default;\n  Iterators[TAG] = returnThis;\n  if (DEFAULT) {\n    methods = {\n      values: DEF_VALUES ? $default : getMethod(VALUES),\n      keys: IS_SET ? $default : getMethod(KEYS),\n      entries: $entries\n    };\n    if (FORCED) for (key in methods) {\n      if (!(key in proto)) redefine(proto, key, methods[key]);\n    } else $export($export.P + $export.F * (BUGGY || VALUES_BUG), NAME, methods);\n  }\n  return methods;\n};\n","\"use strict\";\n\nexports.__esModule = true;\n\nvar _iterator = require(\"../core-js/symbol/iterator\");\n\nvar _iterator2 = _interopRequireDefault(_iterator);\n\nvar _symbol = require(\"../core-js/symbol\");\n\nvar _symbol2 = _interopRequireDefault(_symbol);\n\nvar _typeof = typeof _symbol2.default === \"function\" && typeof _iterator2.default === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof _symbol2.default === \"function\" && obj.constructor === _symbol2.default && obj !== _symbol2.default.prototype ? \"symbol\" : typeof obj; };\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nexports.default = typeof _symbol2.default === \"function\" && _typeof(_iterator2.default) === \"symbol\" ? function (obj) {\n  return typeof obj === \"undefined\" ? \"undefined\" : _typeof(obj);\n} : function (obj) {\n  return obj && typeof _symbol2.default === \"function\" && obj.constructor === _symbol2.default && obj !== _symbol2.default.prototype ? \"symbol\" : typeof obj === \"undefined\" ? \"undefined\" : _typeof(obj);\n};","var META = require('./_uid')('meta');\nvar isObject = require('./_is-object');\nvar has = require('./_has');\nvar setDesc = require('./_object-dp').f;\nvar id = 0;\nvar isExtensible = Object.isExtensible || function () {\n  return true;\n};\nvar FREEZE = !require('./_fails')(function () {\n  return isExtensible(Object.preventExtensions({}));\n});\nvar setMeta = function (it) {\n  setDesc(it, META, { value: {\n    i: 'O' + ++id, // object ID\n    w: {}          // weak collections IDs\n  } });\n};\nvar fastKey = function (it, create) {\n  // return primitive with prefix\n  if (!isObject(it)) return typeof it == 'symbol' ? it : (typeof it == 'string' ? 'S' : 'P') + it;\n  if (!has(it, META)) {\n    // can't set metadata to uncaught frozen object\n    if (!isExtensible(it)) return 'F';\n    // not necessary to add metadata\n    if (!create) return 'E';\n    // add missing metadata\n    setMeta(it);\n  // return object ID\n  } return it[META].i;\n};\nvar getWeak = function (it, create) {\n  if (!has(it, META)) {\n    // can't set metadata to uncaught frozen object\n    if (!isExtensible(it)) return true;\n    // not necessary to add metadata\n    if (!create) return false;\n    // add missing metadata\n    setMeta(it);\n  // return hash weak collections IDs\n  } return it[META].w;\n};\n// add metadata on freeze-family methods calling\nvar onFreeze = function (it) {\n  if (FREEZE && meta.NEED && isExtensible(it) && !has(it, META)) setMeta(it);\n  return it;\n};\nvar meta = module.exports = {\n  KEY: META,\n  NEED: false,\n  fastKey: fastKey,\n  getWeak: getWeak,\n  onFreeze: onFreeze\n};\n","var toString = {}.toString;\n\nmodule.exports = function (it) {\n  return toString.call(it).slice(8, -1);\n};\n","var has = require('./_has');\nvar toIObject = require('./_to-iobject');\nvar arrayIndexOf = require('./_array-includes')(false);\nvar IE_PROTO = require('./_shared-key')('IE_PROTO');\n\nmodule.exports = function (object, names) {\n  var O = toIObject(object);\n  var i = 0;\n  var result = [];\n  var key;\n  for (key in O) if (key != IE_PROTO) has(O, key) && result.push(key);\n  // Don't enum bug & hidden keys\n  while (names.length > i) if (has(O, key = names[i++])) {\n    ~arrayIndexOf(result, key) || result.push(key);\n  }\n  return result;\n};\n","var dP = require('./_object-dp');\nvar anObject = require('./_an-object');\nvar getKeys = require('./_object-keys');\n\nmodule.exports = require('./_descriptors') ? Object.defineProperties : function defineProperties(O, Properties) {\n  anObject(O);\n  var keys = getKeys(Properties);\n  var length = keys.length;\n  var i = 0;\n  var P;\n  while (length > i) dP.f(O, P = keys[i++], Properties[P]);\n  return O;\n};\n","var isObject = require('./_is-object');\nvar document = require('./_global').document;\n// typeof document.createElement is 'object' in old IE\nvar is = isObject(document) && isObject(document.createElement);\nmodule.exports = function (it) {\n  return is ? document.createElement(it) : {};\n};\n","module.exports = !require('./_descriptors') && !require('./_fails')(function () {\n  return Object.defineProperty(require('./_dom-create')('div'), 'a', { get: function () { return 7; } }).a != 7;\n});\n","// optional / simple context binding\nvar aFunction = require('./_a-function');\nmodule.exports = function (fn, that, length) {\n  aFunction(fn);\n  if (that === undefined) return fn;\n  switch (length) {\n    case 1: return function (a) {\n      return fn.call(that, a);\n    };\n    case 2: return function (a, b) {\n      return fn.call(that, a, b);\n    };\n    case 3: return function (a, b, c) {\n      return fn.call(that, a, b, c);\n    };\n  }\n  return function (/* ...args */) {\n    return fn.apply(that, arguments);\n  };\n};\n","// most Object methods by ES6 should accept primitives\nvar $export = require('./_export');\nvar core = require('./_core');\nvar fails = require('./_fails');\nmodule.exports = function (KEY, exec) {\n  var fn = (core.Object || {})[KEY] || Object[KEY];\n  var exp = {};\n  exp[KEY] = exec(fn);\n  $export($export.S + $export.F * fails(function () { fn(1); }), 'Object', exp);\n};\n","// 19.1.2.9 / 15.2.3.2 Object.getPrototypeOf(O)\nvar has = require('./_has');\nvar toObject = require('./_to-object');\nvar IE_PROTO = require('./_shared-key')('IE_PROTO');\nvar ObjectProto = Object.prototype;\n\nmodule.exports = Object.getPrototypeOf || function (O) {\n  O = toObject(O);\n  if (has(O, IE_PROTO)) return O[IE_PROTO];\n  if (typeof O.constructor == 'function' && O instanceof O.constructor) {\n    return O.constructor.prototype;\n  } return O instanceof Object ? ObjectProto : null;\n};\n","// 7.1.13 ToObject(argument)\nvar defined = require('./_defined');\nmodule.exports = function (it) {\n  return Object(defined(it));\n};\n","/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\nimport './boot.js';\n\nlet CSS_URL_RX = /(url\\()([^)]*)(\\))/g;\nlet ABS_URL = /(^\\/)|(^#)|(^[\\w-\\d]*:)/;\nlet workingURL;\nlet resolveDoc;\n/**\n * Resolves the given URL against the provided `baseUri'.\n *\n * Note that this function performs no resolution for URLs that start\n * with `/` (absolute URLs) or `#` (hash identifiers).  For general purpose\n * URL resolution, use `window.URL`.\n *\n * @param {string} url Input URL to resolve\n * @param {?string=} baseURI Base URI to resolve the URL against\n * @return {string} resolved URL\n */\nexport function resolveUrl(url, baseURI) {\n  if (url && ABS_URL.test(url)) {\n    return url;\n  }\n  // Lazy feature detection.\n  if (workingURL === undefined) {\n    workingURL = false;\n    try {\n      const u = new URL('b', 'http://a');\n      u.pathname = 'c%20d';\n      workingURL = (u.href === 'http://a/c%20d');\n    } catch (e) {\n      // silently fail\n    }\n  }\n  if (!baseURI) {\n    baseURI = document.baseURI || window.location.href;\n  }\n  if (workingURL) {\n    return (new URL(url, baseURI)).href;\n  }\n  // Fallback to creating an anchor into a disconnected document.\n  if (!resolveDoc) {\n    resolveDoc = document.implementation.createHTMLDocument('temp');\n    resolveDoc.base = resolveDoc.createElement('base');\n    resolveDoc.head.appendChild(resolveDoc.base);\n    resolveDoc.anchor = resolveDoc.createElement('a');\n    resolveDoc.body.appendChild(resolveDoc.anchor);\n  }\n  resolveDoc.base.href = baseURI;\n  resolveDoc.anchor.href = url;\n  return resolveDoc.anchor.href || url;\n\n}\n\n/**\n * Resolves any relative URL's in the given CSS text against the provided\n * `ownerDocument`'s `baseURI`.\n *\n * @param {string} cssText CSS text to process\n * @param {string} baseURI Base URI to resolve the URL against\n * @return {string} Processed CSS text with resolved URL's\n */\nexport function resolveCss(cssText, baseURI) {\n  return cssText.replace(CSS_URL_RX, function(m, pre, url, post) {\n    return pre + '\\'' +\n      resolveUrl(url.replace(/[\"']/g, ''), baseURI) +\n      '\\'' + post;\n  });\n}\n\n/**\n * Returns a path from a given `url`. The path includes the trailing\n * `/` from the url.\n *\n * @param {string} url Input URL to transform\n * @return {string} resolved path\n */\nexport function pathFromUrl(url) {\n  return url.substring(0, url.lastIndexOf('/') + 1);\n}\n","/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\nimport './boot.js';\n\n// unique global id for deduping mixins.\nlet dedupeId = 0;\n\n/**\n * @constructor\n * @extends {Function}\n */\nfunction MixinFunction(){}\n/** @type {(WeakMap | undefined)} */\nMixinFunction.prototype.__mixinApplications;\n/** @type {(Object | undefined)} */\nMixinFunction.prototype.__mixinSet;\n\n/* eslint-disable valid-jsdoc */\n/**\n * Wraps an ES6 class expression mixin such that the mixin is only applied\n * if it has not already been applied its base argument. Also memoizes mixin\n * applications.\n *\n * @template T\n * @param {T} mixin ES6 class expression mixin to wrap\n * @return {T}\n * @suppress {invalidCasts}\n */\nexport const dedupingMixin = function(mixin) {\n  let mixinApplications = /** @type {!MixinFunction} */(mixin).__mixinApplications;\n  if (!mixinApplications) {\n    mixinApplications = new WeakMap();\n    /** @type {!MixinFunction} */(mixin).__mixinApplications = mixinApplications;\n  }\n  // maintain a unique id for each mixin\n  let mixinDedupeId = dedupeId++;\n  function dedupingMixin(base) {\n    let baseSet = /** @type {!MixinFunction} */(base).__mixinSet;\n    if (baseSet && baseSet[mixinDedupeId]) {\n      return base;\n    }\n    let map = mixinApplications;\n    let extended = map.get(base);\n    if (!extended) {\n      extended = /** @type {!Function} */(mixin)(base);\n      map.set(base, extended);\n    }\n    // copy inherited mixin set from the extended class, or the base class\n    // NOTE: we avoid use of Set here because some browser (IE11)\n    // cannot extend a base Set via the constructor.\n    let mixinSet = Object.create(/** @type {!MixinFunction} */(extended).__mixinSet || baseSet || null);\n    mixinSet[mixinDedupeId] = true;\n    /** @type {!MixinFunction} */(extended).__mixinSet = mixinSet;\n    return extended;\n  }\n\n  return /** @type {T} */ (dedupingMixin);\n};\n/* eslint-enable valid-jsdoc */\n","/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\nimport { resolveCss } from './resolve-url.js';\n\nconst MODULE_STYLE_LINK_SELECTOR = 'link[rel=import][type~=css]';\nconst INCLUDE_ATTR = 'include';\nconst SHADY_UNSCOPED_ATTR = 'shady-unscoped';\n\nfunction importModule(moduleId) {\n  const /** DomModule */ PolymerDomModule = customElements.get('dom-module');\n  if (!PolymerDomModule) {\n    return null;\n  }\n  return PolymerDomModule.import(moduleId);\n}\n\nfunction styleForImport(importDoc) {\n  // NOTE: polyfill affordance.\n  // under the HTMLImports polyfill, there will be no 'body',\n  // but the import pseudo-doc can be used directly.\n  let container = importDoc.body ? importDoc.body : importDoc;\n  const importCss = resolveCss(container.textContent,\n    importDoc.baseURI);\n  const style = document.createElement('style');\n  style.textContent = importCss;\n  return style;\n}\n\n/** @typedef {{assetpath: string}} */\nlet templateWithAssetPath; // eslint-disable-line no-unused-vars\n\n/**\n * Module with utilities for collection CSS text from `<templates>`, external\n * stylesheets, and `dom-module`s.\n *\n * @summary Module with utilities for collection CSS text from various sources.\n */\n`TODO(modulizer): A namespace named Polymer.StyleGather was\ndeclared here. The surrounding comments should be reviewed,\nand this string can then be deleted`;\n\n/**\n * Returns a list of <style> elements in a space-separated list of `dom-module`s.\n *\n * @function\n * @param {string} moduleIds List of dom-module id's within which to\n * search for css.\n * @return {!Array<!HTMLStyleElement>} Array of contained <style> elements\n * @this {StyleGather}\n */\nexport function stylesFromModules(moduleIds) {\n const modules = moduleIds.trim().split(/\\s+/);\n const styles = [];\n for (let i=0; i < modules.length; i++) {\n   styles.push(...stylesFromModule(modules[i]));\n }\n return styles;\n}\n\n/**\n * Returns a list of <style> elements in a given `dom-module`.\n * Styles in a `dom-module` can come either from `<style>`s within the\n * first `<template>`, or else from one or more\n * `<link rel=\"import\" type=\"css\">` links outside the template.\n *\n * @param {string} moduleId dom-module id to gather styles from\n * @return {!Array<!HTMLStyleElement>} Array of contained styles.\n * @this {StyleGather}\n */\nexport function stylesFromModule(moduleId) {\n  const m = importModule(moduleId);\n\n  if (!m) {\n    console.warn('Could not find style data in module named', moduleId);\n    return [];\n  }\n\n  if (m._styles === undefined) {\n    const styles = [];\n    // module imports: <link rel=\"import\" type=\"css\">\n    styles.push(..._stylesFromModuleImports(m));\n    // include css from the first template in the module\n    const template = m.querySelector('template');\n    if (template) {\n      styles.push(...stylesFromTemplate(template,\n        /** @type {templateWithAssetPath} */(m).assetpath));\n    }\n\n    m._styles = styles;\n  }\n\n  return m._styles;\n}\n\n/**\n * Returns the `<style>` elements within a given template.\n *\n * @param {!HTMLTemplateElement} template Template to gather styles from\n * @param {string} baseURI baseURI for style content\n * @return {!Array<!HTMLStyleElement>} Array of styles\n * @this {StyleGather}\n */\nexport function stylesFromTemplate(template, baseURI) {\n  if (!template._styles) {\n    const styles = [];\n    // if element is a template, get content from its .content\n    const e$ = template.content.querySelectorAll('style');\n    for (let i=0; i < e$.length; i++) {\n      let e = e$[i];\n      // support style sharing by allowing styles to \"include\"\n      // other dom-modules that contain styling\n      let include = e.getAttribute(INCLUDE_ATTR);\n      if (include) {\n        styles.push(...stylesFromModules(include).filter(function(item, index, self) {\n          return self.indexOf(item) === index;\n        }));\n      }\n      if (baseURI) {\n        e.textContent = resolveCss(e.textContent, baseURI);\n      }\n      styles.push(e);\n    }\n    template._styles = styles;\n  }\n  return template._styles;\n}\n\n/**\n * Returns a list of <style> elements  from stylesheets loaded via `<link rel=\"import\" type=\"css\">` links within the specified `dom-module`.\n *\n * @param {string} moduleId Id of `dom-module` to gather CSS from\n * @return {!Array<!HTMLStyleElement>} Array of contained styles.\n * @this {StyleGather}\n */\nexport function stylesFromModuleImports(moduleId) {\n let m = importModule(moduleId);\n return m ? _stylesFromModuleImports(m) : [];\n}\n\n/**\n * @this {StyleGather}\n * @param {!HTMLElement} module dom-module element that could contain `<link rel=\"import\" type=\"css\">` styles\n * @return {!Array<!HTMLStyleElement>} Array of contained styles\n */\nfunction _stylesFromModuleImports(module) {\n  const styles = [];\n  const p$ = module.querySelectorAll(MODULE_STYLE_LINK_SELECTOR);\n  for (let i=0; i < p$.length; i++) {\n    let p = p$[i];\n    if (p.import) {\n      const importDoc = p.import;\n      const unscoped = p.hasAttribute(SHADY_UNSCOPED_ATTR);\n      if (unscoped && !importDoc._unscopedStyle) {\n        const style = styleForImport(importDoc);\n        style.setAttribute(SHADY_UNSCOPED_ATTR, '');\n        importDoc._unscopedStyle = style;\n      } else if (!importDoc._style) {\n        importDoc._style = styleForImport(importDoc);\n      }\n      styles.push(unscoped ? importDoc._unscopedStyle : importDoc._style);\n    }\n  }\n  return styles;\n}\n\n/**\n *\n * Returns CSS text of styles in a space-separated list of `dom-module`s.\n * Note: This method is deprecated, use `stylesFromModules` instead.\n *\n * @deprecated\n * @param {string} moduleIds List of dom-module id's within which to\n * search for css.\n * @return {string} Concatenated CSS content from specified `dom-module`s\n * @this {StyleGather}\n */\nexport function cssFromModules(moduleIds) {\n let modules = moduleIds.trim().split(/\\s+/);\n let cssText = '';\n for (let i=0; i < modules.length; i++) {\n   cssText += cssFromModule(modules[i]);\n }\n return cssText;\n}\n\n/**\n * Returns CSS text of styles in a given `dom-module`.  CSS in a `dom-module`\n * can come either from `<style>`s within the first `<template>`, or else\n * from one or more `<link rel=\"import\" type=\"css\">` links outside the\n * template.\n *\n * Any `<styles>` processed are removed from their original location.\n * Note: This method is deprecated, use `styleFromModule` instead.\n *\n * @deprecated\n * @param {string} moduleId dom-module id to gather styles from\n * @return {string} Concatenated CSS content from specified `dom-module`\n * @this {StyleGather}\n */\nexport function cssFromModule(moduleId) {\n  let m = importModule(moduleId);\n  if (m && m._cssText === undefined) {\n    // module imports: <link rel=\"import\" type=\"css\">\n    let cssText = _cssFromModuleImports(m);\n    // include css from the first template in the module\n    let t = m.querySelector('template');\n    if (t) {\n      cssText += cssFromTemplate(t,\n        /** @type {templateWithAssetPath} */(m).assetpath);\n    }\n    m._cssText = cssText || null;\n  }\n  if (!m) {\n    console.warn('Could not find style data in module named', moduleId);\n  }\n  return m && m._cssText || '';\n}\n\n/**\n * Returns CSS text of `<styles>` within a given template.\n *\n * Any `<styles>` processed are removed from their original location.\n * Note: This method is deprecated, use `styleFromTemplate` instead.\n *\n * @deprecated\n * @param {!HTMLTemplateElement} template Template to gather styles from\n * @param {string} baseURI Base URI to resolve the URL against\n * @return {string} Concatenated CSS content from specified template\n * @this {StyleGather}\n */\nexport function cssFromTemplate(template, baseURI) {\n  let cssText = '';\n  const e$ = stylesFromTemplate(template, baseURI);\n  // if element is a template, get content from its .content\n  for (let i=0; i < e$.length; i++) {\n    let e = e$[i];\n    if (e.parentNode) {\n      e.parentNode.removeChild(e);\n    }\n    cssText += e.textContent;\n  }\n  return cssText;\n}\n\n/**\n * Returns CSS text from stylesheets loaded via `<link rel=\"import\" type=\"css\">`\n * links within the specified `dom-module`.\n *\n * Note: This method is deprecated, use `stylesFromModuleImports` instead.\n *\n * @deprecated\n *\n * @param {string} moduleId Id of `dom-module` to gather CSS from\n * @return {string} Concatenated CSS content from links in specified `dom-module`\n * @this {StyleGather}\n */\nexport function cssFromModuleImports(moduleId) {\n  let m = importModule(moduleId);\n  return m ? _cssFromModuleImports(m) : '';\n}\n\n/**\n * @deprecated\n * @this {StyleGather}\n * @param {!HTMLElement} module dom-module element that could contain `<link rel=\"import\" type=\"css\">` styles\n * @return {string} Concatenated CSS content from links in the dom-module\n */\nfunction _cssFromModuleImports(module) {\n let cssText = '';\n let styles = _stylesFromModuleImports(module);\n for (let i=0; i < styles.length; i++) {\n   cssText += styles[i].textContent;\n }\n return cssText;\n}\n","/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\nimport './boot.js';\n\n/**\n * Module with utilities for manipulating structured data path strings.\n *\n * @summary Module with utilities for manipulating structured data path strings.\n */\n`TODO(modulizer): A namespace named Polymer.Path was\ndeclared here. The surrounding comments should be reviewed,\nand this string can then be deleted`;\n\n/**\n * Returns true if the given string is a structured data path (has dots).\n *\n * Example:\n *\n * ```\n * isPath('foo.bar.baz') // true\n * isPath('foo')         // false\n * ```\n *\n * @param {string} path Path string\n * @return {boolean} True if the string contained one or more dots\n */\nexport function isPath(path) {\n  return path.indexOf('.') >= 0;\n}\n\n/**\n * Returns the root property name for the given path.\n *\n * Example:\n *\n * ```\n * root('foo.bar.baz') // 'foo'\n * root('foo')         // 'foo'\n * ```\n *\n * @param {string} path Path string\n * @return {string} Root property name\n */\nexport function root(path) {\n  let dotIndex = path.indexOf('.');\n  if (dotIndex === -1) {\n    return path;\n  }\n  return path.slice(0, dotIndex);\n}\n\n/**\n * Given `base` is `foo.bar`, `foo` is an ancestor, `foo.bar` is not\n * Returns true if the given path is an ancestor of the base path.\n *\n * Example:\n *\n * ```\n * isAncestor('foo.bar', 'foo')         // true\n * isAncestor('foo.bar', 'foo.bar')     // false\n * isAncestor('foo.bar', 'foo.bar.baz') // false\n * ```\n *\n * @param {string} base Path string to test against.\n * @param {string} path Path string to test.\n * @return {boolean} True if `path` is an ancestor of `base`.\n */\nexport function isAncestor(base, path) {\n  //     base.startsWith(path + '.');\n  return base.indexOf(path + '.') === 0;\n}\n\n/**\n * Given `base` is `foo.bar`, `foo.bar.baz` is an descendant\n *\n * Example:\n *\n * ```\n * isDescendant('foo.bar', 'foo.bar.baz') // true\n * isDescendant('foo.bar', 'foo.bar')     // false\n * isDescendant('foo.bar', 'foo')         // false\n * ```\n *\n * @param {string} base Path string to test against.\n * @param {string} path Path string to test.\n * @return {boolean} True if `path` is a descendant of `base`.\n */\nexport function isDescendant(base, path) {\n  //     path.startsWith(base + '.');\n  return path.indexOf(base + '.') === 0;\n}\n\n/**\n * Replaces a previous base path with a new base path, preserving the\n * remainder of the path.\n *\n * User must ensure `path` has a prefix of `base`.\n *\n * Example:\n *\n * ```\n * translate('foo.bar', 'zot', 'foo.bar.baz') // 'zot.baz'\n * ```\n *\n * @param {string} base Current base string to remove\n * @param {string} newBase New base string to replace with\n * @param {string} path Path to translate\n * @return {string} Translated string\n */\nexport function translate(base, newBase, path) {\n  return newBase + path.slice(base.length);\n}\n\n/**\n * @param {string} base Path string to test against\n * @param {string} path Path string to test\n * @return {boolean} True if `path` is equal to `base`\n * @this {Path}\n */\nexport function matches(base, path) {\n  return (base === path) ||\n         isAncestor(base, path) ||\n         isDescendant(base, path);\n}\n\n/**\n * Converts array-based paths to flattened path.  String-based paths\n * are returned as-is.\n *\n * Example:\n *\n * ```\n * normalize(['foo.bar', 0, 'baz'])  // 'foo.bar.0.baz'\n * normalize('foo.bar.0.baz')        // 'foo.bar.0.baz'\n * ```\n *\n * @param {string | !Array<string|number>} path Input path\n * @return {string} Flattened path\n */\nexport function normalize(path) {\n  if (Array.isArray(path)) {\n    let parts = [];\n    for (let i=0; i<path.length; i++) {\n      let args = path[i].toString().split('.');\n      for (let j=0; j<args.length; j++) {\n        parts.push(args[j]);\n      }\n    }\n    return parts.join('.');\n  } else {\n    return path;\n  }\n}\n\n/**\n * Splits a path into an array of property names. Accepts either arrays\n * of path parts or strings.\n *\n * Example:\n *\n * ```\n * split(['foo.bar', 0, 'baz'])  // ['foo', 'bar', '0', 'baz']\n * split('foo.bar.0.baz')        // ['foo', 'bar', '0', 'baz']\n * ```\n *\n * @param {string | !Array<string|number>} path Input path\n * @return {!Array<string>} Array of path parts\n * @this {Path}\n * @suppress {checkTypes}\n */\nexport function split(path) {\n  if (Array.isArray(path)) {\n    return normalize(path).split('.');\n  }\n  return path.toString().split('.');\n}\n\n/**\n * Reads a value from a path.  If any sub-property in the path is `undefined`,\n * this method returns `undefined` (will never throw.\n *\n * @param {Object} root Object from which to dereference path from\n * @param {string | !Array<string|number>} path Path to read\n * @param {Object=} info If an object is provided to `info`, the normalized\n *  (flattened) path will be set to `info.path`.\n * @return {*} Value at path, or `undefined` if the path could not be\n *  fully dereferenced.\n * @this {Path}\n */\nexport function get(root, path, info) {\n  let prop = root;\n  let parts = split(path);\n  // Loop over path parts[0..n-1] and dereference\n  for (let i=0; i<parts.length; i++) {\n    if (!prop) {\n      return;\n    }\n    let part = parts[i];\n    prop = prop[part];\n  }\n  if (info) {\n    info.path = parts.join('.');\n  }\n  return prop;\n}\n\n/**\n * Sets a value to a path.  If any sub-property in the path is `undefined`,\n * this method will no-op.\n *\n * @param {Object} root Object from which to dereference path from\n * @param {string | !Array<string|number>} path Path to set\n * @param {*} value Value to set to path\n * @return {string | undefined} The normalized version of the input path\n * @this {Path}\n */\nexport function set(root, path, value) {\n  let prop = root;\n  let parts = split(path);\n  let last = parts[parts.length-1];\n  if (parts.length > 1) {\n    // Loop over path parts[0..n-2] and dereference\n    for (let i=0; i<parts.length-1; i++) {\n      let part = parts[i];\n      prop = prop[part];\n      if (!prop) {\n        return;\n      }\n    }\n    // Set value to object at end of path\n    prop[last] = value;\n  } else {\n    // Simple property set\n    prop[path] = value;\n  }\n  return parts.join('.');\n}\n\n/**\n * Returns true if the given string is a structured data path (has dots).\n *\n * This function is deprecated.  Use `isPath` instead.\n *\n * Example:\n *\n * ```\n * isDeep('foo.bar.baz') // true\n * isDeep('foo')         // false\n * ```\n *\n * @deprecated\n * @param {string} path Path string\n * @return {boolean} True if the string contained one or more dots\n */\nexport const isDeep = isPath;\n","/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\nimport './boot.js';\n\nconst caseMap = {};\nconst DASH_TO_CAMEL = /-[a-z]/g;\nconst CAMEL_TO_DASH = /([A-Z])/g;\n\n/**\n * Module with utilities for converting between \"dash-case\" and \"camelCase\"\n * identifiers.\n *\n * @summary Module that provides utilities for converting between \"dash-case\"\n *   and \"camelCase\".\n */\n`TODO(modulizer): A namespace named Polymer.CaseMap was\ndeclared here. The surrounding comments should be reviewed,\nand this string can then be deleted`;\n\n/**\n * Converts \"dash-case\" identifier (e.g. `foo-bar-baz`) to \"camelCase\"\n * (e.g. `fooBarBaz`).\n *\n * @param {string} dash Dash-case identifier\n * @return {string} Camel-case representation of the identifier\n */\nexport function dashToCamelCase(dash) {\n  return caseMap[dash] || (\n    caseMap[dash] = dash.indexOf('-') < 0 ? dash : dash.replace(DASH_TO_CAMEL,\n      (m) => m[1].toUpperCase()\n    )\n  );\n}\n\n/**\n * Converts \"camelCase\" identifier (e.g. `fooBarBaz`) to \"dash-case\"\n * (e.g. `foo-bar-baz`).\n *\n * @param {string} camel Camel-case identifier\n * @return {string} Dash-case representation of the identifier\n */\nexport function camelToDashCase(camel) {\n  return caseMap[camel] || (\n    caseMap[camel] = camel.replace(CAMEL_TO_DASH, '-$1').toLowerCase()\n  );\n}\n","/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\nimport '../utils/boot.js';\n\nimport { dedupingMixin } from '../utils/mixin.js';\n\n// 1.x backwards-compatible auto-wrapper for template type extensions\n// This is a clear layering violation and gives favored-nation status to\n// dom-if and dom-repeat templates.  This is a conceit we're choosing to keep\n// a.) to ease 1.x backwards-compatibility due to loss of `is`, and\n// b.) to maintain if/repeat capability in parser-constrained elements\n//     (e.g. table, select) in lieu of native CE type extensions without\n//     massive new invention in this space (e.g. directive system)\nconst templateExtensions = {\n  'dom-if': true,\n  'dom-repeat': true\n};\nfunction wrapTemplateExtension(node) {\n  let is = node.getAttribute('is');\n  if (is && templateExtensions[is]) {\n    let t = node;\n    t.removeAttribute('is');\n    node = t.ownerDocument.createElement(is);\n    t.parentNode.replaceChild(node, t);\n    node.appendChild(t);\n    while(t.attributes.length) {\n      node.setAttribute(t.attributes[0].name, t.attributes[0].value);\n      t.removeAttribute(t.attributes[0].name);\n    }\n  }\n  return node;\n}\n\nfunction findTemplateNode(root, nodeInfo) {\n  // recursively ascend tree until we hit root\n  let parent = nodeInfo.parentInfo && findTemplateNode(root, nodeInfo.parentInfo);\n  // unwind the stack, returning the indexed node at each level\n  if (parent) {\n    // note: marginally faster than indexing via childNodes\n    // (http://jsperf.com/childnodes-lookup)\n    for (let n=parent.firstChild, i=0; n; n=n.nextSibling) {\n      if (nodeInfo.parentIndex === i++) {\n        return n;\n      }\n    }\n  } else {\n    return root;\n  }\n}\n\n// construct `$` map (from id annotations)\nfunction applyIdToMap(inst, map, node, nodeInfo) {\n  if (nodeInfo.id) {\n    map[nodeInfo.id] = node;\n  }\n}\n\n// install event listeners (from event annotations)\nfunction applyEventListener(inst, node, nodeInfo) {\n  if (nodeInfo.events && nodeInfo.events.length) {\n    for (let j=0, e$=nodeInfo.events, e; (j<e$.length) && (e=e$[j]); j++) {\n      inst._addMethodEventListenerToNode(node, e.name, e.value, inst);\n    }\n  }\n}\n\n// push configuration references at configure time\nfunction applyTemplateContent(inst, node, nodeInfo) {\n  if (nodeInfo.templateInfo) {\n    node._templateInfo = nodeInfo.templateInfo;\n  }\n}\n\nfunction createNodeEventHandler(context, eventName, methodName) {\n  // Instances can optionally have a _methodHost which allows redirecting where\n  // to find methods. Currently used by `templatize`.\n  context = context._methodHost || context;\n  let handler = function(e) {\n    if (context[methodName]) {\n      context[methodName](e, e.detail);\n    } else {\n      console.warn('listener method `' + methodName + '` not defined');\n    }\n  };\n  return handler;\n}\n\n/**\n * Element mixin that provides basic template parsing and stamping, including\n * the following template-related features for stamped templates:\n *\n * - Declarative event listeners (`on-eventname=\"listener\"`)\n * - Map of node id's to stamped node instances (`this.$.id`)\n * - Nested template content caching/removal and re-installation (performance\n *   optimization)\n *\n * @mixinFunction\n * @polymer\n * @summary Element class mixin that provides basic template parsing and stamping\n */\nexport const TemplateStamp = dedupingMixin(superClass => {\n\n  /**\n   * @polymer\n   * @mixinClass\n   * @implements {Polymer_TemplateStamp}\n   */\n  class TemplateStamp extends superClass {\n\n    /**\n     * Scans a template to produce template metadata.\n     *\n     * Template-specific metadata are stored in the object returned, and node-\n     * specific metadata are stored in objects in its flattened `nodeInfoList`\n     * array.  Only nodes in the template that were parsed as nodes of\n     * interest contain an object in `nodeInfoList`.  Each `nodeInfo` object\n     * contains an `index` (`childNodes` index in parent) and optionally\n     * `parent`, which points to node info of its parent (including its index).\n     *\n     * The template metadata object returned from this method has the following\n     * structure (many fields optional):\n     *\n     * ```js\n     *   {\n     *     // Flattened list of node metadata (for nodes that generated metadata)\n     *     nodeInfoList: [\n     *       {\n     *         // `id` attribute for any nodes with id's for generating `$` map\n     *         id: {string},\n     *         // `on-event=\"handler\"` metadata\n     *         events: [\n     *           {\n     *             name: {string},   // event name\n     *             value: {string},  // handler method name\n     *           }, ...\n     *         ],\n     *         // Notes when the template contained a `<slot>` for shady DOM\n     *         // optimization purposes\n     *         hasInsertionPoint: {boolean},\n     *         // For nested `<template>`` nodes, nested template metadata\n     *         templateInfo: {object}, // nested template metadata\n     *         // Metadata to allow efficient retrieval of instanced node\n     *         // corresponding to this metadata\n     *         parentInfo: {number},   // reference to parent nodeInfo>\n     *         parentIndex: {number},  // index in parent's `childNodes` collection\n     *         infoIndex: {number},    // index of this `nodeInfo` in `templateInfo.nodeInfoList`\n     *       },\n     *       ...\n     *     ],\n     *     // When true, the template had the `strip-whitespace` attribute\n     *     // or was nested in a template with that setting\n     *     stripWhitespace: {boolean},\n     *     // For nested templates, nested template content is moved into\n     *     // a document fragment stored here; this is an optimization to\n     *     // avoid the cost of nested template cloning\n     *     content: {DocumentFragment}\n     *   }\n     * ```\n     *\n     * This method kicks off a recursive treewalk as follows:\n     *\n     * ```\n     *    _parseTemplate <---------------------+\n     *      _parseTemplateContent              |\n     *        _parseTemplateNode  <------------|--+\n     *          _parseTemplateNestedTemplate --+  |\n     *          _parseTemplateChildNodes ---------+\n     *          _parseTemplateNodeAttributes\n     *            _parseTemplateNodeAttribute\n     *\n     * ```\n     *\n     * These methods may be overridden to add custom metadata about templates\n     * to either `templateInfo` or `nodeInfo`.\n     *\n     * Note that this method may be destructive to the template, in that\n     * e.g. event annotations may be removed after being noted in the\n     * template metadata.\n     *\n     * @param {!HTMLTemplateElement} template Template to parse\n     * @param {TemplateInfo=} outerTemplateInfo Template metadata from the outer\n     *   template, for parsing nested templates\n     * @return {!TemplateInfo} Parsed template metadata\n     */\n    static _parseTemplate(template, outerTemplateInfo) {\n      // since a template may be re-used, memo-ize metadata\n      if (!template._templateInfo) {\n        let templateInfo = template._templateInfo = {};\n        templateInfo.nodeInfoList = [];\n        templateInfo.stripWhiteSpace =\n          (outerTemplateInfo && outerTemplateInfo.stripWhiteSpace) ||\n          template.hasAttribute('strip-whitespace');\n        this._parseTemplateContent(template, templateInfo, {parent: null});\n      }\n      return template._templateInfo;\n    }\n\n    static _parseTemplateContent(template, templateInfo, nodeInfo) {\n      return this._parseTemplateNode(template.content, templateInfo, nodeInfo);\n    }\n\n    /**\n     * Parses template node and adds template and node metadata based on\n     * the current node, and its `childNodes` and `attributes`.\n     *\n     * This method may be overridden to add custom node or template specific\n     * metadata based on this node.\n     *\n     * @param {Node} node Node to parse\n     * @param {!TemplateInfo} templateInfo Template metadata for current template\n     * @param {!NodeInfo} nodeInfo Node metadata for current template.\n     * @return {boolean} `true` if the visited node added node-specific\n     *   metadata to `nodeInfo`\n     */\n    static _parseTemplateNode(node, templateInfo, nodeInfo) {\n      let noted;\n      let element = /** @type {Element} */(node);\n      if (element.localName == 'template' && !element.hasAttribute('preserve-content')) {\n        noted = this._parseTemplateNestedTemplate(element, templateInfo, nodeInfo) || noted;\n      } else if (element.localName === 'slot') {\n        // For ShadyDom optimization, indicating there is an insertion point\n        templateInfo.hasInsertionPoint = true;\n      }\n      if (element.firstChild) {\n        noted = this._parseTemplateChildNodes(element, templateInfo, nodeInfo) || noted;\n      }\n      if (element.hasAttributes && element.hasAttributes()) {\n        noted = this._parseTemplateNodeAttributes(element, templateInfo, nodeInfo) || noted;\n      }\n      return noted;\n    }\n\n    /**\n     * Parses template child nodes for the given root node.\n     *\n     * This method also wraps whitelisted legacy template extensions\n     * (`is=\"dom-if\"` and `is=\"dom-repeat\"`) with their equivalent element\n     * wrappers, collapses text nodes, and strips whitespace from the template\n     * if the `templateInfo.stripWhitespace` setting was provided.\n     *\n     * @param {Node} root Root node whose `childNodes` will be parsed\n     * @param {!TemplateInfo} templateInfo Template metadata for current template\n     * @param {!NodeInfo} nodeInfo Node metadata for current template.\n     * @return {void}\n     */\n    static _parseTemplateChildNodes(root, templateInfo, nodeInfo) {\n      if (root.localName === 'script' || root.localName === 'style') {\n        return;\n      }\n      for (let node=root.firstChild, parentIndex=0, next; node; node=next) {\n        // Wrap templates\n        if (node.localName == 'template') {\n          node = wrapTemplateExtension(node);\n        }\n        // collapse adjacent textNodes: fixes an IE issue that can cause\n        // text nodes to be inexplicably split =(\n        // note that root.normalize() should work but does not so we do this\n        // manually.\n        next = node.nextSibling;\n        if (node.nodeType === Node.TEXT_NODE) {\n          let /** Node */ n = next;\n          while (n && (n.nodeType === Node.TEXT_NODE)) {\n            node.textContent += n.textContent;\n            next = n.nextSibling;\n            root.removeChild(n);\n            n = next;\n          }\n          // optionally strip whitespace\n          if (templateInfo.stripWhiteSpace && !node.textContent.trim()) {\n            root.removeChild(node);\n            continue;\n          }\n        }\n        let childInfo = { parentIndex, parentInfo: nodeInfo };\n        if (this._parseTemplateNode(node, templateInfo, childInfo)) {\n          childInfo.infoIndex = templateInfo.nodeInfoList.push(/** @type {!NodeInfo} */(childInfo)) - 1;\n        }\n        // Increment if not removed\n        if (node.parentNode) {\n          parentIndex++;\n        }\n      }\n    }\n\n    /**\n     * Parses template content for the given nested `<template>`.\n     *\n     * Nested template info is stored as `templateInfo` in the current node's\n     * `nodeInfo`. `template.content` is removed and stored in `templateInfo`.\n     * It will then be the responsibility of the host to set it back to the\n     * template and for users stamping nested templates to use the\n     * `_contentForTemplate` method to retrieve the content for this template\n     * (an optimization to avoid the cost of cloning nested template content).\n     *\n     * @param {HTMLTemplateElement} node Node to parse (a <template>)\n     * @param {TemplateInfo} outerTemplateInfo Template metadata for current template\n     *   that includes the template `node`\n     * @param {!NodeInfo} nodeInfo Node metadata for current template.\n     * @return {boolean} `true` if the visited node added node-specific\n     *   metadata to `nodeInfo`\n     */\n    static _parseTemplateNestedTemplate(node, outerTemplateInfo, nodeInfo) {\n      let templateInfo = this._parseTemplate(node, outerTemplateInfo);\n      let content = templateInfo.content =\n        node.content.ownerDocument.createDocumentFragment();\n      content.appendChild(node.content);\n      nodeInfo.templateInfo = templateInfo;\n      return true;\n    }\n\n    /**\n     * Parses template node attributes and adds node metadata to `nodeInfo`\n     * for nodes of interest.\n     *\n     * @param {Element} node Node to parse\n     * @param {TemplateInfo} templateInfo Template metadata for current template\n     * @param {NodeInfo} nodeInfo Node metadata for current template.\n     * @return {boolean} `true` if the visited node added node-specific\n     *   metadata to `nodeInfo`\n     */\n    static _parseTemplateNodeAttributes(node, templateInfo, nodeInfo) {\n      // Make copy of original attribute list, since the order may change\n      // as attributes are added and removed\n      let noted = false;\n      let attrs = Array.from(node.attributes);\n      for (let i=attrs.length-1, a; (a=attrs[i]); i--) {\n        noted = this._parseTemplateNodeAttribute(node, templateInfo, nodeInfo, a.name, a.value) || noted;\n      }\n      return noted;\n    }\n\n    /**\n     * Parses a single template node attribute and adds node metadata to\n     * `nodeInfo` for attributes of interest.\n     *\n     * This implementation adds metadata for `on-event=\"handler\"` attributes\n     * and `id` attributes.\n     *\n     * @param {Element} node Node to parse\n     * @param {!TemplateInfo} templateInfo Template metadata for current template\n     * @param {!NodeInfo} nodeInfo Node metadata for current template.\n     * @param {string} name Attribute name\n     * @param {string} value Attribute value\n     * @return {boolean} `true` if the visited node added node-specific\n     *   metadata to `nodeInfo`\n     */\n    static _parseTemplateNodeAttribute(node, templateInfo, nodeInfo, name, value) {\n      // events (on-*)\n      if (name.slice(0, 3) === 'on-') {\n        node.removeAttribute(name);\n        nodeInfo.events = nodeInfo.events || [];\n        nodeInfo.events.push({\n          name: name.slice(3),\n          value\n        });\n        return true;\n      }\n      // static id\n      else if (name === 'id') {\n        nodeInfo.id = value;\n        return true;\n      }\n      return false;\n    }\n\n    /**\n     * Returns the `content` document fragment for a given template.\n     *\n     * For nested templates, Polymer performs an optimization to cache nested\n     * template content to avoid the cost of cloning deeply nested templates.\n     * This method retrieves the cached content for a given template.\n     *\n     * @param {HTMLTemplateElement} template Template to retrieve `content` for\n     * @return {DocumentFragment} Content fragment\n     */\n    static _contentForTemplate(template) {\n      let templateInfo = /** @type {HTMLTemplateElementWithInfo} */ (template)._templateInfo;\n      return (templateInfo && templateInfo.content) || template.content;\n    }\n\n    /**\n     * Clones the provided template content and returns a document fragment\n     * containing the cloned dom.\n     *\n     * The template is parsed (once and memoized) using this library's\n     * template parsing features, and provides the following value-added\n     * features:\n     * * Adds declarative event listeners for `on-event=\"handler\"` attributes\n     * * Generates an \"id map\" for all nodes with id's under `$` on returned\n     *   document fragment\n     * * Passes template info including `content` back to templates as\n     *   `_templateInfo` (a performance optimization to avoid deep template\n     *   cloning)\n     *\n     * Note that the memoized template parsing process is destructive to the\n     * template: attributes for bindings and declarative event listeners are\n     * removed after being noted in notes, and any nested `<template>.content`\n     * is removed and stored in notes as well.\n     *\n     * @param {!HTMLTemplateElement} template Template to stamp\n     * @return {!StampedTemplate} Cloned template content\n     */\n    _stampTemplate(template) {\n      // Polyfill support: bootstrap the template if it has not already been\n      if (template && !template.content &&\n          window.HTMLTemplateElement && HTMLTemplateElement.decorate) {\n        HTMLTemplateElement.decorate(template);\n      }\n      let templateInfo = this.constructor._parseTemplate(template);\n      let nodeInfo = templateInfo.nodeInfoList;\n      let content = templateInfo.content || template.content;\n      let dom = /** @type {DocumentFragment} */ (document.importNode(content, true));\n      // NOTE: ShadyDom optimization indicating there is an insertion point\n      dom.__noInsertionPoint = !templateInfo.hasInsertionPoint;\n      let nodes = dom.nodeList = new Array(nodeInfo.length);\n      dom.$ = {};\n      for (let i=0, l=nodeInfo.length, info; (i<l) && (info=nodeInfo[i]); i++) {\n        let node = nodes[i] = findTemplateNode(dom, info);\n        applyIdToMap(this, dom.$, node, info);\n        applyTemplateContent(this, node, info);\n        applyEventListener(this, node, info);\n      }\n      dom = /** @type {!StampedTemplate} */(dom); // eslint-disable-line no-self-assign\n      return dom;\n    }\n\n    /**\n     * Adds an event listener by method name for the event provided.\n     *\n     * This method generates a handler function that looks up the method\n     * name at handling time.\n     *\n     * @param {!Node} node Node to add listener on\n     * @param {string} eventName Name of event\n     * @param {string} methodName Name of method\n     * @param {*=} context Context the method will be called on (defaults\n     *   to `node`)\n     * @return {Function} Generated handler function\n     */\n    _addMethodEventListenerToNode(node, eventName, methodName, context) {\n      context = context || node;\n      let handler = createNodeEventHandler(context, eventName, methodName);\n      this._addEventListenerToNode(node, eventName, handler);\n      return handler;\n    }\n\n    /**\n     * Override point for adding custom or simulated event handling.\n     *\n     * @param {!Node} node Node to add event listener to\n     * @param {string} eventName Name of event\n     * @param {function(!Event):void} handler Listener function to add\n     * @return {void}\n     */\n    _addEventListenerToNode(node, eventName, handler) {\n      node.addEventListener(eventName, handler);\n    }\n\n    /**\n     * Override point for adding custom or simulated event handling.\n     *\n     * @param {Node} node Node to remove event listener from\n     * @param {string} eventName Name of event\n     * @param {function(!Event):void} handler Listener function to remove\n     * @return {void}\n     */\n    _removeEventListenerFromNode(node, eventName, handler) {\n      node.removeEventListener(eventName, handler);\n    }\n\n  }\n\n  return TemplateStamp;\n\n});\n","/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\n\nimport '../utils/boot.js';\n\nimport { dedupingMixin } from '../utils/mixin.js';\nimport { root as root$0, isAncestor, isDescendant, get as get$0, translate, isPath as isPath$0, set as set$0, normalize } from '../utils/path.js';\n/* for notify, reflect */\nimport * as caseMap from '../utils/case-map.js';\nimport { camelToDashCase as camelToDashCase$0, dashToCamelCase } from '../utils/case-map.js';\nimport { PropertyAccessors } from './property-accessors.js';\n/* for annotated effects */\nimport { TemplateStamp } from './template-stamp.js';\nimport { sanitizeDOMValue } from '../utils/settings.js';\n\n/** @const {Object} */\nconst CaseMap = caseMap;\n\n// Monotonically increasing unique ID used for de-duping effects triggered\n// from multiple properties in the same turn\nlet dedupeId = 0;\n\n/**\n * Property effect types; effects are stored on the prototype using these keys\n * @enum {string}\n */\nconst TYPES = {\n  COMPUTE: '__computeEffects',\n  REFLECT: '__reflectEffects',\n  NOTIFY: '__notifyEffects',\n  PROPAGATE: '__propagateEffects',\n  OBSERVE: '__observeEffects',\n  READ_ONLY: '__readOnly'\n};\n\n/** @const {RegExp} */\nconst capitalAttributeRegex = /[A-Z]/;\n\n/**\n * @typedef {{\n * name: (string | undefined),\n * structured: (boolean | undefined),\n * wildcard: (boolean | undefined)\n * }}\n */\nlet DataTrigger; //eslint-disable-line no-unused-vars\n\n/**\n * @typedef {{\n * info: ?,\n * trigger: (!DataTrigger | undefined),\n * fn: (!Function | undefined)\n * }}\n */\nlet DataEffect; //eslint-disable-line no-unused-vars\n\nlet PropertyEffectsType; //eslint-disable-line no-unused-vars\n\n/**\n * Ensures that the model has an own-property map of effects for the given type.\n * The model may be a prototype or an instance.\n *\n * Property effects are stored as arrays of effects by property in a map,\n * by named type on the model. e.g.\n *\n *   __computeEffects: {\n *     foo: [ ... ],\n *     bar: [ ... ]\n *   }\n *\n * If the model does not yet have an effect map for the type, one is created\n * and returned.  If it does, but it is not an own property (i.e. the\n * prototype had effects), the the map is deeply cloned and the copy is\n * set on the model and returned, ready for new effects to be added.\n *\n * @param {Object} model Prototype or instance\n * @param {string} type Property effect type\n * @return {Object} The own-property map of effects for the given type\n * @private\n */\nfunction ensureOwnEffectMap(model, type) {\n  let effects = model[type];\n  if (!effects) {\n    effects = model[type] = {};\n  } else if (!model.hasOwnProperty(type)) {\n    effects = model[type] = Object.create(model[type]);\n    for (let p in effects) {\n      let protoFx = effects[p];\n      let instFx = effects[p] = Array(protoFx.length);\n      for (let i=0; i<protoFx.length; i++) {\n        instFx[i] = protoFx[i];\n      }\n    }\n  }\n  return effects;\n}\n\n// -- effects ----------------------------------------------\n\n/**\n * Runs all effects of a given type for the given set of property changes\n * on an instance.\n *\n * @param {!PropertyEffectsType} inst The instance with effects to run\n * @param {Object} effects Object map of property-to-Array of effects\n * @param {Object} props Bag of current property changes\n * @param {Object=} oldProps Bag of previous values for changed properties\n * @param {boolean=} hasPaths True with `props` contains one or more paths\n * @param {*=} extraArgs Additional metadata to pass to effect function\n * @return {boolean} True if an effect ran for this property\n * @private\n */\nfunction runEffects(inst, effects, props, oldProps, hasPaths, extraArgs) {\n  if (effects) {\n    let ran = false;\n    let id = dedupeId++;\n    for (let prop in props) {\n      if (runEffectsForProperty(inst, effects, id, prop, props, oldProps, hasPaths, extraArgs)) {\n        ran = true;\n      }\n    }\n    return ran;\n  }\n  return false;\n}\n\n/**\n * Runs a list of effects for a given property.\n *\n * @param {!PropertyEffectsType} inst The instance with effects to run\n * @param {Object} effects Object map of property-to-Array of effects\n * @param {number} dedupeId Counter used for de-duping effects\n * @param {string} prop Name of changed property\n * @param {*} props Changed properties\n * @param {*} oldProps Old properties\n * @param {boolean=} hasPaths True with `props` contains one or more paths\n * @param {*=} extraArgs Additional metadata to pass to effect function\n * @return {boolean} True if an effect ran for this property\n * @private\n */\nfunction runEffectsForProperty(inst, effects, dedupeId, prop, props, oldProps, hasPaths, extraArgs) {\n  let ran = false;\n  let rootProperty = hasPaths ? root$0(prop) : prop;\n  let fxs = effects[rootProperty];\n  if (fxs) {\n    for (let i=0, l=fxs.length, fx; (i<l) && (fx=fxs[i]); i++) {\n      if ((!fx.info || fx.info.lastRun !== dedupeId) &&\n          (!hasPaths || pathMatchesTrigger(prop, fx.trigger))) {\n        if (fx.info) {\n          fx.info.lastRun = dedupeId;\n        }\n        fx.fn(inst, prop, props, oldProps, fx.info, hasPaths, extraArgs);\n        ran = true;\n      }\n    }\n  }\n  return ran;\n}\n\n/**\n * Determines whether a property/path that has changed matches the trigger\n * criteria for an effect.  A trigger is a descriptor with the following\n * structure, which matches the descriptors returned from `parseArg`.\n * e.g. for `foo.bar.*`:\n * ```\n * trigger: {\n *   name: 'a.b',\n *   structured: true,\n *   wildcard: true\n * }\n * ```\n * If no trigger is given, the path is deemed to match.\n *\n * @param {string} path Path or property that changed\n * @param {DataTrigger} trigger Descriptor\n * @return {boolean} Whether the path matched the trigger\n */\nfunction pathMatchesTrigger(path, trigger) {\n  if (trigger) {\n    let triggerPath = trigger.name;\n    return (triggerPath == path) ||\n      (trigger.structured && isAncestor(triggerPath, path)) ||\n      (trigger.wildcard && isDescendant(triggerPath, path));\n  } else {\n    return true;\n  }\n}\n\n/**\n * Implements the \"observer\" effect.\n *\n * Calls the method with `info.methodName` on the instance, passing the\n * new and old values.\n *\n * @param {!PropertyEffectsType} inst The instance the effect will be run on\n * @param {string} property Name of property\n * @param {Object} props Bag of current property changes\n * @param {Object} oldProps Bag of previous values for changed properties\n * @param {?} info Effect metadata\n * @return {void}\n * @private\n */\nfunction runObserverEffect(inst, property, props, oldProps, info) {\n  let fn = typeof info.method === \"string\" ? inst[info.method] : info.method;\n  let changedProp = info.property;\n  if (fn) {\n    fn.call(inst, inst.__data[changedProp], oldProps[changedProp]);\n  } else if (!info.dynamicFn) {\n    console.warn('observer method `' + info.method + '` not defined');\n  }\n}\n\n/**\n * Runs \"notify\" effects for a set of changed properties.\n *\n * This method differs from the generic `runEffects` method in that it\n * will dispatch path notification events in the case that the property\n * changed was a path and the root property for that path didn't have a\n * \"notify\" effect.  This is to maintain 1.0 behavior that did not require\n * `notify: true` to ensure object sub-property notifications were\n * sent.\n *\n * @param {!PropertyEffectsType} inst The instance with effects to run\n * @param {Object} notifyProps Bag of properties to notify\n * @param {Object} props Bag of current property changes\n * @param {Object} oldProps Bag of previous values for changed properties\n * @param {boolean} hasPaths True with `props` contains one or more paths\n * @return {void}\n * @private\n */\nfunction runNotifyEffects(inst, notifyProps, props, oldProps, hasPaths) {\n  // Notify\n  let fxs = inst[TYPES.NOTIFY];\n  let notified;\n  let id = dedupeId++;\n  // Try normal notify effects; if none, fall back to try path notification\n  for (let prop in notifyProps) {\n    if (notifyProps[prop]) {\n      if (fxs && runEffectsForProperty(inst, fxs, id, prop, props, oldProps, hasPaths)) {\n        notified = true;\n      } else if (hasPaths && notifyPath(inst, prop, props)) {\n        notified = true;\n      }\n    }\n  }\n  // Flush host if we actually notified and host was batching\n  // And the host has already initialized clients; this prevents\n  // an issue with a host observing data changes before clients are ready.\n  let host;\n  if (notified && (host = inst.__dataHost) && host._invalidateProperties) {\n    host._invalidateProperties();\n  }\n}\n\n/**\n * Dispatches {property}-changed events with path information in the detail\n * object to indicate a sub-path of the property was changed.\n *\n * @param {!PropertyEffectsType} inst The element from which to fire the event\n * @param {string} path The path that was changed\n * @param {Object} props Bag of current property changes\n * @return {boolean} Returns true if the path was notified\n * @private\n */\nfunction notifyPath(inst, path, props) {\n  let rootProperty = root$0(path);\n  if (rootProperty !== path) {\n    let eventName = camelToDashCase$0(rootProperty) + '-changed';\n    dispatchNotifyEvent(inst, eventName, props[path], path);\n    return true;\n  }\n  return false;\n}\n\n/**\n * Dispatches {property}-changed events to indicate a property (or path)\n * changed.\n *\n * @param {!PropertyEffectsType} inst The element from which to fire the event\n * @param {string} eventName The name of the event to send ('{property}-changed')\n * @param {*} value The value of the changed property\n * @param {string | null | undefined} path If a sub-path of this property changed, the path\n *   that changed (optional).\n * @return {void}\n * @private\n * @suppress {invalidCasts}\n */\nfunction dispatchNotifyEvent(inst, eventName, value, path) {\n  let detail = {\n    value: value,\n    queueProperty: true\n  };\n  if (path) {\n    detail.path = path;\n  }\n  /** @type {!HTMLElement} */(inst).dispatchEvent(new CustomEvent(eventName, { detail }));\n}\n\n/**\n * Implements the \"notify\" effect.\n *\n * Dispatches a non-bubbling event named `info.eventName` on the instance\n * with a detail object containing the new `value`.\n *\n * @param {!PropertyEffectsType} inst The instance the effect will be run on\n * @param {string} property Name of property\n * @param {Object} props Bag of current property changes\n * @param {Object} oldProps Bag of previous values for changed properties\n * @param {?} info Effect metadata\n * @param {boolean} hasPaths True with `props` contains one or more paths\n * @return {void}\n * @private\n */\nfunction runNotifyEffect(inst, property, props, oldProps, info, hasPaths) {\n  let rootProperty = hasPaths ? root$0(property) : property;\n  let path = rootProperty != property ? property : null;\n  let value = path ? get$0(inst, path) : inst.__data[property];\n  if (path && value === undefined) {\n    value = props[property];  // specifically for .splices\n  }\n  dispatchNotifyEvent(inst, info.eventName, value, path);\n}\n\n/**\n * Handler function for 2-way notification events. Receives context\n * information captured in the `addNotifyListener` closure from the\n * `__notifyListeners` metadata.\n *\n * Sets the value of the notified property to the host property or path.  If\n * the event contained path information, translate that path to the host\n * scope's name for that path first.\n *\n * @param {CustomEvent} event Notification event (e.g. '<property>-changed')\n * @param {!PropertyEffectsType} inst Host element instance handling the notification event\n * @param {string} fromProp Child element property that was bound\n * @param {string} toPath Host property/path that was bound\n * @param {boolean} negate Whether the binding was negated\n * @return {void}\n * @private\n */\nfunction handleNotification(event, inst, fromProp, toPath, negate) {\n  let value;\n  let detail = /** @type {Object} */(event.detail);\n  let fromPath = detail && detail.path;\n  if (fromPath) {\n    toPath = translate(fromProp, toPath, fromPath);\n    value = detail && detail.value;\n  } else {\n    value = event.target[fromProp];\n  }\n  value = negate ? !value : value;\n  if (!inst[TYPES.READ_ONLY] || !inst[TYPES.READ_ONLY][toPath]) {\n    if (inst._setPendingPropertyOrPath(toPath, value, true, Boolean(fromPath))\n      && (!detail || !detail.queueProperty)) {\n      inst._invalidateProperties();\n    }\n  }\n}\n\n/**\n * Implements the \"reflect\" effect.\n *\n * Sets the attribute named `info.attrName` to the given property value.\n *\n * @param {!PropertyEffectsType} inst The instance the effect will be run on\n * @param {string} property Name of property\n * @param {Object} props Bag of current property changes\n * @param {Object} oldProps Bag of previous values for changed properties\n * @param {?} info Effect metadata\n * @return {void}\n * @private\n */\nfunction runReflectEffect(inst, property, props, oldProps, info) {\n  let value = inst.__data[property];\n  if (sanitizeDOMValue) {\n    value = sanitizeDOMValue(value, info.attrName, 'attribute', /** @type {Node} */(inst));\n  }\n  inst._propertyToAttribute(property, info.attrName, value);\n}\n\n/**\n * Runs \"computed\" effects for a set of changed properties.\n *\n * This method differs from the generic `runEffects` method in that it\n * continues to run computed effects based on the output of each pass until\n * there are no more newly computed properties.  This ensures that all\n * properties that will be computed by the initial set of changes are\n * computed before other effects (binding propagation, observers, and notify)\n * run.\n *\n * @param {!PropertyEffectsType} inst The instance the effect will be run on\n * @param {!Object} changedProps Bag of changed properties\n * @param {!Object} oldProps Bag of previous values for changed properties\n * @param {boolean} hasPaths True with `props` contains one or more paths\n * @return {void}\n * @private\n */\nfunction runComputedEffects(inst, changedProps, oldProps, hasPaths) {\n  let computeEffects = inst[TYPES.COMPUTE];\n  if (computeEffects) {\n    let inputProps = changedProps;\n    while (runEffects(inst, computeEffects, inputProps, oldProps, hasPaths)) {\n      Object.assign(oldProps, inst.__dataOld);\n      Object.assign(changedProps, inst.__dataPending);\n      inputProps = inst.__dataPending;\n      inst.__dataPending = null;\n    }\n  }\n}\n\n/**\n * Implements the \"computed property\" effect by running the method with the\n * values of the arguments specified in the `info` object and setting the\n * return value to the computed property specified.\n *\n * @param {!PropertyEffectsType} inst The instance the effect will be run on\n * @param {string} property Name of property\n * @param {Object} props Bag of current property changes\n * @param {Object} oldProps Bag of previous values for changed properties\n * @param {?} info Effect metadata\n * @return {void}\n * @private\n */\nfunction runComputedEffect(inst, property, props, oldProps, info) {\n  let result = runMethodEffect(inst, property, props, oldProps, info);\n  let computedProp = info.methodInfo;\n  if (inst.__dataHasAccessor && inst.__dataHasAccessor[computedProp]) {\n    inst._setPendingProperty(computedProp, result, true);\n  } else {\n    inst[computedProp] = result;\n  }\n}\n\n/**\n * Computes path changes based on path links set up using the `linkPaths`\n * API.\n *\n * @param {!PropertyEffectsType} inst The instance whose props are changing\n * @param {string | !Array<(string|number)>} path Path that has changed\n * @param {*} value Value of changed path\n * @return {void}\n * @private\n */\nfunction computeLinkedPaths(inst, path, value) {\n  let links = inst.__dataLinkedPaths;\n  if (links) {\n    let link;\n    for (let a in links) {\n      let b = links[a];\n      if (isDescendant(a, path)) {\n        link = translate(a, b, path);\n        inst._setPendingPropertyOrPath(link, value, true, true);\n      } else if (isDescendant(b, path)) {\n        link = translate(b, a, path);\n        inst._setPendingPropertyOrPath(link, value, true, true);\n      }\n    }\n  }\n}\n\n// -- bindings ----------------------------------------------\n\n/**\n * Adds binding metadata to the current `nodeInfo`, and binding effects\n * for all part dependencies to `templateInfo`.\n *\n * @param {Function} constructor Class that `_parseTemplate` is currently\n *   running on\n * @param {TemplateInfo} templateInfo Template metadata for current template\n * @param {NodeInfo} nodeInfo Node metadata for current template node\n * @param {string} kind Binding kind, either 'property', 'attribute', or 'text'\n * @param {string} target Target property name\n * @param {!Array<!BindingPart>} parts Array of binding part metadata\n * @param {string=} literal Literal text surrounding binding parts (specified\n *   only for 'property' bindings, since these must be initialized as part\n *   of boot-up)\n * @return {void}\n * @private\n */\nfunction addBinding(constructor, templateInfo, nodeInfo, kind, target, parts, literal) {\n  // Create binding metadata and add to nodeInfo\n  nodeInfo.bindings = nodeInfo.bindings || [];\n  let /** Binding */ binding = { kind, target, parts, literal, isCompound: (parts.length !== 1) };\n  nodeInfo.bindings.push(binding);\n  // Add listener info to binding metadata\n  if (shouldAddListener(binding)) {\n    let {event, negate} = binding.parts[0];\n    binding.listenerEvent = event || (CaseMap.camelToDashCase(target) + '-changed');\n    binding.listenerNegate = negate;\n  }\n  // Add \"propagate\" property effects to templateInfo\n  let index = templateInfo.nodeInfoList.length;\n  for (let i=0; i<binding.parts.length; i++) {\n    let part = binding.parts[i];\n    part.compoundIndex = i;\n    addEffectForBindingPart(constructor, templateInfo, binding, part, index);\n  }\n}\n\n/**\n * Adds property effects to the given `templateInfo` for the given binding\n * part.\n *\n * @param {Function} constructor Class that `_parseTemplate` is currently\n *   running on\n * @param {TemplateInfo} templateInfo Template metadata for current template\n * @param {!Binding} binding Binding metadata\n * @param {!BindingPart} part Binding part metadata\n * @param {number} index Index into `nodeInfoList` for this node\n * @return {void}\n */\nfunction addEffectForBindingPart(constructor, templateInfo, binding, part, index) {\n  if (!part.literal) {\n    if (binding.kind === 'attribute' && binding.target[0] === '-') {\n      console.warn('Cannot set attribute ' + binding.target +\n        ' because \"-\" is not a valid attribute starting character');\n    } else {\n      let dependencies = part.dependencies;\n      let info = { index, binding, part, evaluator: constructor };\n      for (let j=0; j<dependencies.length; j++) {\n        let trigger = dependencies[j];\n        if (typeof trigger == 'string') {\n          trigger = parseArg(trigger);\n          trigger.wildcard = true;\n        }\n        constructor._addTemplatePropertyEffect(templateInfo, trigger.rootProperty, {\n          fn: runBindingEffect,\n          info, trigger\n        });\n      }\n    }\n  }\n}\n\n/**\n * Implements the \"binding\" (property/path binding) effect.\n *\n * Note that binding syntax is overridable via `_parseBindings` and\n * `_evaluateBinding`.  This method will call `_evaluateBinding` for any\n * non-literal parts returned from `_parseBindings`.  However,\n * there is no support for _path_ bindings via custom binding parts,\n * as this is specific to Polymer's path binding syntax.\n *\n * @param {!PropertyEffectsType} inst The instance the effect will be run on\n * @param {string} path Name of property\n * @param {Object} props Bag of current property changes\n * @param {Object} oldProps Bag of previous values for changed properties\n * @param {?} info Effect metadata\n * @param {boolean} hasPaths True with `props` contains one or more paths\n * @param {Array} nodeList List of nodes associated with `nodeInfoList` template\n *   metadata\n * @return {void}\n * @private\n */\nfunction runBindingEffect(inst, path, props, oldProps, info, hasPaths, nodeList) {\n  let node = nodeList[info.index];\n  let binding = info.binding;\n  let part = info.part;\n  // Subpath notification: transform path and set to client\n  // e.g.: foo=\"{{obj.sub}}\", path: 'obj.sub.prop', set 'foo.prop'=obj.sub.prop\n  if (hasPaths && part.source && (path.length > part.source.length) &&\n      (binding.kind == 'property') && !binding.isCompound &&\n      node.__isPropertyEffectsClient &&\n      node.__dataHasAccessor && node.__dataHasAccessor[binding.target]) {\n    let value = props[path];\n    path = translate(part.source, binding.target, path);\n    if (node._setPendingPropertyOrPath(path, value, false, true)) {\n      inst._enqueueClient(node);\n    }\n  } else {\n    let value = info.evaluator._evaluateBinding(inst, part, path, props, oldProps, hasPaths);\n    // Propagate value to child\n    applyBindingValue(inst, node, binding, part, value);\n  }\n}\n\n/**\n * Sets the value for an \"binding\" (binding) effect to a node,\n * either as a property or attribute.\n *\n * @param {!PropertyEffectsType} inst The instance owning the binding effect\n * @param {Node} node Target node for binding\n * @param {!Binding} binding Binding metadata\n * @param {!BindingPart} part Binding part metadata\n * @param {*} value Value to set\n * @return {void}\n * @private\n */\nfunction applyBindingValue(inst, node, binding, part, value) {\n  value = computeBindingValue(node, value, binding, part);\n  if (sanitizeDOMValue) {\n    value = sanitizeDOMValue(value, binding.target, binding.kind, node);\n  }\n  if (binding.kind == 'attribute') {\n    // Attribute binding\n    inst._valueToNodeAttribute(/** @type {Element} */(node), value, binding.target);\n  } else {\n    // Property binding\n    let prop = binding.target;\n    if (node.__isPropertyEffectsClient &&\n        node.__dataHasAccessor && node.__dataHasAccessor[prop]) {\n      if (!node[TYPES.READ_ONLY] || !node[TYPES.READ_ONLY][prop]) {\n        if (node._setPendingProperty(prop, value)) {\n          inst._enqueueClient(node);\n        }\n      }\n    } else  {\n      inst._setUnmanagedPropertyToNode(node, prop, value);\n    }\n  }\n}\n\n/**\n * Transforms an \"binding\" effect value based on compound & negation\n * effect metadata, as well as handling for special-case properties\n *\n * @param {Node} node Node the value will be set to\n * @param {*} value Value to set\n * @param {!Binding} binding Binding metadata\n * @param {!BindingPart} part Binding part metadata\n * @return {*} Transformed value to set\n * @private\n */\nfunction computeBindingValue(node, value, binding, part) {\n  if (binding.isCompound) {\n    let storage = node.__dataCompoundStorage[binding.target];\n    storage[part.compoundIndex] = value;\n    value = storage.join('');\n  }\n  if (binding.kind !== 'attribute') {\n    // Some browsers serialize `undefined` to `\"undefined\"`\n    if (binding.target === 'textContent' ||\n        (binding.target === 'value' &&\n          (node.localName === 'input' || node.localName === 'textarea'))) {\n      value = value == undefined ? '' : value;\n    }\n  }\n  return value;\n}\n\n/**\n * Returns true if a binding's metadata meets all the requirements to allow\n * 2-way binding, and therefore a `<property>-changed` event listener should be\n * added:\n * - used curly braces\n * - is a property (not attribute) binding\n * - is not a textContent binding\n * - is not compound\n *\n * @param {!Binding} binding Binding metadata\n * @return {boolean} True if 2-way listener should be added\n * @private\n */\nfunction shouldAddListener(binding) {\n  return Boolean(binding.target) &&\n         binding.kind != 'attribute' &&\n         binding.kind != 'text' &&\n         !binding.isCompound &&\n         binding.parts[0].mode === '{';\n}\n\n/**\n * Setup compound binding storage structures, notify listeners, and dataHost\n * references onto the bound nodeList.\n *\n * @param {!PropertyEffectsType} inst Instance that bas been previously bound\n * @param {TemplateInfo} templateInfo Template metadata\n * @return {void}\n * @private\n */\nfunction setupBindings(inst, templateInfo) {\n  // Setup compound storage, dataHost, and notify listeners\n  let {nodeList, nodeInfoList} = templateInfo;\n  if (nodeInfoList.length) {\n    for (let i=0; i < nodeInfoList.length; i++) {\n      let info = nodeInfoList[i];\n      let node = nodeList[i];\n      let bindings = info.bindings;\n      if (bindings) {\n        for (let i=0; i<bindings.length; i++) {\n          let binding = bindings[i];\n          setupCompoundStorage(node, binding);\n          addNotifyListener(node, inst, binding);\n        }\n      }\n      node.__dataHost = inst;\n    }\n  }\n}\n\n/**\n * Initializes `__dataCompoundStorage` local storage on a bound node with\n * initial literal data for compound bindings, and sets the joined\n * literal parts to the bound property.\n *\n * When changes to compound parts occur, they are first set into the compound\n * storage array for that property, and then the array is joined to result in\n * the final value set to the property/attribute.\n *\n * @param {Node} node Bound node to initialize\n * @param {Binding} binding Binding metadata\n * @return {void}\n * @private\n */\nfunction setupCompoundStorage(node, binding) {\n  if (binding.isCompound) {\n    // Create compound storage map\n    let storage = node.__dataCompoundStorage ||\n      (node.__dataCompoundStorage = {});\n    let parts = binding.parts;\n    // Copy literals from parts into storage for this binding\n    let literals = new Array(parts.length);\n    for (let j=0; j<parts.length; j++) {\n      literals[j] = parts[j].literal;\n    }\n    let target = binding.target;\n    storage[target] = literals;\n    // Configure properties with their literal parts\n    if (binding.literal && binding.kind == 'property') {\n      node[target] = binding.literal;\n    }\n  }\n}\n\n/**\n * Adds a 2-way binding notification event listener to the node specified\n *\n * @param {Object} node Child element to add listener to\n * @param {!PropertyEffectsType} inst Host element instance to handle notification event\n * @param {Binding} binding Binding metadata\n * @return {void}\n * @private\n */\nfunction addNotifyListener(node, inst, binding) {\n  if (binding.listenerEvent) {\n    let part = binding.parts[0];\n    node.addEventListener(binding.listenerEvent, function(e) {\n      handleNotification(e, inst, binding.target, part.source, part.negate);\n    });\n  }\n}\n\n// -- for method-based effects (complexObserver & computed) --------------\n\n/**\n * Adds property effects for each argument in the method signature (and\n * optionally, for the method name if `dynamic` is true) that calls the\n * provided effect function.\n *\n * @param {Element | Object} model Prototype or instance\n * @param {!MethodSignature} sig Method signature metadata\n * @param {string} type Type of property effect to add\n * @param {Function} effectFn Function to run when arguments change\n * @param {*=} methodInfo Effect-specific information to be included in\n *   method effect metadata\n * @param {boolean|Object=} dynamicFn Boolean or object map indicating whether\n *   method names should be included as a dependency to the effect. Note,\n *   defaults to true if the signature is static (sig.static is true).\n * @return {void}\n * @private\n */\nfunction createMethodEffect(model, sig, type, effectFn, methodInfo, dynamicFn) {\n  dynamicFn = sig.static || (dynamicFn &&\n    (typeof dynamicFn !== 'object' || dynamicFn[sig.methodName]));\n  let info = {\n    methodName: sig.methodName,\n    args: sig.args,\n    methodInfo,\n    dynamicFn\n  };\n  for (let i=0, arg; (i<sig.args.length) && (arg=sig.args[i]); i++) {\n    if (!arg.literal) {\n      model._addPropertyEffect(arg.rootProperty, type, {\n        fn: effectFn, info: info, trigger: arg\n      });\n    }\n  }\n  if (dynamicFn) {\n    model._addPropertyEffect(sig.methodName, type, {\n      fn: effectFn, info: info\n    });\n  }\n}\n\n/**\n * Calls a method with arguments marshaled from properties on the instance\n * based on the method signature contained in the effect metadata.\n *\n * Multi-property observers, computed properties, and inline computing\n * functions call this function to invoke the method, then use the return\n * value accordingly.\n *\n * @param {!PropertyEffectsType} inst The instance the effect will be run on\n * @param {string} property Name of property\n * @param {Object} props Bag of current property changes\n * @param {Object} oldProps Bag of previous values for changed properties\n * @param {?} info Effect metadata\n * @return {*} Returns the return value from the method invocation\n * @private\n */\nfunction runMethodEffect(inst, property, props, oldProps, info) {\n  // Instances can optionally have a _methodHost which allows redirecting where\n  // to find methods. Currently used by `templatize`.\n  let context = inst._methodHost || inst;\n  let fn = context[info.methodName];\n  if (fn) {\n    let args = marshalArgs(inst.__data, info.args, property, props);\n    return fn.apply(context, args);\n  } else if (!info.dynamicFn) {\n    console.warn('method `' + info.methodName + '` not defined');\n  }\n}\n\nconst emptyArray = [];\n\n// Regular expressions used for binding\nconst IDENT  = '(?:' + '[a-zA-Z_$][\\\\w.:$\\\\-*]*' + ')';\nconst NUMBER = '(?:' + '[-+]?[0-9]*\\\\.?[0-9]+(?:[eE][-+]?[0-9]+)?' + ')';\nconst SQUOTE_STRING = '(?:' + '\\'(?:[^\\'\\\\\\\\]|\\\\\\\\.)*\\'' + ')';\nconst DQUOTE_STRING = '(?:' + '\"(?:[^\"\\\\\\\\]|\\\\\\\\.)*\"' + ')';\nconst STRING = '(?:' + SQUOTE_STRING + '|' + DQUOTE_STRING + ')';\nconst ARGUMENT = '(?:(' + IDENT + '|' + NUMBER + '|' +  STRING + ')\\\\s*' + ')';\nconst ARGUMENTS = '(?:' + ARGUMENT + '(?:,\\\\s*' + ARGUMENT + ')*' + ')';\nconst ARGUMENT_LIST = '(?:' + '\\\\(\\\\s*' +\n                              '(?:' + ARGUMENTS + '?' + ')' +\n                            '\\\\)\\\\s*' + ')';\nconst BINDING = '(' + IDENT + '\\\\s*' + ARGUMENT_LIST + '?' + ')'; // Group 3\nconst OPEN_BRACKET = '(\\\\[\\\\[|{{)' + '\\\\s*';\nconst CLOSE_BRACKET = '(?:]]|}})';\nconst NEGATE = '(?:(!)\\\\s*)?'; // Group 2\nconst EXPRESSION = OPEN_BRACKET + NEGATE + BINDING + CLOSE_BRACKET;\nconst bindingRegex = new RegExp(EXPRESSION, \"g\");\n\n/**\n * Create a string from binding parts of all the literal parts\n *\n * @param {!Array<BindingPart>} parts All parts to stringify\n * @return {string} String made from the literal parts\n */\nfunction literalFromParts(parts) {\n  let s = '';\n  for (let i=0; i<parts.length; i++) {\n    let literal = parts[i].literal;\n    s += literal || '';\n  }\n  return s;\n}\n\n/**\n * Parses an expression string for a method signature, and returns a metadata\n * describing the method in terms of `methodName`, `static` (whether all the\n * arguments are literals), and an array of `args`\n *\n * @param {string} expression The expression to parse\n * @return {?MethodSignature} The method metadata object if a method expression was\n *   found, otherwise `undefined`\n * @private\n */\nfunction parseMethod(expression) {\n  // tries to match valid javascript property names\n  let m = expression.match(/([^\\s]+?)\\(([\\s\\S]*)\\)/);\n  if (m) {\n    let methodName = m[1];\n    let sig = { methodName, static: true, args: emptyArray };\n    if (m[2].trim()) {\n      // replace escaped commas with comma entity, split on un-escaped commas\n      let args = m[2].replace(/\\\\,/g, '&comma;').split(',');\n      return parseArgs(args, sig);\n    } else {\n      return sig;\n    }\n  }\n  return null;\n}\n\n/**\n * Parses an array of arguments and sets the `args` property of the supplied\n * signature metadata object. Sets the `static` property to false if any\n * argument is a non-literal.\n *\n * @param {!Array<string>} argList Array of argument names\n * @param {!MethodSignature} sig Method signature metadata object\n * @return {!MethodSignature} The updated signature metadata object\n * @private\n */\nfunction parseArgs(argList, sig) {\n  sig.args = argList.map(function(rawArg) {\n    let arg = parseArg(rawArg);\n    if (!arg.literal) {\n      sig.static = false;\n    }\n    return arg;\n  }, this);\n  return sig;\n}\n\n/**\n * Parses an individual argument, and returns an argument metadata object\n * with the following fields:\n *\n *   {\n *     value: 'prop',        // property/path or literal value\n *     literal: false,       // whether argument is a literal\n *     structured: false,    // whether the property is a path\n *     rootProperty: 'prop', // the root property of the path\n *     wildcard: false       // whether the argument was a wildcard '.*' path\n *   }\n *\n * @param {string} rawArg The string value of the argument\n * @return {!MethodArg} Argument metadata object\n * @private\n */\nfunction parseArg(rawArg) {\n  // clean up whitespace\n  let arg = rawArg.trim()\n    // replace comma entity with comma\n    .replace(/&comma;/g, ',')\n    // repair extra escape sequences; note only commas strictly need\n    // escaping, but we allow any other char to be escaped since its\n    // likely users will do this\n    .replace(/\\\\(.)/g, '\\$1')\n    ;\n  // basic argument descriptor\n  let a = {\n    name: arg,\n    value: '',\n    literal: false\n  };\n  // detect literal value (must be String or Number)\n  let fc = arg[0];\n  if (fc === '-') {\n    fc = arg[1];\n  }\n  if (fc >= '0' && fc <= '9') {\n    fc = '#';\n  }\n  switch(fc) {\n    case \"'\":\n    case '\"':\n      a.value = arg.slice(1, -1);\n      a.literal = true;\n      break;\n    case '#':\n      a.value = Number(arg);\n      a.literal = true;\n      break;\n  }\n  // if not literal, look for structured path\n  if (!a.literal) {\n    a.rootProperty = root$0(arg);\n    // detect structured path (has dots)\n    a.structured = isPath$0(arg);\n    if (a.structured) {\n      a.wildcard = (arg.slice(-2) == '.*');\n      if (a.wildcard) {\n        a.name = arg.slice(0, -2);\n      }\n    }\n  }\n  return a;\n}\n\n/**\n * Gather the argument values for a method specified in the provided array\n * of argument metadata.\n *\n * The `path` and `value` arguments are used to fill in wildcard descriptor\n * when the method is being called as a result of a path notification.\n *\n * @param {Object} data Instance data storage object to read properties from\n * @param {!Array<!MethodArg>} args Array of argument metadata\n * @param {string} path Property/path name that triggered the method effect\n * @param {Object} props Bag of current property changes\n * @return {Array<*>} Array of argument values\n * @private\n */\nfunction marshalArgs(data, args, path, props) {\n  let values = [];\n  for (let i=0, l=args.length; i<l; i++) {\n    let arg = args[i];\n    let name = arg.name;\n    let v;\n    if (arg.literal) {\n      v = arg.value;\n    } else {\n      if (arg.structured) {\n        v = get$0(data, name);\n        // when data is not stored e.g. `splices`\n        if (v === undefined) {\n          v = props[name];\n        }\n      } else {\n        v = data[name];\n      }\n    }\n    if (arg.wildcard) {\n      // Only send the actual path changed info if the change that\n      // caused the observer to run matched the wildcard\n      let baseChanged = (name.indexOf(path + '.') === 0);\n      let matches = (path.indexOf(name) === 0 && !baseChanged);\n      values[i] = {\n        path: matches ? path : name,\n        value: matches ? props[path] : v,\n        base: v\n      };\n    } else {\n      values[i] = v;\n    }\n  }\n  return values;\n}\n\n// data api\n\n/**\n * Sends array splice notifications (`.splices` and `.length`)\n *\n * Note: this implementation only accepts normalized paths\n *\n * @param {!PropertyEffectsType} inst Instance to send notifications to\n * @param {Array} array The array the mutations occurred on\n * @param {string} path The path to the array that was mutated\n * @param {Array} splices Array of splice records\n * @return {void}\n * @private\n */\nfunction notifySplices(inst, array, path, splices) {\n  let splicesPath = path + '.splices';\n  inst.notifyPath(splicesPath, { indexSplices: splices });\n  inst.notifyPath(path + '.length', array.length);\n  // Null here to allow potentially large splice records to be GC'ed.\n  inst.__data[splicesPath] = {indexSplices: null};\n}\n\n/**\n * Creates a splice record and sends an array splice notification for\n * the described mutation\n *\n * Note: this implementation only accepts normalized paths\n *\n * @param {!PropertyEffectsType} inst Instance to send notifications to\n * @param {Array} array The array the mutations occurred on\n * @param {string} path The path to the array that was mutated\n * @param {number} index Index at which the array mutation occurred\n * @param {number} addedCount Number of added items\n * @param {Array} removed Array of removed items\n * @return {void}\n * @private\n */\nfunction notifySplice(inst, array, path, index, addedCount, removed) {\n  notifySplices(inst, array, path, [{\n    index: index,\n    addedCount: addedCount,\n    removed: removed,\n    object: array,\n    type: 'splice'\n  }]);\n}\n\n/**\n * Returns an upper-cased version of the string.\n *\n * @param {string} name String to uppercase\n * @return {string} Uppercased string\n * @private\n */\nfunction upper(name) {\n  return name[0].toUpperCase() + name.substring(1);\n}\n\n/**\n * Element class mixin that provides meta-programming for Polymer's template\n * binding and data observation (collectively, \"property effects\") system.\n *\n * This mixin uses provides the following key static methods for adding\n * property effects to an element class:\n * - `addPropertyEffect`\n * - `createPropertyObserver`\n * - `createMethodObserver`\n * - `createNotifyingProperty`\n * - `createReadOnlyProperty`\n * - `createReflectedProperty`\n * - `createComputedProperty`\n * - `bindTemplate`\n *\n * Each method creates one or more property accessors, along with metadata\n * used by this mixin's implementation of `_propertiesChanged` to perform\n * the property effects.\n *\n * Underscored versions of the above methods also exist on the element\n * prototype for adding property effects on instances at runtime.\n *\n * Note that this mixin overrides several `PropertyAccessors` methods, in\n * many cases to maintain guarantees provided by the Polymer 1.x features;\n * notably it changes property accessors to be synchronous by default\n * whereas the default when using `PropertyAccessors` standalone is to be\n * async by default.\n *\n * @mixinFunction\n * @polymer\n * @appliesMixin TemplateStamp\n * @appliesMixin PropertyAccessors\n * @summary Element class mixin that provides meta-programming for Polymer's\n * template binding and data observation system.\n */\nexport const PropertyEffects = dedupingMixin(superClass => {\n\n  /**\n   * @constructor\n   * @extends {superClass}\n   * @implements {Polymer_PropertyAccessors}\n   * @implements {Polymer_TemplateStamp}\n   * @unrestricted\n   */\n  const propertyEffectsBase = TemplateStamp(PropertyAccessors(superClass));\n\n  /**\n   * @polymer\n   * @mixinClass\n   * @implements {Polymer_PropertyEffects}\n   * @extends {propertyEffectsBase}\n   * @unrestricted\n   */\n  class PropertyEffects extends propertyEffectsBase {\n\n    constructor() {\n      super();\n      /** @type {boolean} */\n      // Used to identify users of this mixin, ala instanceof\n      this.__isPropertyEffectsClient = true;\n      /** @type {number} */\n      // NOTE: used to track re-entrant calls to `_flushProperties`\n      // path changes dirty check against `__dataTemp` only during one \"turn\"\n      // and are cleared when `__dataCounter` returns to 0.\n      this.__dataCounter = 0;\n      /** @type {boolean} */\n      this.__dataClientsReady;\n      /** @type {Array} */\n      this.__dataPendingClients;\n      /** @type {Object} */\n      this.__dataToNotify;\n      /** @type {Object} */\n      this.__dataLinkedPaths;\n      /** @type {boolean} */\n      this.__dataHasPaths;\n      /** @type {Object} */\n      this.__dataCompoundStorage;\n      /** @type {Polymer_PropertyEffects} */\n      this.__dataHost;\n      /** @type {!Object} */\n      this.__dataTemp;\n      /** @type {boolean} */\n      this.__dataClientsInitialized;\n      /** @type {!Object} */\n      this.__data;\n      /** @type {!Object} */\n      this.__dataPending;\n      /** @type {!Object} */\n      this.__dataOld;\n      /** @type {Object} */\n      this.__computeEffects;\n      /** @type {Object} */\n      this.__reflectEffects;\n      /** @type {Object} */\n      this.__notifyEffects;\n      /** @type {Object} */\n      this.__propagateEffects;\n      /** @type {Object} */\n      this.__observeEffects;\n      /** @type {Object} */\n      this.__readOnly;\n      /** @type {!TemplateInfo} */\n      this.__templateInfo;\n    }\n\n    get PROPERTY_EFFECT_TYPES() {\n      return TYPES;\n    }\n\n    /**\n     * @return {void}\n     */\n    _initializeProperties() {\n      super._initializeProperties();\n      hostStack.registerHost(this);\n      this.__dataClientsReady = false;\n      this.__dataPendingClients = null;\n      this.__dataToNotify = null;\n      this.__dataLinkedPaths = null;\n      this.__dataHasPaths = false;\n      // May be set on instance prior to upgrade\n      this.__dataCompoundStorage = this.__dataCompoundStorage || null;\n      this.__dataHost = this.__dataHost || null;\n      this.__dataTemp = {};\n      this.__dataClientsInitialized = false;\n    }\n\n    /**\n     * Overrides `PropertyAccessors` implementation to provide a\n     * more efficient implementation of initializing properties from\n     * the prototype on the instance.\n     *\n     * @override\n     * @param {Object} props Properties to initialize on the prototype\n     * @return {void}\n     */\n    _initializeProtoProperties(props) {\n      this.__data = Object.create(props);\n      this.__dataPending = Object.create(props);\n      this.__dataOld = {};\n    }\n\n    /**\n     * Overrides `PropertyAccessors` implementation to avoid setting\n     * `_setProperty`'s `shouldNotify: true`.\n     *\n     * @override\n     * @param {Object} props Properties to initialize on the instance\n     * @return {void}\n     */\n    _initializeInstanceProperties(props) {\n      let readOnly = this[TYPES.READ_ONLY];\n      for (let prop in props) {\n        if (!readOnly || !readOnly[prop]) {\n          this.__dataPending = this.__dataPending || {};\n          this.__dataOld = this.__dataOld || {};\n          this.__data[prop] = this.__dataPending[prop] = props[prop];\n        }\n      }\n    }\n\n    // Prototype setup ----------------------------------------\n\n    /**\n     * Equivalent to static `addPropertyEffect` API but can be called on\n     * an instance to add effects at runtime.  See that method for\n     * full API docs.\n     *\n     * @param {string} property Property that should trigger the effect\n     * @param {string} type Effect type, from this.PROPERTY_EFFECT_TYPES\n     * @param {Object=} effect Effect metadata object\n     * @return {void}\n     * @protected\n     */\n    _addPropertyEffect(property, type, effect) {\n      this._createPropertyAccessor(property, type == TYPES.READ_ONLY);\n      // effects are accumulated into arrays per property based on type\n      let effects = ensureOwnEffectMap(this, type)[property];\n      if (!effects) {\n        effects = this[type][property] = [];\n      }\n      effects.push(effect);\n    }\n\n    /**\n     * Removes the given property effect.\n     *\n     * @param {string} property Property the effect was associated with\n     * @param {string} type Effect type, from this.PROPERTY_EFFECT_TYPES\n     * @param {Object=} effect Effect metadata object to remove\n     * @return {void}\n     */\n    _removePropertyEffect(property, type, effect) {\n      let effects = ensureOwnEffectMap(this, type)[property];\n      let idx = effects.indexOf(effect);\n      if (idx >= 0) {\n        effects.splice(idx, 1);\n      }\n    }\n\n    /**\n     * Returns whether the current prototype/instance has a property effect\n     * of a certain type.\n     *\n     * @param {string} property Property name\n     * @param {string=} type Effect type, from this.PROPERTY_EFFECT_TYPES\n     * @return {boolean} True if the prototype/instance has an effect of this type\n     * @protected\n     */\n    _hasPropertyEffect(property, type) {\n      let effects = this[type];\n      return Boolean(effects && effects[property]);\n    }\n\n    /**\n     * Returns whether the current prototype/instance has a \"read only\"\n     * accessor for the given property.\n     *\n     * @param {string} property Property name\n     * @return {boolean} True if the prototype/instance has an effect of this type\n     * @protected\n     */\n    _hasReadOnlyEffect(property) {\n      return this._hasPropertyEffect(property, TYPES.READ_ONLY);\n    }\n\n    /**\n     * Returns whether the current prototype/instance has a \"notify\"\n     * property effect for the given property.\n     *\n     * @param {string} property Property name\n     * @return {boolean} True if the prototype/instance has an effect of this type\n     * @protected\n     */\n    _hasNotifyEffect(property) {\n      return this._hasPropertyEffect(property, TYPES.NOTIFY);\n    }\n\n    /**\n     * Returns whether the current prototype/instance has a \"reflect to attribute\"\n     * property effect for the given property.\n     *\n     * @param {string} property Property name\n     * @return {boolean} True if the prototype/instance has an effect of this type\n     * @protected\n     */\n    _hasReflectEffect(property) {\n      return this._hasPropertyEffect(property, TYPES.REFLECT);\n    }\n\n    /**\n     * Returns whether the current prototype/instance has a \"computed\"\n     * property effect for the given property.\n     *\n     * @param {string} property Property name\n     * @return {boolean} True if the prototype/instance has an effect of this type\n     * @protected\n     */\n    _hasComputedEffect(property) {\n      return this._hasPropertyEffect(property, TYPES.COMPUTE);\n    }\n\n    // Runtime ----------------------------------------\n\n    /**\n     * Sets a pending property or path.  If the root property of the path in\n     * question had no accessor, the path is set, otherwise it is enqueued\n     * via `_setPendingProperty`.\n     *\n     * This function isolates relatively expensive functionality necessary\n     * for the public API (`set`, `setProperties`, `notifyPath`, and property\n     * change listeners via {{...}} bindings), such that it is only done\n     * when paths enter the system, and not at every propagation step.  It\n     * also sets a `__dataHasPaths` flag on the instance which is used to\n     * fast-path slower path-matching code in the property effects host paths.\n     *\n     * `path` can be a path string or array of path parts as accepted by the\n     * public API.\n     *\n     * @param {string | !Array<number|string>} path Path to set\n     * @param {*} value Value to set\n     * @param {boolean=} shouldNotify Set to true if this change should\n     *  cause a property notification event dispatch\n     * @param {boolean=} isPathNotification If the path being set is a path\n     *   notification of an already changed value, as opposed to a request\n     *   to set and notify the change.  In the latter `false` case, a dirty\n     *   check is performed and then the value is set to the path before\n     *   enqueuing the pending property change.\n     * @return {boolean} Returns true if the property/path was enqueued in\n     *   the pending changes bag.\n     * @protected\n     */\n    _setPendingPropertyOrPath(path, value, shouldNotify, isPathNotification) {\n      if (isPathNotification ||\n          root$0(Array.isArray(path) ? path[0] : path) !== path) {\n        // Dirty check changes being set to a path against the actual object,\n        // since this is the entry point for paths into the system; from here\n        // the only dirty checks are against the `__dataTemp` cache to prevent\n        // duplicate work in the same turn only. Note, if this was a notification\n        // of a change already set to a path (isPathNotification: true),\n        // we always let the change through and skip the `set` since it was\n        // already dirty checked at the point of entry and the underlying\n        // object has already been updated\n        if (!isPathNotification) {\n          let old = get$0(this, path);\n          path = /** @type {string} */ (set$0(this, path, value));\n          // Use property-accessor's simpler dirty check\n          if (!path || !super._shouldPropertyChange(path, value, old)) {\n            return false;\n          }\n        }\n        this.__dataHasPaths = true;\n        if (this._setPendingProperty(/**@type{string}*/(path), value, shouldNotify)) {\n          computeLinkedPaths(this, path, value);\n          return true;\n        }\n      } else {\n        if (this.__dataHasAccessor && this.__dataHasAccessor[path]) {\n          return this._setPendingProperty(/**@type{string}*/(path), value, shouldNotify);\n        } else {\n          this[path] = value;\n        }\n      }\n      return false;\n    }\n\n    /**\n     * Applies a value to a non-Polymer element/node's property.\n     *\n     * The implementation makes a best-effort at binding interop:\n     * Some native element properties have side-effects when\n     * re-setting the same value (e.g. setting `<input>.value` resets the\n     * cursor position), so we do a dirty-check before setting the value.\n     * However, for better interop with non-Polymer custom elements that\n     * accept objects, we explicitly re-set object changes coming from the\n     * Polymer world (which may include deep object changes without the\n     * top reference changing), erring on the side of providing more\n     * information.\n     *\n     * Users may override this method to provide alternate approaches.\n     *\n     * @param {!Node} node The node to set a property on\n     * @param {string} prop The property to set\n     * @param {*} value The value to set\n     * @return {void}\n     * @protected\n     */\n    _setUnmanagedPropertyToNode(node, prop, value) {\n      // It is a judgment call that resetting primitives is\n      // \"bad\" and resettings objects is also \"good\"; alternatively we could\n      // implement a whitelist of tag & property values that should never\n      // be reset (e.g. <input>.value && <select>.value)\n      if (value !== node[prop] || typeof value == 'object') {\n        node[prop] = value;\n      }\n    }\n\n    /**\n     * Overrides the `PropertiesChanged` implementation to introduce special\n     * dirty check logic depending on the property & value being set:\n     *\n     * 1. Any value set to a path (e.g. 'obj.prop': 42 or 'obj.prop': {...})\n     *    Stored in `__dataTemp`, dirty checked against `__dataTemp`\n     * 2. Object set to simple property (e.g. 'prop': {...})\n     *    Stored in `__dataTemp` and `__data`, dirty checked against\n     *    `__dataTemp` by default implementation of `_shouldPropertyChange`\n     * 3. Primitive value set to simple property (e.g. 'prop': 42)\n     *    Stored in `__data`, dirty checked against `__data`\n     *\n     * The dirty-check is important to prevent cycles due to two-way\n     * notification, but paths and objects are only dirty checked against any\n     * previous value set during this turn via a \"temporary cache\" that is\n     * cleared when the last `_propertiesChanged` exits. This is so:\n     * a. any cached array paths (e.g. 'array.3.prop') may be invalidated\n     *    due to array mutations like shift/unshift/splice; this is fine\n     *    since path changes are dirty-checked at user entry points like `set`\n     * b. dirty-checking for objects only lasts one turn to allow the user\n     *    to mutate the object in-place and re-set it with the same identity\n     *    and have all sub-properties re-propagated in a subsequent turn.\n     *\n     * The temp cache is not necessarily sufficient to prevent invalid array\n     * paths, since a splice can happen during the same turn (with pathological\n     * user code); we could introduce a \"fixup\" for temporarily cached array\n     * paths if needed: https://github.com/Polymer/polymer/issues/4227\n     *\n     * @override\n     * @param {string} property Name of the property\n     * @param {*} value Value to set\n     * @param {boolean=} shouldNotify True if property should fire notification\n     *   event (applies only for `notify: true` properties)\n     * @return {boolean} Returns true if the property changed\n     */\n    _setPendingProperty(property, value, shouldNotify) {\n      let isPath = this.__dataHasPaths && isPath$0(property);\n      let prevProps = isPath ? this.__dataTemp : this.__data;\n      if (this._shouldPropertyChange(property, value, prevProps[property])) {\n        if (!this.__dataPending) {\n          this.__dataPending = {};\n          this.__dataOld = {};\n        }\n        // Ensure old is captured from the last turn\n        if (!(property in this.__dataOld)) {\n          this.__dataOld[property] = this.__data[property];\n        }\n        // Paths are stored in temporary cache (cleared at end of turn),\n        // which is used for dirty-checking, all others stored in __data\n        if (isPath) {\n          this.__dataTemp[property] = value;\n        } else {\n          this.__data[property] = value;\n        }\n        // All changes go into pending property bag, passed to _propertiesChanged\n        this.__dataPending[property] = value;\n        // Track properties that should notify separately\n        if (isPath || (this[TYPES.NOTIFY] && this[TYPES.NOTIFY][property])) {\n          this.__dataToNotify = this.__dataToNotify || {};\n          this.__dataToNotify[property] = shouldNotify;\n        }\n        return true;\n      }\n      return false;\n    }\n\n    /**\n     * Overrides base implementation to ensure all accessors set `shouldNotify`\n     * to true, for per-property notification tracking.\n     *\n     * @override\n     * @param {string} property Name of the property\n     * @param {*} value Value to set\n     * @return {void}\n     */\n    _setProperty(property, value) {\n      if (this._setPendingProperty(property, value, true)) {\n        this._invalidateProperties();\n      }\n    }\n\n    /**\n     * Overrides `PropertyAccessor`'s default async queuing of\n     * `_propertiesChanged`: if `__dataReady` is false (has not yet been\n     * manually flushed), the function no-ops; otherwise flushes\n     * `_propertiesChanged` synchronously.\n     *\n     * @override\n     * @return {void}\n     */\n    _invalidateProperties() {\n      if (this.__dataReady) {\n        this._flushProperties();\n      }\n    }\n\n    /**\n     * Enqueues the given client on a list of pending clients, whose\n     * pending property changes can later be flushed via a call to\n     * `_flushClients`.\n     *\n     * @param {Object} client PropertyEffects client to enqueue\n     * @return {void}\n     * @protected\n     */\n    _enqueueClient(client) {\n      this.__dataPendingClients = this.__dataPendingClients || [];\n      if (client !== this) {\n        this.__dataPendingClients.push(client);\n      }\n    }\n\n    /**\n     * Overrides superclass implementation.\n     *\n     * @return {void}\n     * @protected\n     */\n    _flushProperties() {\n      this.__dataCounter++;\n      super._flushProperties();\n      this.__dataCounter--;\n    }\n\n    /**\n     * Flushes any clients previously enqueued via `_enqueueClient`, causing\n     * their `_flushProperties` method to run.\n     *\n     * @return {void}\n     * @protected\n     */\n    _flushClients() {\n      if (!this.__dataClientsReady) {\n        this.__dataClientsReady = true;\n        this._readyClients();\n        // Override point where accessors are turned on; importantly,\n        // this is after clients have fully readied, providing a guarantee\n        // that any property effects occur only after all clients are ready.\n        this.__dataReady = true;\n      } else {\n        this.__enableOrFlushClients();\n      }\n    }\n\n    // NOTE: We ensure clients either enable or flush as appropriate. This\n    // handles two corner cases:\n    // (1) clients flush properly when connected/enabled before the host\n    // enables; e.g.\n    //   (a) Templatize stamps with no properties and does not flush and\n    //   (b) the instance is inserted into dom and\n    //   (c) then the instance flushes.\n    // (2) clients enable properly when not connected/enabled when the host\n    // flushes; e.g.\n    //   (a) a template is runtime stamped and not yet connected/enabled\n    //   (b) a host sets a property, causing stamped dom to flush\n    //   (c) the stamped dom enables.\n    __enableOrFlushClients() {\n      let clients = this.__dataPendingClients;\n      if (clients) {\n        this.__dataPendingClients = null;\n        for (let i=0; i < clients.length; i++) {\n          let client = clients[i];\n          if (!client.__dataEnabled) {\n            client._enableProperties();\n          } else if (client.__dataPending) {\n            client._flushProperties();\n          }\n        }\n      }\n    }\n\n    /**\n     * Perform any initial setup on client dom. Called before the first\n     * `_flushProperties` call on client dom and before any element\n     * observers are called.\n     *\n     * @return {void}\n     * @protected\n     */\n    _readyClients() {\n      this.__enableOrFlushClients();\n    }\n\n    /**\n     * Sets a bag of property changes to this instance, and\n     * synchronously processes all effects of the properties as a batch.\n     *\n     * Property names must be simple properties, not paths.  Batched\n     * path propagation is not supported.\n     *\n     * @param {Object} props Bag of one or more key-value pairs whose key is\n     *   a property and value is the new value to set for that property.\n     * @param {boolean=} setReadOnly When true, any private values set in\n     *   `props` will be set. By default, `setProperties` will not set\n     *   `readOnly: true` root properties.\n     * @return {void}\n     * @public\n     */\n    setProperties(props, setReadOnly) {\n      for (let path in props) {\n        if (setReadOnly || !this[TYPES.READ_ONLY] || !this[TYPES.READ_ONLY][path]) {\n          //TODO(kschaaf): explicitly disallow paths in setProperty?\n          // wildcard observers currently only pass the first changed path\n          // in the `info` object, and you could do some odd things batching\n          // paths, e.g. {'foo.bar': {...}, 'foo': null}\n          this._setPendingPropertyOrPath(path, props[path], true);\n        }\n      }\n      this._invalidateProperties();\n    }\n\n    /**\n     * Overrides `PropertyAccessors` so that property accessor\n     * side effects are not enabled until after client dom is fully ready.\n     * Also calls `_flushClients` callback to ensure client dom is enabled\n     * that was not enabled as a result of flushing properties.\n     *\n     * @override\n     * @return {void}\n     */\n    ready() {\n      // It is important that `super.ready()` is not called here as it\n      // immediately turns on accessors. Instead, we wait until `readyClients`\n      // to enable accessors to provide a guarantee that clients are ready\n      // before processing any accessors side effects.\n      this._flushProperties();\n      // If no data was pending, `_flushProperties` will not `flushClients`\n      // so ensure this is done.\n      if (!this.__dataClientsReady) {\n        this._flushClients();\n      }\n      // Before ready, client notifications do not trigger _flushProperties.\n      // Therefore a flush is necessary here if data has been set.\n      if (this.__dataPending) {\n        this._flushProperties();\n      }\n    }\n\n    /**\n     * Implements `PropertyAccessors`'s properties changed callback.\n     *\n     * Runs each class of effects for the batch of changed properties in\n     * a specific order (compute, propagate, reflect, observe, notify).\n     *\n     * @param {!Object} currentProps Bag of all current accessor values\n     * @param {!Object} changedProps Bag of properties changed since the last\n     *   call to `_propertiesChanged`\n     * @param {!Object} oldProps Bag of previous values for each property\n     *   in `changedProps`\n     * @return {void}\n     */\n    _propertiesChanged(currentProps, changedProps, oldProps) {\n      // ----------------------------\n      // let c = Object.getOwnPropertyNames(changedProps || {});\n      // window.debug && console.group(this.localName + '#' + this.id + ': ' + c);\n      // if (window.debug) { debugger; }\n      // ----------------------------\n      let hasPaths = this.__dataHasPaths;\n      this.__dataHasPaths = false;\n      // Compute properties\n      runComputedEffects(this, changedProps, oldProps, hasPaths);\n      // Clear notify properties prior to possible reentry (propagate, observe),\n      // but after computing effects have a chance to add to them\n      let notifyProps = this.__dataToNotify;\n      this.__dataToNotify = null;\n      // Propagate properties to clients\n      this._propagatePropertyChanges(changedProps, oldProps, hasPaths);\n      // Flush clients\n      this._flushClients();\n      // Reflect properties\n      runEffects(this, this[TYPES.REFLECT], changedProps, oldProps, hasPaths);\n      // Observe properties\n      runEffects(this, this[TYPES.OBSERVE], changedProps, oldProps, hasPaths);\n      // Notify properties to host\n      if (notifyProps) {\n        runNotifyEffects(this, notifyProps, changedProps, oldProps, hasPaths);\n      }\n      // Clear temporary cache at end of turn\n      if (this.__dataCounter == 1) {\n        this.__dataTemp = {};\n      }\n      // ----------------------------\n      // window.debug && console.groupEnd(this.localName + '#' + this.id + ': ' + c);\n      // ----------------------------\n    }\n\n    /**\n     * Called to propagate any property changes to stamped template nodes\n     * managed by this element.\n     *\n     * @param {Object} changedProps Bag of changed properties\n     * @param {Object} oldProps Bag of previous values for changed properties\n     * @param {boolean} hasPaths True with `props` contains one or more paths\n     * @return {void}\n     * @protected\n     */\n    _propagatePropertyChanges(changedProps, oldProps, hasPaths) {\n      if (this[TYPES.PROPAGATE]) {\n        runEffects(this, this[TYPES.PROPAGATE], changedProps, oldProps, hasPaths);\n      }\n      let templateInfo = this.__templateInfo;\n      while (templateInfo) {\n        runEffects(this, templateInfo.propertyEffects, changedProps, oldProps,\n          hasPaths, templateInfo.nodeList);\n        templateInfo = templateInfo.nextTemplateInfo;\n      }\n    }\n\n    /**\n     * Aliases one data path as another, such that path notifications from one\n     * are routed to the other.\n     *\n     * @param {string | !Array<string|number>} to Target path to link.\n     * @param {string | !Array<string|number>} from Source path to link.\n     * @return {void}\n     * @public\n     */\n    linkPaths(to, from) {\n      to = normalize(to);\n      from = normalize(from);\n      this.__dataLinkedPaths = this.__dataLinkedPaths || {};\n      this.__dataLinkedPaths[to] = from;\n    }\n\n    /**\n     * Removes a data path alias previously established with `_linkPaths`.\n     *\n     * Note, the path to unlink should be the target (`to`) used when\n     * linking the paths.\n     *\n     * @param {string | !Array<string|number>} path Target path to unlink.\n     * @return {void}\n     * @public\n     */\n    unlinkPaths(path) {\n      path = normalize(path);\n      if (this.__dataLinkedPaths) {\n        delete this.__dataLinkedPaths[path];\n      }\n    }\n\n    /**\n     * Notify that an array has changed.\n     *\n     * Example:\n     *\n     *     this.items = [ {name: 'Jim'}, {name: 'Todd'}, {name: 'Bill'} ];\n     *     ...\n     *     this.items.splice(1, 1, {name: 'Sam'});\n     *     this.items.push({name: 'Bob'});\n     *     this.notifySplices('items', [\n     *       { index: 1, removed: [{name: 'Todd'}], addedCount: 1, object: this.items, type: 'splice' },\n     *       { index: 3, removed: [], addedCount: 1, object: this.items, type: 'splice'}\n     *     ]);\n     *\n     * @param {string} path Path that should be notified.\n     * @param {Array} splices Array of splice records indicating ordered\n     *   changes that occurred to the array. Each record should have the\n     *   following fields:\n     *    * index: index at which the change occurred\n     *    * removed: array of items that were removed from this index\n     *    * addedCount: number of new items added at this index\n     *    * object: a reference to the array in question\n     *    * type: the string literal 'splice'\n     *\n     *   Note that splice records _must_ be normalized such that they are\n     *   reported in index order (raw results from `Object.observe` are not\n     *   ordered and must be normalized/merged before notifying).\n     * @return {void}\n     * @public\n    */\n    notifySplices(path, splices) {\n      let info = {path: ''};\n      let array = /** @type {Array} */(get$0(this, path, info));\n      notifySplices(this, array, info.path, splices);\n    }\n\n    /**\n     * Convenience method for reading a value from a path.\n     *\n     * Note, if any part in the path is undefined, this method returns\n     * `undefined` (this method does not throw when dereferencing undefined\n     * paths).\n     *\n     * @param {(string|!Array<(string|number)>)} path Path to the value\n     *   to read.  The path may be specified as a string (e.g. `foo.bar.baz`)\n     *   or an array of path parts (e.g. `['foo.bar', 'baz']`).  Note that\n     *   bracketed expressions are not supported; string-based path parts\n     *   *must* be separated by dots.  Note that when dereferencing array\n     *   indices, the index may be used as a dotted part directly\n     *   (e.g. `users.12.name` or `['users', 12, 'name']`).\n     * @param {Object=} root Root object from which the path is evaluated.\n     * @return {*} Value at the path, or `undefined` if any part of the path\n     *   is undefined.\n     * @public\n     */\n    get(path, root) {\n      return get$0(root || this, path);\n    }\n\n    /**\n     * Convenience method for setting a value to a path and notifying any\n     * elements bound to the same path.\n     *\n     * Note, if any part in the path except for the last is undefined,\n     * this method does nothing (this method does not throw when\n     * dereferencing undefined paths).\n     *\n     * @param {(string|!Array<(string|number)>)} path Path to the value\n     *   to write.  The path may be specified as a string (e.g. `'foo.bar.baz'`)\n     *   or an array of path parts (e.g. `['foo.bar', 'baz']`).  Note that\n     *   bracketed expressions are not supported; string-based path parts\n     *   *must* be separated by dots.  Note that when dereferencing array\n     *   indices, the index may be used as a dotted part directly\n     *   (e.g. `'users.12.name'` or `['users', 12, 'name']`).\n     * @param {*} value Value to set at the specified path.\n     * @param {Object=} root Root object from which the path is evaluated.\n     *   When specified, no notification will occur.\n     * @return {void}\n     * @public\n    */\n    set(path, value, root) {\n      if (root) {\n        set$0(root, path, value);\n      } else {\n        if (!this[TYPES.READ_ONLY] || !this[TYPES.READ_ONLY][/** @type {string} */(path)]) {\n          if (this._setPendingPropertyOrPath(path, value, true)) {\n            this._invalidateProperties();\n          }\n        }\n      }\n    }\n\n    /**\n     * Adds items onto the end of the array at the path specified.\n     *\n     * The arguments after `path` and return value match that of\n     * `Array.prototype.push`.\n     *\n     * This method notifies other paths to the same array that a\n     * splice occurred to the array.\n     *\n     * @param {string | !Array<string|number>} path Path to array.\n     * @param {...*} items Items to push onto array\n     * @return {number} New length of the array.\n     * @public\n     */\n    push(path, ...items) {\n      let info = {path: ''};\n      let array = /** @type {Array}*/(get$0(this, path, info));\n      let len = array.length;\n      let ret = array.push(...items);\n      if (items.length) {\n        notifySplice(this, array, info.path, len, items.length, []);\n      }\n      return ret;\n    }\n\n    /**\n     * Removes an item from the end of array at the path specified.\n     *\n     * The arguments after `path` and return value match that of\n     * `Array.prototype.pop`.\n     *\n     * This method notifies other paths to the same array that a\n     * splice occurred to the array.\n     *\n     * @param {string | !Array<string|number>} path Path to array.\n     * @return {*} Item that was removed.\n     * @public\n     */\n    pop(path) {\n      let info = {path: ''};\n      let array = /** @type {Array} */(get$0(this, path, info));\n      let hadLength = Boolean(array.length);\n      let ret = array.pop();\n      if (hadLength) {\n        notifySplice(this, array, info.path, array.length, 0, [ret]);\n      }\n      return ret;\n    }\n\n    /**\n     * Starting from the start index specified, removes 0 or more items\n     * from the array and inserts 0 or more new items in their place.\n     *\n     * The arguments after `path` and return value match that of\n     * `Array.prototype.splice`.\n     *\n     * This method notifies other paths to the same array that a\n     * splice occurred to the array.\n     *\n     * @param {string | !Array<string|number>} path Path to array.\n     * @param {number} start Index from which to start removing/inserting.\n     * @param {number} deleteCount Number of items to remove.\n     * @param {...*} items Items to insert into array.\n     * @return {Array} Array of removed items.\n     * @public\n     */\n    splice(path, start, deleteCount, ...items) {\n      let info = {path : ''};\n      let array = /** @type {Array} */(get$0(this, path, info));\n      // Normalize fancy native splice handling of crazy start values\n      if (start < 0) {\n        start = array.length - Math.floor(-start);\n      } else if (start) {\n        start = Math.floor(start);\n      }\n      // array.splice does different things based on the number of arguments\n      // you pass in. Therefore, array.splice(0) and array.splice(0, undefined)\n      // do different things. In the former, the whole array is cleared. In the\n      // latter, no items are removed.\n      // This means that we need to detect whether 1. one of the arguments\n      // is actually passed in and then 2. determine how many arguments\n      // we should pass on to the native array.splice\n      //\n      let ret;\n      // Omit any additional arguments if they were not passed in\n      if (arguments.length === 2) {\n        ret = array.splice(start);\n      // Either start was undefined and the others were defined, but in this\n      // case we can safely pass on all arguments\n      //\n      // Note: this includes the case where none of the arguments were passed in,\n      // e.g. this.splice('array'). However, if both start and deleteCount\n      // are undefined, array.splice will not modify the array (as expected)\n      } else {\n        ret = array.splice(start, deleteCount, ...items);\n      }\n      // At the end, check whether any items were passed in (e.g. insertions)\n      // or if the return array contains items (e.g. deletions).\n      // Only notify if items were added or deleted.\n      if (items.length || ret.length) {\n        notifySplice(this, array, info.path, start, items.length, ret);\n      }\n      return ret;\n    }\n\n    /**\n     * Removes an item from the beginning of array at the path specified.\n     *\n     * The arguments after `path` and return value match that of\n     * `Array.prototype.pop`.\n     *\n     * This method notifies other paths to the same array that a\n     * splice occurred to the array.\n     *\n     * @param {string | !Array<string|number>} path Path to array.\n     * @return {*} Item that was removed.\n     * @public\n     */\n    shift(path) {\n      let info = {path: ''};\n      let array = /** @type {Array} */(get$0(this, path, info));\n      let hadLength = Boolean(array.length);\n      let ret = array.shift();\n      if (hadLength) {\n        notifySplice(this, array, info.path, 0, 0, [ret]);\n      }\n      return ret;\n    }\n\n    /**\n     * Adds items onto the beginning of the array at the path specified.\n     *\n     * The arguments after `path` and return value match that of\n     * `Array.prototype.push`.\n     *\n     * This method notifies other paths to the same array that a\n     * splice occurred to the array.\n     *\n     * @param {string | !Array<string|number>} path Path to array.\n     * @param {...*} items Items to insert info array\n     * @return {number} New length of the array.\n     * @public\n     */\n    unshift(path, ...items) {\n      let info = {path: ''};\n      let array = /** @type {Array} */(get$0(this, path, info));\n      let ret = array.unshift(...items);\n      if (items.length) {\n        notifySplice(this, array, info.path, 0, items.length, []);\n      }\n      return ret;\n    }\n\n    /**\n     * Notify that a path has changed.\n     *\n     * Example:\n     *\n     *     this.item.user.name = 'Bob';\n     *     this.notifyPath('item.user.name');\n     *\n     * @param {string} path Path that should be notified.\n     * @param {*=} value Value at the path (optional).\n     * @return {void}\n     * @public\n    */\n    notifyPath(path, value) {\n      /** @type {string} */\n      let propPath;\n      if (arguments.length == 1) {\n        // Get value if not supplied\n        let info = {path: ''};\n        value = get$0(this, path, info);\n        propPath = info.path;\n      } else if (Array.isArray(path)) {\n        // Normalize path if needed\n        propPath = normalize(path);\n      } else {\n        propPath = /** @type{string} */(path);\n      }\n      if (this._setPendingPropertyOrPath(propPath, value, true, true)) {\n        this._invalidateProperties();\n      }\n    }\n\n    /**\n     * Equivalent to static `createReadOnlyProperty` API but can be called on\n     * an instance to add effects at runtime.  See that method for\n     * full API docs.\n     *\n     * @param {string} property Property name\n     * @param {boolean=} protectedSetter Creates a custom protected setter\n     *   when `true`.\n     * @return {void}\n     * @protected\n     */\n    _createReadOnlyProperty(property, protectedSetter) {\n      this._addPropertyEffect(property, TYPES.READ_ONLY);\n      if (protectedSetter) {\n        this['_set' + upper(property)] = /** @this {PropertyEffects} */function(value) {\n          this._setProperty(property, value);\n        };\n      }\n    }\n\n    /**\n     * Equivalent to static `createPropertyObserver` API but can be called on\n     * an instance to add effects at runtime.  See that method for\n     * full API docs.\n     *\n     * @param {string} property Property name\n     * @param {string|function(*,*)} method Function or name of observer method to call\n     * @param {boolean=} dynamicFn Whether the method name should be included as\n     *   a dependency to the effect.\n     * @return {void}\n     * @protected\n     */\n    _createPropertyObserver(property, method, dynamicFn) {\n      let info = { property, method, dynamicFn: Boolean(dynamicFn) };\n      this._addPropertyEffect(property, TYPES.OBSERVE, {\n        fn: runObserverEffect, info, trigger: {name: property}\n      });\n      if (dynamicFn) {\n        this._addPropertyEffect(/** @type {string} */(method), TYPES.OBSERVE, {\n          fn: runObserverEffect, info, trigger: {name: method}\n        });\n      }\n    }\n\n    /**\n     * Equivalent to static `createMethodObserver` API but can be called on\n     * an instance to add effects at runtime.  See that method for\n     * full API docs.\n     *\n     * @param {string} expression Method expression\n     * @param {boolean|Object=} dynamicFn Boolean or object map indicating\n     *   whether method names should be included as a dependency to the effect.\n     * @return {void}\n     * @protected\n     */\n    _createMethodObserver(expression, dynamicFn) {\n      let sig = parseMethod(expression);\n      if (!sig) {\n        throw new Error(\"Malformed observer expression '\" + expression + \"'\");\n      }\n      createMethodEffect(this, sig, TYPES.OBSERVE, runMethodEffect, null, dynamicFn);\n    }\n\n    /**\n     * Equivalent to static `createNotifyingProperty` API but can be called on\n     * an instance to add effects at runtime.  See that method for\n     * full API docs.\n     *\n     * @param {string} property Property name\n     * @return {void}\n     * @protected\n     */\n    _createNotifyingProperty(property) {\n      this._addPropertyEffect(property, TYPES.NOTIFY, {\n        fn: runNotifyEffect,\n        info: {\n          eventName: CaseMap.camelToDashCase(property) + '-changed',\n          property: property\n        }\n      });\n    }\n\n    /**\n     * Equivalent to static `createReflectedProperty` API but can be called on\n     * an instance to add effects at runtime.  See that method for\n     * full API docs.\n     *\n     * @param {string} property Property name\n     * @return {void}\n     * @protected\n     */\n    _createReflectedProperty(property) {\n      let attr = this.constructor.attributeNameForProperty(property);\n      if (attr[0] === '-') {\n        console.warn('Property ' + property + ' cannot be reflected to attribute ' +\n          attr + ' because \"-\" is not a valid starting attribute name. Use a lowercase first letter for the property instead.');\n      } else {\n        this._addPropertyEffect(property, TYPES.REFLECT, {\n          fn: runReflectEffect,\n          info: {\n            attrName: attr\n          }\n        });\n      }\n    }\n\n    /**\n     * Equivalent to static `createComputedProperty` API but can be called on\n     * an instance to add effects at runtime.  See that method for\n     * full API docs.\n     *\n     * @param {string} property Name of computed property to set\n     * @param {string} expression Method expression\n     * @param {boolean|Object=} dynamicFn Boolean or object map indicating\n     *   whether method names should be included as a dependency to the effect.\n     * @return {void}\n     * @protected\n     */\n    _createComputedProperty(property, expression, dynamicFn) {\n      let sig = parseMethod(expression);\n      if (!sig) {\n        throw new Error(\"Malformed computed expression '\" + expression + \"'\");\n      }\n      createMethodEffect(this, sig, TYPES.COMPUTE, runComputedEffect, property, dynamicFn);\n    }\n\n    // -- static class methods ------------\n\n    /**\n     * Ensures an accessor exists for the specified property, and adds\n     * to a list of \"property effects\" that will run when the accessor for\n     * the specified property is set.  Effects are grouped by \"type\", which\n     * roughly corresponds to a phase in effect processing.  The effect\n     * metadata should be in the following form:\n     *\n     *     {\n     *       fn: effectFunction, // Reference to function to call to perform effect\n     *       info: { ... }       // Effect metadata passed to function\n     *       trigger: {          // Optional triggering metadata; if not provided\n     *         name: string      // the property is treated as a wildcard\n     *         structured: boolean\n     *         wildcard: boolean\n     *       }\n     *     }\n     *\n     * Effects are called from `_propertiesChanged` in the following order by\n     * type:\n     *\n     * 1. COMPUTE\n     * 2. PROPAGATE\n     * 3. REFLECT\n     * 4. OBSERVE\n     * 5. NOTIFY\n     *\n     * Effect functions are called with the following signature:\n     *\n     *     effectFunction(inst, path, props, oldProps, info, hasPaths)\n     *\n     * @param {string} property Property that should trigger the effect\n     * @param {string} type Effect type, from this.PROPERTY_EFFECT_TYPES\n     * @param {Object=} effect Effect metadata object\n     * @return {void}\n     * @protected\n     */\n    static addPropertyEffect(property, type, effect) {\n      this.prototype._addPropertyEffect(property, type, effect);\n    }\n\n    /**\n     * Creates a single-property observer for the given property.\n     *\n     * @param {string} property Property name\n     * @param {string|function(*,*)} method Function or name of observer method to call\n     * @param {boolean=} dynamicFn Whether the method name should be included as\n     *   a dependency to the effect.\n     * @return {void}\n     * @protected\n     */\n    static createPropertyObserver(property, method, dynamicFn) {\n      this.prototype._createPropertyObserver(property, method, dynamicFn);\n    }\n\n    /**\n     * Creates a multi-property \"method observer\" based on the provided\n     * expression, which should be a string in the form of a normal JavaScript\n     * function signature: `'methodName(arg1, [..., argn])'`.  Each argument\n     * should correspond to a property or path in the context of this\n     * prototype (or instance), or may be a literal string or number.\n     *\n     * @param {string} expression Method expression\n     * @param {boolean|Object=} dynamicFn Boolean or object map indicating\n     * @return {void}\n     *   whether method names should be included as a dependency to the effect.\n     * @protected\n     */\n    static createMethodObserver(expression, dynamicFn) {\n      this.prototype._createMethodObserver(expression, dynamicFn);\n    }\n\n    /**\n     * Causes the setter for the given property to dispatch `<property>-changed`\n     * events to notify of changes to the property.\n     *\n     * @param {string} property Property name\n     * @return {void}\n     * @protected\n     */\n    static createNotifyingProperty(property) {\n      this.prototype._createNotifyingProperty(property);\n    }\n\n    /**\n     * Creates a read-only accessor for the given property.\n     *\n     * To set the property, use the protected `_setProperty` API.\n     * To create a custom protected setter (e.g. `_setMyProp()` for\n     * property `myProp`), pass `true` for `protectedSetter`.\n     *\n     * Note, if the property will have other property effects, this method\n     * should be called first, before adding other effects.\n     *\n     * @param {string} property Property name\n     * @param {boolean=} protectedSetter Creates a custom protected setter\n     *   when `true`.\n     * @return {void}\n     * @protected\n     */\n    static createReadOnlyProperty(property, protectedSetter) {\n      this.prototype._createReadOnlyProperty(property, protectedSetter);\n    }\n\n    /**\n     * Causes the setter for the given property to reflect the property value\n     * to a (dash-cased) attribute of the same name.\n     *\n     * @param {string} property Property name\n     * @return {void}\n     * @protected\n     */\n    static createReflectedProperty(property) {\n      this.prototype._createReflectedProperty(property);\n    }\n\n    /**\n     * Creates a computed property whose value is set to the result of the\n     * method described by the given `expression` each time one or more\n     * arguments to the method changes.  The expression should be a string\n     * in the form of a normal JavaScript function signature:\n     * `'methodName(arg1, [..., argn])'`\n     *\n     * @param {string} property Name of computed property to set\n     * @param {string} expression Method expression\n     * @param {boolean|Object=} dynamicFn Boolean or object map indicating whether\n     *   method names should be included as a dependency to the effect.\n     * @return {void}\n     * @protected\n     */\n    static createComputedProperty(property, expression, dynamicFn) {\n      this.prototype._createComputedProperty(property, expression, dynamicFn);\n    }\n\n    /**\n     * Parses the provided template to ensure binding effects are created\n     * for them, and then ensures property accessors are created for any\n     * dependent properties in the template.  Binding effects for bound\n     * templates are stored in a linked list on the instance so that\n     * templates can be efficiently stamped and unstamped.\n     *\n     * @param {!HTMLTemplateElement} template Template containing binding\n     *   bindings\n     * @return {!TemplateInfo} Template metadata object\n     * @protected\n     */\n    static bindTemplate(template) {\n      return this.prototype._bindTemplate(template);\n    }\n\n    // -- binding ----------------------------------------------\n\n    /**\n     * Equivalent to static `bindTemplate` API but can be called on\n     * an instance to add effects at runtime.  See that method for\n     * full API docs.\n     *\n     * This method may be called on the prototype (for prototypical template\n     * binding, to avoid creating accessors every instance) once per prototype,\n     * and will be called with `runtimeBinding: true` by `_stampTemplate` to\n     * create and link an instance of the template metadata associated with a\n     * particular stamping.\n     *\n     * @param {!HTMLTemplateElement} template Template containing binding\n     *   bindings\n     * @param {boolean=} instanceBinding When false (default), performs\n     *   \"prototypical\" binding of the template and overwrites any previously\n     *   bound template for the class. When true (as passed from\n     *   `_stampTemplate`), the template info is instanced and linked into\n     *   the list of bound templates.\n     * @return {!TemplateInfo} Template metadata object; for `runtimeBinding`,\n     *   this is an instance of the prototypical template info\n     * @protected\n     */\n    _bindTemplate(template, instanceBinding) {\n      let templateInfo = this.constructor._parseTemplate(template);\n      let wasPreBound = this.__templateInfo == templateInfo;\n      // Optimization: since this is called twice for proto-bound templates,\n      // don't attempt to recreate accessors if this template was pre-bound\n      if (!wasPreBound) {\n        for (let prop in templateInfo.propertyEffects) {\n          this._createPropertyAccessor(prop);\n        }\n      }\n      if (instanceBinding) {\n        // For instance-time binding, create instance of template metadata\n        // and link into list of templates if necessary\n        templateInfo = /** @type {!TemplateInfo} */(Object.create(templateInfo));\n        templateInfo.wasPreBound = wasPreBound;\n        if (!wasPreBound && this.__templateInfo) {\n          let last = this.__templateInfoLast || this.__templateInfo;\n          this.__templateInfoLast = last.nextTemplateInfo = templateInfo;\n          templateInfo.previousTemplateInfo = last;\n          return templateInfo;\n        }\n      }\n      return this.__templateInfo = templateInfo;\n    }\n\n    /**\n     * Adds a property effect to the given template metadata, which is run\n     * at the \"propagate\" stage of `_propertiesChanged` when the template\n     * has been bound to the element via `_bindTemplate`.\n     *\n     * The `effect` object should match the format in `_addPropertyEffect`.\n     *\n     * @param {Object} templateInfo Template metadata to add effect to\n     * @param {string} prop Property that should trigger the effect\n     * @param {Object=} effect Effect metadata object\n     * @return {void}\n     * @protected\n     */\n    static _addTemplatePropertyEffect(templateInfo, prop, effect) {\n      let hostProps = templateInfo.hostProps = templateInfo.hostProps || {};\n      hostProps[prop] = true;\n      let effects = templateInfo.propertyEffects = templateInfo.propertyEffects || {};\n      let propEffects = effects[prop] = effects[prop] || [];\n      propEffects.push(effect);\n    }\n\n    /**\n     * Stamps the provided template and performs instance-time setup for\n     * Polymer template features, including data bindings, declarative event\n     * listeners, and the `this.$` map of `id`'s to nodes.  A document fragment\n     * is returned containing the stamped DOM, ready for insertion into the\n     * DOM.\n     *\n     * This method may be called more than once; however note that due to\n     * `shadycss` polyfill limitations, only styles from templates prepared\n     * using `ShadyCSS.prepareTemplate` will be correctly polyfilled (scoped\n     * to the shadow root and support CSS custom properties), and note that\n     * `ShadyCSS.prepareTemplate` may only be called once per element. As such,\n     * any styles required by in runtime-stamped templates must be included\n     * in the main element template.\n     *\n     * @param {!HTMLTemplateElement} template Template to stamp\n     * @return {!StampedTemplate} Cloned template content\n     * @override\n     * @protected\n     */\n    _stampTemplate(template) {\n      // Ensures that created dom is `_enqueueClient`'d to this element so\n      // that it can be flushed on next call to `_flushProperties`\n      hostStack.beginHosting(this);\n      let dom = super._stampTemplate(template);\n      hostStack.endHosting(this);\n      let templateInfo = /** @type {!TemplateInfo} */(this._bindTemplate(template, true));\n      // Add template-instance-specific data to instanced templateInfo\n      templateInfo.nodeList = dom.nodeList;\n      // Capture child nodes to allow unstamping of non-prototypical templates\n      if (!templateInfo.wasPreBound) {\n        let nodes = templateInfo.childNodes = [];\n        for (let n=dom.firstChild; n; n=n.nextSibling) {\n          nodes.push(n);\n        }\n      }\n      dom.templateInfo = templateInfo;\n      // Setup compound storage, 2-way listeners, and dataHost for bindings\n      setupBindings(this, templateInfo);\n      // Flush properties into template nodes if already booted\n      if (this.__dataReady) {\n        runEffects(this, templateInfo.propertyEffects, this.__data, null,\n          false, templateInfo.nodeList);\n      }\n      return dom;\n    }\n\n    /**\n     * Removes and unbinds the nodes previously contained in the provided\n     * DocumentFragment returned from `_stampTemplate`.\n     *\n     * @param {!StampedTemplate} dom DocumentFragment previously returned\n     *   from `_stampTemplate` associated with the nodes to be removed\n     * @return {void}\n     * @protected\n     */\n    _removeBoundDom(dom) {\n      // Unlink template info\n      let templateInfo = dom.templateInfo;\n      if (templateInfo.previousTemplateInfo) {\n        templateInfo.previousTemplateInfo.nextTemplateInfo =\n          templateInfo.nextTemplateInfo;\n      }\n      if (templateInfo.nextTemplateInfo) {\n        templateInfo.nextTemplateInfo.previousTemplateInfo =\n          templateInfo.previousTemplateInfo;\n      }\n      if (this.__templateInfoLast == templateInfo) {\n        this.__templateInfoLast = templateInfo.previousTemplateInfo;\n      }\n      templateInfo.previousTemplateInfo = templateInfo.nextTemplateInfo = null;\n      // Remove stamped nodes\n      let nodes = templateInfo.childNodes;\n      for (let i=0; i<nodes.length; i++) {\n        let node = nodes[i];\n        node.parentNode.removeChild(node);\n      }\n    }\n\n    /**\n     * Overrides default `TemplateStamp` implementation to add support for\n     * parsing bindings from `TextNode`'s' `textContent`.  A `bindings`\n     * array is added to `nodeInfo` and populated with binding metadata\n     * with information capturing the binding target, and a `parts` array\n     * with one or more metadata objects capturing the source(s) of the\n     * binding.\n     *\n     * @override\n     * @param {Node} node Node to parse\n     * @param {TemplateInfo} templateInfo Template metadata for current template\n     * @param {NodeInfo} nodeInfo Node metadata for current template node\n     * @return {boolean} `true` if the visited node added node-specific\n     *   metadata to `nodeInfo`\n     * @protected\n     * @suppress {missingProperties} Interfaces in closure do not inherit statics, but classes do\n     */\n    static _parseTemplateNode(node, templateInfo, nodeInfo) {\n      let noted = super._parseTemplateNode(node, templateInfo, nodeInfo);\n      if (node.nodeType === Node.TEXT_NODE) {\n        let parts = this._parseBindings(node.textContent, templateInfo);\n        if (parts) {\n          // Initialize the textContent with any literal parts\n          // NOTE: default to a space here so the textNode remains; some browsers\n          // (IE) omit an empty textNode following cloneNode/importNode.\n          node.textContent = literalFromParts(parts) || ' ';\n          addBinding(this, templateInfo, nodeInfo, 'text', 'textContent', parts);\n          noted = true;\n        }\n      }\n      return noted;\n    }\n\n    /**\n     * Overrides default `TemplateStamp` implementation to add support for\n     * parsing bindings from attributes.  A `bindings`\n     * array is added to `nodeInfo` and populated with binding metadata\n     * with information capturing the binding target, and a `parts` array\n     * with one or more metadata objects capturing the source(s) of the\n     * binding.\n     *\n     * @override\n     * @param {Element} node Node to parse\n     * @param {TemplateInfo} templateInfo Template metadata for current template\n     * @param {NodeInfo} nodeInfo Node metadata for current template node\n     * @param {string} name Attribute name\n     * @param {string} value Attribute value\n     * @return {boolean} `true` if the visited node added node-specific\n     *   metadata to `nodeInfo`\n     * @protected\n     * @suppress {missingProperties} Interfaces in closure do not inherit statics, but classes do\n     */\n    static _parseTemplateNodeAttribute(node, templateInfo, nodeInfo, name, value) {\n      let parts = this._parseBindings(value, templateInfo);\n      if (parts) {\n        // Attribute or property\n        let origName = name;\n        let kind = 'property';\n        // The only way we see a capital letter here is if the attr has\n        // a capital letter in it per spec. In this case, to make sure\n        // this binding works, we go ahead and make the binding to the attribute.\n        if (capitalAttributeRegex.test(name)) {\n          kind = 'attribute';\n        } else if (name[name.length-1] == '$') {\n          name = name.slice(0, -1);\n          kind = 'attribute';\n        }\n        // Initialize attribute bindings with any literal parts\n        let literal = literalFromParts(parts);\n        if (literal && kind == 'attribute') {\n          node.setAttribute(name, literal);\n        }\n        // Clear attribute before removing, since IE won't allow removing\n        // `value` attribute if it previously had a value (can't\n        // unconditionally set '' before removing since attributes with `$`\n        // can't be set using setAttribute)\n        if (node.localName === 'input' && origName === 'value') {\n          node.setAttribute(origName, '');\n        }\n        // Remove annotation\n        node.removeAttribute(origName);\n        // Case hackery: attributes are lower-case, but bind targets\n        // (properties) are case sensitive. Gambit is to map dash-case to\n        // camel-case: `foo-bar` becomes `fooBar`.\n        // Attribute bindings are excepted.\n        if (kind === 'property') {\n          name = dashToCamelCase(name);\n        }\n        addBinding(this, templateInfo, nodeInfo, kind, name, parts, literal);\n        return true;\n      } else {\n        return super._parseTemplateNodeAttribute(node, templateInfo, nodeInfo, name, value);\n      }\n    }\n\n    /**\n     * Overrides default `TemplateStamp` implementation to add support for\n     * binding the properties that a nested template depends on to the template\n     * as `_host_<property>`.\n     *\n     * @override\n     * @param {Node} node Node to parse\n     * @param {TemplateInfo} templateInfo Template metadata for current template\n     * @param {NodeInfo} nodeInfo Node metadata for current template node\n     * @return {boolean} `true` if the visited node added node-specific\n     *   metadata to `nodeInfo`\n     * @protected\n     * @suppress {missingProperties} Interfaces in closure do not inherit statics, but classes do\n     */\n    static _parseTemplateNestedTemplate(node, templateInfo, nodeInfo) {\n      let noted = super._parseTemplateNestedTemplate(node, templateInfo, nodeInfo);\n      // Merge host props into outer template and add bindings\n      let hostProps = nodeInfo.templateInfo.hostProps;\n      let mode = '{';\n      for (let source in hostProps) {\n        let parts = [{ mode, source, dependencies: [source] }];\n        addBinding(this, templateInfo, nodeInfo, 'property', '_host_' + source, parts);\n      }\n      return noted;\n    }\n\n    /**\n     * Called to parse text in a template (either attribute values or\n     * textContent) into binding metadata.\n     *\n     * Any overrides of this method should return an array of binding part\n     * metadata  representing one or more bindings found in the provided text\n     * and any \"literal\" text in between.  Any non-literal parts will be passed\n     * to `_evaluateBinding` when any dependencies change.  The only required\n     * fields of each \"part\" in the returned array are as follows:\n     *\n     * - `dependencies` - Array containing trigger metadata for each property\n     *   that should trigger the binding to update\n     * - `literal` - String containing text if the part represents a literal;\n     *   in this case no `dependencies` are needed\n     *\n     * Additional metadata for use by `_evaluateBinding` may be provided in\n     * each part object as needed.\n     *\n     * The default implementation handles the following types of bindings\n     * (one or more may be intermixed with literal strings):\n     * - Property binding: `[[prop]]`\n     * - Path binding: `[[object.prop]]`\n     * - Negated property or path bindings: `[[!prop]]` or `[[!object.prop]]`\n     * - Two-way property or path bindings (supports negation):\n     *   `{{prop}}`, `{{object.prop}}`, `{{!prop}}` or `{{!object.prop}}`\n     * - Inline computed method (supports negation):\n     *   `[[compute(a, 'literal', b)]]`, `[[!compute(a, 'literal', b)]]`\n     *\n     * The default implementation uses a regular expression for best\n     * performance. However, the regular expression uses a white-list of\n     * allowed characters in a data-binding, which causes problems for\n     * data-bindings that do use characters not in this white-list.\n     *\n     * Instead of updating the white-list with all allowed characters,\n     * there is a StrictBindingParser (see lib/mixins/strict-binding-parser)\n     * that uses a state machine instead. This state machine is able to handle\n     * all characters. However, it is slightly less performant, therefore we\n     * extracted it into a separate optional mixin.\n     *\n     * @param {string} text Text to parse from attribute or textContent\n     * @param {Object} templateInfo Current template metadata\n     * @return {Array<!BindingPart>} Array of binding part metadata\n     * @protected\n     */\n    static _parseBindings(text, templateInfo) {\n      let parts = [];\n      let lastIndex = 0;\n      let m;\n      // Example: \"literal1{{prop}}literal2[[!compute(foo,bar)]]final\"\n      // Regex matches:\n      //        Iteration 1:  Iteration 2:\n      // m[1]: '{{'          '[['\n      // m[2]: ''            '!'\n      // m[3]: 'prop'        'compute(foo,bar)'\n      while ((m = bindingRegex.exec(text)) !== null) {\n        // Add literal part\n        if (m.index > lastIndex) {\n          parts.push({literal: text.slice(lastIndex, m.index)});\n        }\n        // Add binding part\n        let mode = m[1][0];\n        let negate = Boolean(m[2]);\n        let source = m[3].trim();\n        let customEvent = false, notifyEvent = '', colon = -1;\n        if (mode == '{' && (colon = source.indexOf('::')) > 0) {\n          notifyEvent = source.substring(colon + 2);\n          source = source.substring(0, colon);\n          customEvent = true;\n        }\n        let signature = parseMethod(source);\n        let dependencies = [];\n        if (signature) {\n          // Inline computed function\n          let {args, methodName} = signature;\n          for (let i=0; i<args.length; i++) {\n            let arg = args[i];\n            if (!arg.literal) {\n              dependencies.push(arg);\n            }\n          }\n          let dynamicFns = templateInfo.dynamicFns;\n          if (dynamicFns && dynamicFns[methodName] || signature.static) {\n            dependencies.push(methodName);\n            signature.dynamicFn = true;\n          }\n        } else {\n          // Property or path\n          dependencies.push(source);\n        }\n        parts.push({\n          source, mode, negate, customEvent, signature, dependencies,\n          event: notifyEvent\n        });\n        lastIndex = bindingRegex.lastIndex;\n      }\n      // Add a final literal part\n      if (lastIndex && lastIndex < text.length) {\n        let literal = text.substring(lastIndex);\n        if (literal) {\n          parts.push({\n            literal: literal\n          });\n        }\n      }\n      if (parts.length) {\n        return parts;\n      } else {\n        return null;\n      }\n    }\n\n    /**\n     * Called to evaluate a previously parsed binding part based on a set of\n     * one or more changed dependencies.\n     *\n     * @param {this} inst Element that should be used as scope for\n     *   binding dependencies\n     * @param {BindingPart} part Binding part metadata\n     * @param {string} path Property/path that triggered this effect\n     * @param {Object} props Bag of current property changes\n     * @param {Object} oldProps Bag of previous values for changed properties\n     * @param {boolean} hasPaths True with `props` contains one or more paths\n     * @return {*} Value the binding part evaluated to\n     * @protected\n     */\n    static _evaluateBinding(inst, part, path, props, oldProps, hasPaths) {\n      let value;\n      if (part.signature) {\n        value = runMethodEffect(inst, path, props, oldProps, part.signature);\n      } else if (path != part.source) {\n        value = get$0(inst, part.source);\n      } else {\n        if (hasPaths && isPath$0(path)) {\n          value = get$0(inst, path);\n        } else {\n          value = inst.__data[path];\n        }\n      }\n      if (part.negate) {\n        value = !value;\n      }\n      return value;\n    }\n\n  }\n\n  // make a typing for closure :P\n  PropertyEffectsType = PropertyEffects;\n\n  return PropertyEffects;\n});\n\n/**\n * Helper api for enqueuing client dom created by a host element.\n *\n * By default elements are flushed via `_flushProperties` when\n * `connectedCallback` is called. Elements attach their client dom to\n * themselves at `ready` time which results from this first flush.\n * This provides an ordering guarantee that the client dom an element\n * creates is flushed before the element itself (i.e. client `ready`\n * fires before host `ready`).\n *\n * However, if `_flushProperties` is called *before* an element is connected,\n * as for example `Templatize` does, this ordering guarantee cannot be\n * satisfied because no elements are connected. (Note: Bound elements that\n * receive data do become enqueued clients and are properly ordered but\n * unbound elements are not.)\n *\n * To maintain the desired \"client before host\" ordering guarantee for this\n * case we rely on the \"host stack. Client nodes registers themselves with\n * the creating host element when created. This ensures that all client dom\n * is readied in the proper order, maintaining the desired guarantee.\n *\n * @private\n */\nlet hostStack = {\n\n  stack: [],\n\n  /**\n   * @param {*} inst Instance to add to hostStack\n   * @return {void}\n   * @this {hostStack}\n   */\n  registerHost(inst) {\n    if (this.stack.length) {\n      let host = this.stack[this.stack.length-1];\n      host._enqueueClient(inst);\n    }\n  },\n\n  /**\n   * @param {*} inst Instance to begin hosting\n   * @return {void}\n   * @this {hostStack}\n   */\n  beginHosting(inst) {\n    this.stack.push(inst);\n  },\n\n  /**\n   * @param {*} inst Instance to end hosting\n   * @return {void}\n   * @this {hostStack}\n   */\n  endHosting(inst) {\n    let stackLen = this.stack.length;\n    if (stackLen && this.stack[stackLen-1] == inst) {\n      this.stack.pop();\n    }\n  }\n\n};\n","/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\nimport './boot.js';\n\nimport { pathFromUrl } from './resolve-url.js';\nexport const useShadow = !(window.ShadyDOM);\nexport const useNativeCSSProperties = Boolean(!window.ShadyCSS || window.ShadyCSS.nativeCss);\nexport const useNativeCustomElements = !(window.customElements.polyfillWrapFlushCallback);\n\n\n/**\n * Globally settable property that is automatically assigned to\n * `ElementMixin` instances, useful for binding in templates to\n * make URL's relative to an application's root.  Defaults to the main\n * document URL, but can be overridden by users.  It may be useful to set\n * `rootPath` to provide a stable application mount path when\n * using client side routing.\n */\nexport let rootPath = undefined ||\n  pathFromUrl(document.baseURI || window.location.href);\n\n/**\n * Sets the global rootPath property used by `ElementMixin` and\n * available via `rootPath`.\n *\n * @param {string} path The new root path\n * @return {void}\n */\nexport const setRootPath = function(path) {\n  rootPath = path;\n};\n\n/**\n * A global callback used to sanitize any value before inserting it into the DOM. The callback signature is:\n *\n *     Polymer = {\n *       sanitizeDOMValue: function(value, name, type, node) { ... }\n *     }\n *\n * Where:\n *\n * `value` is the value to sanitize.\n * `name` is the name of an attribute or property (for example, href).\n * `type` indicates where the value is being inserted: one of property, attribute, or text.\n * `node` is the node where the value is being inserted.\n *\n * @type {(function(*,string,string,Node):*)|undefined}\n */\nexport let sanitizeDOMValue = undefined;\n\n/**\n * Sets the global sanitizeDOMValue available via this module's exported\n * `sanitizeDOMValue` variable.\n *\n * @param {(function(*,string,string,Node):*)|undefined} newSanitizeDOMValue the global sanitizeDOMValue callback\n * @return {void}\n */\nexport const setSanitizeDOMValue = function(newSanitizeDOMValue) {\n  sanitizeDOMValue = newSanitizeDOMValue;\n};\n\n/**\n * Globally settable property to make Polymer Gestures use passive TouchEvent listeners when recognizing gestures.\n * When set to `true`, gestures made from touch will not be able to prevent scrolling, allowing for smoother\n * scrolling performance.\n * Defaults to `false` for backwards compatibility.\n */\nexport let passiveTouchGestures = false;\n\n/**\n * Sets `passiveTouchGestures` globally for all elements using Polymer Gestures.\n *\n * @param {boolean} usePassive enable or disable passive touch gestures globally\n * @return {void}\n */\nexport const setPassiveTouchGestures = function(usePassive) {\n  passiveTouchGestures = usePassive;\n};\n","/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\nimport '../utils/boot.js';\n\nimport { resolveUrl, pathFromUrl } from '../utils/resolve-url.js';\n\nlet modules = {};\nlet lcModules = {};\nfunction findModule(id) {\n  return modules[id] || lcModules[id.toLowerCase()];\n}\n\nfunction styleOutsideTemplateCheck(inst) {\n  if (inst.querySelector('style')) {\n    console.warn('dom-module %s has style outside template', inst.id);\n  }\n}\n\n/**\n * The `dom-module` element registers the dom it contains to the name given\n * by the module's id attribute. It provides a unified database of dom\n * accessible via its static `import` API.\n *\n * A key use case of `dom-module` is for providing custom element `<template>`s\n * via HTML imports that are parsed by the native HTML parser, that can be\n * relocated during a bundling pass and still looked up by `id`.\n *\n * Example:\n *\n *     <dom-module id=\"foo\">\n *       <img src=\"stuff.png\">\n *     </dom-module>\n *\n * Then in code in some other location that cannot access the dom-module above\n *\n *     let img = customElements.get('dom-module').import('foo', 'img');\n *\n * @customElement\n * @extends HTMLElement\n * @summary Custom element that provides a registry of relocatable DOM content\n *   by `id` that is agnostic to bundling.\n * @unrestricted\n */\nexport class DomModule extends HTMLElement {\n\n  static get observedAttributes() { return ['id']; }\n\n  /**\n   * Retrieves the element specified by the css `selector` in the module\n   * registered by `id`. For example, this.import('foo', 'img');\n   * @param {string} id The id of the dom-module in which to search.\n   * @param {string=} selector The css selector by which to find the element.\n   * @return {Element} Returns the element which matches `selector` in the\n   * module registered at the specified `id`.\n   */\n  static import(id, selector) {\n    if (id) {\n      let m = findModule(id);\n      if (m && selector) {\n        return m.querySelector(selector);\n      }\n      return m;\n    }\n    return null;\n  }\n\n  /* eslint-disable no-unused-vars */\n  /**\n   * @param {string} name Name of attribute.\n   * @param {?string} old Old value of attribute.\n   * @param {?string} value Current value of attribute.\n   * @param {?string} namespace Attribute namespace.\n   * @return {void}\n   */\n  attributeChangedCallback(name, old, value, namespace) {\n    if (old !== value) {\n      this.register();\n    }\n  }\n  /* eslint-enable no-unused-args */\n\n  /**\n   * The absolute URL of the original location of this `dom-module`.\n   *\n   * This value will differ from this element's `ownerDocument` in the\n   * following ways:\n   * - Takes into account any `assetpath` attribute added during bundling\n   *   to indicate the original location relative to the bundled location\n   * - Uses the HTMLImports polyfill's `importForElement` API to ensure\n   *   the path is relative to the import document's location since\n   *   `ownerDocument` is not currently polyfilled\n   */\n  get assetpath() {\n    // Don't override existing assetpath.\n    if (!this.__assetpath) {\n      // note: assetpath set via an attribute must be relative to this\n      // element's location; accomodate polyfilled HTMLImports\n      const owner = window.HTMLImports && HTMLImports.importForElement ?\n        HTMLImports.importForElement(this) || document : this.ownerDocument;\n      const url = resolveUrl(\n        this.getAttribute('assetpath') || '', owner.baseURI);\n      this.__assetpath = pathFromUrl(url);\n    }\n    return this.__assetpath;\n  }\n\n  /**\n   * Registers the dom-module at a given id. This method should only be called\n   * when a dom-module is imperatively created. For\n   * example, `document.createElement('dom-module').register('foo')`.\n   * @param {string=} id The id at which to register the dom-module.\n   * @return {void}\n   */\n  register(id) {\n    id = id || this.id;\n    if (id) {\n      this.id = id;\n      // store id separate from lowercased id so that\n      // in all cases mixedCase id will stored distinctly\n      // and lowercase version is a fallback\n      modules[id] = this;\n      lcModules[id.toLowerCase()] = this;\n      styleOutsideTemplateCheck(this);\n    }\n  }\n}\n\nDomModule.prototype['modules'] = modules;\n\ncustomElements.define('dom-module', DomModule);\n","/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\n\n/**\n * @fileoverview\n *\n * This module provides a number of strategies for enqueuing asynchronous\n * tasks. Each sub-module provides a standard `run(fn)` interface that returns a\n * handle, and a `cancel(handle)` interface for canceling async tasks before\n * they run.\n *\n * @summary Module that provides a number of strategies for enqueuing\n * asynchronous tasks.\n */\n\nimport './boot.js';\n\n// Microtask implemented using Mutation Observer\nlet microtaskCurrHandle = 0;\nlet microtaskLastHandle = 0;\nlet microtaskCallbacks = [];\nlet microtaskNodeContent = 0;\nlet microtaskNode = document.createTextNode('');\nnew window.MutationObserver(microtaskFlush).observe(microtaskNode, {characterData: true});\n\nfunction microtaskFlush() {\n  const len = microtaskCallbacks.length;\n  for (let i = 0; i < len; i++) {\n    let cb = microtaskCallbacks[i];\n    if (cb) {\n      try {\n        cb();\n      } catch (e) {\n        setTimeout(() => { throw e; });\n      }\n    }\n  }\n  microtaskCallbacks.splice(0, len);\n  microtaskLastHandle += len;\n}\n\n/**\n * Async interface wrapper around `setTimeout`.\n *\n * @namespace\n * @summary Async interface wrapper around `setTimeout`.\n */\nconst timeOut = {\n  /**\n   * Returns a sub-module with the async interface providing the provided\n   * delay.\n   *\n   * @memberof timeOut\n   * @param {number=} delay Time to wait before calling callbacks in ms\n   * @return {!AsyncInterface} An async timeout interface\n   */\n  after(delay) {\n    return {\n      run(fn) { return window.setTimeout(fn, delay); },\n      cancel(handle) {\n        window.clearTimeout(handle);\n      }\n    };\n  },\n  /**\n   * Enqueues a function called in the next task.\n   *\n   * @memberof timeOut\n   * @param {!Function} fn Callback to run\n   * @param {number=} delay Delay in milliseconds\n   * @return {number} Handle used for canceling task\n   */\n  run(fn, delay) {\n    return window.setTimeout(fn, delay);\n  },\n  /**\n   * Cancels a previously enqueued `timeOut` callback.\n   *\n   * @memberof timeOut\n   * @param {number} handle Handle returned from `run` of callback to cancel\n   * @return {void}\n   */\n  cancel(handle) {\n    window.clearTimeout(handle);\n  }\n};\nexport {timeOut};\n\n/**\n * Async interface wrapper around `requestAnimationFrame`.\n *\n * @namespace\n * @summary Async interface wrapper around `requestAnimationFrame`.\n */\nconst animationFrame = {\n  /**\n   * Enqueues a function called at `requestAnimationFrame` timing.\n   *\n   * @memberof animationFrame\n   * @param {function(number):void} fn Callback to run\n   * @return {number} Handle used for canceling task\n   */\n  run(fn) {\n    return window.requestAnimationFrame(fn);\n  },\n  /**\n   * Cancels a previously enqueued `animationFrame` callback.\n   *\n   * @memberof animationFrame\n   * @param {number} handle Handle returned from `run` of callback to cancel\n   * @return {void}\n   */\n  cancel(handle) {\n    window.cancelAnimationFrame(handle);\n  }\n};\nexport {animationFrame};\n\n/**\n * Async interface wrapper around `requestIdleCallback`.  Falls back to\n * `setTimeout` on browsers that do not support `requestIdleCallback`.\n *\n * @namespace\n * @summary Async interface wrapper around `requestIdleCallback`.\n */\nconst idlePeriod = {\n  /**\n   * Enqueues a function called at `requestIdleCallback` timing.\n   *\n   * @memberof idlePeriod\n   * @param {function(!IdleDeadline):void} fn Callback to run\n   * @return {number} Handle used for canceling task\n   */\n  run(fn) {\n    return window.requestIdleCallback ?\n      window.requestIdleCallback(fn) :\n      window.setTimeout(fn, 16);\n  },\n  /**\n   * Cancels a previously enqueued `idlePeriod` callback.\n   *\n   * @memberof idlePeriod\n   * @param {number} handle Handle returned from `run` of callback to cancel\n   * @return {void}\n   */\n  cancel(handle) {\n    window.cancelIdleCallback ?\n      window.cancelIdleCallback(handle) :\n      window.clearTimeout(handle);\n  }\n};\nexport {idlePeriod};\n\n/**\n * Async interface for enqueuing callbacks that run at microtask timing.\n *\n * Note that microtask timing is achieved via a single `MutationObserver`,\n * and thus callbacks enqueued with this API will all run in a single\n * batch, and not interleaved with other microtasks such as promises.\n * Promises are avoided as an implementation choice for the time being\n * due to Safari bugs that cause Promises to lack microtask guarantees.\n *\n * @namespace\n * @summary Async interface for enqueuing callbacks that run at microtask\n *   timing.\n */\nconst microTask = {\n\n  /**\n   * Enqueues a function called at microtask timing.\n   *\n   * @memberof microTask\n   * @param {!Function=} callback Callback to run\n   * @return {number} Handle used for canceling task\n   */\n  run(callback) {\n    microtaskNode.textContent = microtaskNodeContent++;\n    microtaskCallbacks.push(callback);\n    return microtaskCurrHandle++;\n  },\n\n  /**\n   * Cancels a previously enqueued `microTask` callback.\n   *\n   * @memberof microTask\n   * @param {number} handle Handle returned from `run` of callback to cancel\n   * @return {void}\n   */\n  cancel(handle) {\n    const idx = handle - microtaskLastHandle;\n    if (idx >= 0) {\n      if (!microtaskCallbacks[idx]) {\n        throw new Error('invalid async handle: ' + handle);\n      }\n      microtaskCallbacks[idx] = null;\n    }\n  }\n\n};\nexport {microTask};\n","/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\nimport '../utils/boot.js';\n\nimport { dedupingMixin } from '../utils/mixin.js';\nimport { microTask } from '../utils/async.js';\n\n/** @const {!AsyncInterface} */\nconst microtask = microTask;\n\n/**\n * Element class mixin that provides basic meta-programming for creating one\n * or more property accessors (getter/setter pair) that enqueue an async\n * (batched) `_propertiesChanged` callback.\n *\n * For basic usage of this mixin, call `MyClass.createProperties(props)`\n * once at class definition time to create property accessors for properties\n * named in props, implement `_propertiesChanged` to react as desired to\n * property changes, and implement `static get observedAttributes()` and\n * include lowercase versions of any property names that should be set from\n * attributes. Last, call `this._enableProperties()` in the element's\n * `connectedCallback` to enable the accessors.\n *\n * @mixinFunction\n * @polymer\n * @summary Element class mixin for reacting to property changes from\n *   generated property accessors.\n */\nexport const PropertiesChanged = dedupingMixin(superClass => {\n\n  /**\n   * @polymer\n   * @mixinClass\n   * @extends {superClass}\n   * @implements {Polymer_PropertiesChanged}\n   * @unrestricted\n   */\n  class PropertiesChanged extends superClass {\n\n    /**\n     * Creates property accessors for the given property names.\n     * @param {!Object} props Object whose keys are names of accessors.\n     * @return {void}\n     * @protected\n     */\n    static createProperties(props) {\n      const proto = this.prototype;\n      for (let prop in props) {\n        // don't stomp an existing accessor\n        if (!(prop in proto)) {\n          proto._createPropertyAccessor(prop);\n        }\n      }\n    }\n\n    /**\n     * Returns an attribute name that corresponds to the given property.\n     * The attribute name is the lowercased property name. Override to\n     * customize this mapping.\n     * @param {string} property Property to convert\n     * @return {string} Attribute name corresponding to the given property.\n     *\n     * @protected\n     */\n    static attributeNameForProperty(property) {\n      return property.toLowerCase();\n    }\n\n    /**\n     * Override point to provide a type to which to deserialize a value to\n     * a given property.\n     * @param {string} name Name of property\n     *\n     * @protected\n     */\n    static typeForProperty(name) { } //eslint-disable-line no-unused-vars\n\n    /**\n     * Creates a setter/getter pair for the named property with its own\n     * local storage.  The getter returns the value in the local storage,\n     * and the setter calls `_setProperty`, which updates the local storage\n     * for the property and enqueues a `_propertiesChanged` callback.\n     *\n     * This method may be called on a prototype or an instance.  Calling\n     * this method may overwrite a property value that already exists on\n     * the prototype/instance by creating the accessor.\n     *\n     * @param {string} property Name of the property\n     * @param {boolean=} readOnly When true, no setter is created; the\n     *   protected `_setProperty` function must be used to set the property\n     * @return {void}\n     * @protected\n     */\n    _createPropertyAccessor(property, readOnly) {\n      this._addPropertyToAttributeMap(property);\n      if (!this.hasOwnProperty('__dataHasAccessor')) {\n        this.__dataHasAccessor = Object.assign({}, this.__dataHasAccessor);\n      }\n      if (!this.__dataHasAccessor[property]) {\n        this.__dataHasAccessor[property] = true;\n        this._definePropertyAccessor(property, readOnly);\n      }\n    }\n\n    /**\n     * Adds the given `property` to a map matching attribute names\n     * to property names, using `attributeNameForProperty`. This map is\n     * used when deserializing attribute values to properties.\n     *\n     * @param {string} property Name of the property\n     */\n    _addPropertyToAttributeMap(property) {\n      if (!this.hasOwnProperty('__dataAttributes')) {\n        this.__dataAttributes = Object.assign({}, this.__dataAttributes);\n      }\n      if (!this.__dataAttributes[property]) {\n        const attr = this.constructor.attributeNameForProperty(property);\n        this.__dataAttributes[attr] = property;\n      }\n    }\n\n    /**\n     * Defines a property accessor for the given property.\n     * @param {string} property Name of the property\n     * @param {boolean=} readOnly When true, no setter is created\n     * @return {void}\n     */\n     _definePropertyAccessor(property, readOnly) {\n      Object.defineProperty(this, property, {\n        /* eslint-disable valid-jsdoc */\n        /** @this {PropertiesChanged} */\n        get() {\n          return this._getProperty(property);\n        },\n        /** @this {PropertiesChanged} */\n        set: readOnly ? function () {} : function (value) {\n          this._setProperty(property, value);\n        }\n        /* eslint-enable */\n      });\n    }\n\n    constructor() {\n      super();\n      this.__dataEnabled = false;\n      this.__dataReady = false;\n      this.__dataInvalid = false;\n      this.__data = {};\n      this.__dataPending = null;\n      this.__dataOld = null;\n      this.__dataInstanceProps = null;\n      this.__serializing = false;\n      this._initializeProperties();\n    }\n\n    /**\n     * Lifecycle callback called when properties are enabled via\n     * `_enableProperties`.\n     *\n     * Users may override this function to implement behavior that is\n     * dependent on the element having its property data initialized, e.g.\n     * from defaults (initialized from `constructor`, `_initializeProperties`),\n     * `attributeChangedCallback`, or values propagated from host e.g. via\n     * bindings.  `super.ready()` must be called to ensure the data system\n     * becomes enabled.\n     *\n     * @return {void}\n     * @public\n     */\n    ready() {\n      this.__dataReady = true;\n      this._flushProperties();\n    }\n\n    /**\n     * Initializes the local storage for property accessors.\n     *\n     * Provided as an override point for performing any setup work prior\n     * to initializing the property accessor system.\n     *\n     * @return {void}\n     * @protected\n     */\n    _initializeProperties() {\n      // Capture instance properties; these will be set into accessors\n      // during first flush. Don't set them here, since we want\n      // these to overwrite defaults/constructor assignments\n      for (let p in this.__dataHasAccessor) {\n        if (this.hasOwnProperty(p)) {\n          this.__dataInstanceProps = this.__dataInstanceProps || {};\n          this.__dataInstanceProps[p] = this[p];\n          delete this[p];\n        }\n      }\n    }\n\n    /**\n     * Called at ready time with bag of instance properties that overwrote\n     * accessors when the element upgraded.\n     *\n     * The default implementation sets these properties back into the\n     * setter at ready time.  This method is provided as an override\n     * point for customizing or providing more efficient initialization.\n     *\n     * @param {Object} props Bag of property values that were overwritten\n     *   when creating property accessors.\n     * @return {void}\n     * @protected\n     */\n    _initializeInstanceProperties(props) {\n      Object.assign(this, props);\n    }\n\n    /**\n     * Updates the local storage for a property (via `_setPendingProperty`)\n     * and enqueues a `_proeprtiesChanged` callback.\n     *\n     * @param {string} property Name of the property\n     * @param {*} value Value to set\n     * @return {void}\n     * @protected\n     */\n    _setProperty(property, value) {\n      if (this._setPendingProperty(property, value)) {\n        this._invalidateProperties();\n      }\n    }\n\n    /**\n     * Returns the value for the given property.\n     * @param {string} property Name of property\n     * @return {*} Value for the given property\n     * @protected\n     */\n    _getProperty(property) {\n      return this.__data[property];\n    }\n\n    /* eslint-disable no-unused-vars */\n    /**\n     * Updates the local storage for a property, records the previous value,\n     * and adds it to the set of \"pending changes\" that will be passed to the\n     * `_propertiesChanged` callback.  This method does not enqueue the\n     * `_propertiesChanged` callback.\n     *\n     * @param {string} property Name of the property\n     * @param {*} value Value to set\n     * @param {boolean=} ext Not used here; affordance for closure\n     * @return {boolean} Returns true if the property changed\n     * @protected\n     */\n    _setPendingProperty(property, value, ext) {\n      let old = this.__data[property];\n      let changed = this._shouldPropertyChange(property, value, old);\n      if (changed) {\n        if (!this.__dataPending) {\n          this.__dataPending = {};\n          this.__dataOld = {};\n        }\n        // Ensure old is captured from the last turn\n        if (this.__dataOld && !(property in this.__dataOld)) {\n          this.__dataOld[property] = old;\n        }\n        this.__data[property] = value;\n        this.__dataPending[property] = value;\n      }\n      return changed;\n    }\n    /* eslint-enable */\n\n    /**\n     * Marks the properties as invalid, and enqueues an async\n     * `_propertiesChanged` callback.\n     *\n     * @return {void}\n     * @protected\n     */\n    _invalidateProperties() {\n      if (!this.__dataInvalid && this.__dataReady) {\n        this.__dataInvalid = true;\n        microtask.run(() => {\n          if (this.__dataInvalid) {\n            this.__dataInvalid = false;\n            this._flushProperties();\n          }\n        });\n      }\n    }\n\n    /**\n     * Call to enable property accessor processing. Before this method is\n     * called accessor values will be set but side effects are\n     * queued. When called, any pending side effects occur immediately.\n     * For elements, generally `connectedCallback` is a normal spot to do so.\n     * It is safe to call this method multiple times as it only turns on\n     * property accessors once.\n     *\n     * @return {void}\n     * @protected\n     */\n    _enableProperties() {\n      if (!this.__dataEnabled) {\n        this.__dataEnabled = true;\n        if (this.__dataInstanceProps) {\n          this._initializeInstanceProperties(this.__dataInstanceProps);\n          this.__dataInstanceProps = null;\n        }\n        this.ready();\n      }\n    }\n\n    /**\n     * Calls the `_propertiesChanged` callback with the current set of\n     * pending changes (and old values recorded when pending changes were\n     * set), and resets the pending set of changes. Generally, this method\n     * should not be called in user code.\n     *\n     * @return {void}\n     * @protected\n     */\n    _flushProperties() {\n      const props = this.__data;\n      const changedProps = this.__dataPending;\n      const old = this.__dataOld;\n      if (this._shouldPropertiesChange(props, changedProps, old)) {\n        this.__dataPending = null;\n        this.__dataOld = null;\n        this._propertiesChanged(props, changedProps, old);\n      }\n    }\n\n    /**\n     * Called in `_flushProperties` to determine if `_propertiesChanged`\n     * should be called. The default implementation returns true if\n     * properties are pending. Override to customize when\n     * `_propertiesChanged` is called.\n     * @param {!Object} currentProps Bag of all current accessor values\n     * @param {!Object} changedProps Bag of properties changed since the last\n     *   call to `_propertiesChanged`\n     * @param {!Object} oldProps Bag of previous values for each property\n     *   in `changedProps`\n     * @return {boolean} true if changedProps is truthy\n     */\n    _shouldPropertiesChange(currentProps, changedProps, oldProps) { // eslint-disable-line no-unused-vars\n      return Boolean(changedProps);\n    }\n\n    /**\n     * Callback called when any properties with accessors created via\n     * `_createPropertyAccessor` have been set.\n     *\n     * @param {!Object} currentProps Bag of all current accessor values\n     * @param {!Object} changedProps Bag of properties changed since the last\n     *   call to `_propertiesChanged`\n     * @param {!Object} oldProps Bag of previous values for each property\n     *   in `changedProps`\n     * @return {void}\n     * @protected\n     */\n    _propertiesChanged(currentProps, changedProps, oldProps) { // eslint-disable-line no-unused-vars\n    }\n\n    /**\n     * Method called to determine whether a property value should be\n     * considered as a change and cause the `_propertiesChanged` callback\n     * to be enqueued.\n     *\n     * The default implementation returns `true` if a strict equality\n     * check fails. The method always returns false for `NaN`.\n     *\n     * Override this method to e.g. provide stricter checking for\n     * Objects/Arrays when using immutable patterns.\n     *\n     * @param {string} property Property name\n     * @param {*} value New property value\n     * @param {*} old Previous property value\n     * @return {boolean} Whether the property should be considered a change\n     *   and enqueue a `_proeprtiesChanged` callback\n     * @protected\n     */\n    _shouldPropertyChange(property, value, old) {\n      return (\n        // Strict equality check\n        (old !== value &&\n          // This ensures (old==NaN, value==NaN) always returns false\n          (old === old || value === value))\n      );\n    }\n\n    /**\n     * Implements native Custom Elements `attributeChangedCallback` to\n     * set an attribute value to a property via `_attributeToProperty`.\n     *\n     * @param {string} name Name of attribute that changed\n     * @param {?string} old Old attribute value\n     * @param {?string} value New attribute value\n     * @param {?string} namespace Attribute namespace.\n     * @return {void}\n     * @suppress {missingProperties} Super may or may not implement the callback\n     */\n    attributeChangedCallback(name, old, value, namespace) {\n      if (old !== value) {\n        this._attributeToProperty(name, value);\n      }\n      if (super.attributeChangedCallback) {\n        super.attributeChangedCallback(name, old, value, namespace);\n      }\n    }\n\n    /**\n     * Deserializes an attribute to its associated property.\n     *\n     * This method calls the `_deserializeValue` method to convert the string to\n     * a typed value.\n     *\n     * @param {string} attribute Name of attribute to deserialize.\n     * @param {?string} value of the attribute.\n     * @param {*=} type type to deserialize to, defaults to the value\n     * returned from `typeForProperty`\n     * @return {void}\n     */\n    _attributeToProperty(attribute, value, type) {\n      if (!this.__serializing) {\n        const map = this.__dataAttributes;\n        const property = map && map[attribute] || attribute;\n        this[property] = this._deserializeValue(value, type ||\n          this.constructor.typeForProperty(property));\n      }\n    }\n\n    /**\n     * Serializes a property to its associated attribute.\n     *\n     * @suppress {invalidCasts} Closure can't figure out `this` is an element.\n     *\n     * @param {string} property Property name to reflect.\n     * @param {string=} attribute Attribute name to reflect to.\n     * @param {*=} value Property value to refect.\n     * @return {void}\n     */\n    _propertyToAttribute(property, attribute, value) {\n      this.__serializing = true;\n      value = (arguments.length < 3) ? this[property] : value;\n      this._valueToNodeAttribute(/** @type {!HTMLElement} */(this), value,\n        attribute || this.constructor.attributeNameForProperty(property));\n      this.__serializing = false;\n    }\n\n    /**\n     * Sets a typed value to an HTML attribute on a node.\n     *\n     * This method calls the `_serializeValue` method to convert the typed\n     * value to a string.  If the `_serializeValue` method returns `undefined`,\n     * the attribute will be removed (this is the default for boolean\n     * type `false`).\n     *\n     * @param {Element} node Element to set attribute to.\n     * @param {*} value Value to serialize.\n     * @param {string} attribute Attribute name to serialize to.\n     * @return {void}\n     */\n    _valueToNodeAttribute(node, value, attribute) {\n      const str = this._serializeValue(value);\n      if (str === undefined) {\n        node.removeAttribute(attribute);\n      } else {\n        node.setAttribute(attribute, str);\n      }\n    }\n\n    /**\n     * Converts a typed JavaScript value to a string.\n     *\n     * This method is called when setting JS property values to\n     * HTML attributes.  Users may override this method to provide\n     * serialization for custom types.\n     *\n     * @param {*} value Property value to serialize.\n     * @return {string | undefined} String serialized from the provided\n     * property  value.\n     */\n    _serializeValue(value) {\n      switch (typeof value) {\n        case 'boolean':\n          return value ? '' : undefined;\n        default:\n          return value != null ? value.toString() : undefined;\n      }\n    }\n\n    /**\n     * Converts a string to a typed JavaScript value.\n     *\n     * This method is called when reading HTML attribute values to\n     * JS properties.  Users may override this method to provide\n     * deserialization for custom `type`s. Types for `Boolean`, `String`,\n     * and `Number` convert attributes to the expected types.\n     *\n     * @param {?string} value Value to deserialize.\n     * @param {*=} type Type to deserialize the string to.\n     * @return {*} Typed value deserialized from the provided string.\n     */\n    _deserializeValue(value, type) {\n      switch (type) {\n        case Boolean:\n          return (value !== null);\n        case Number:\n          return Number(value);\n        default:\n          return value;\n      }\n    }\n\n  }\n\n  return PropertiesChanged;\n});\n","/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\nimport '../utils/boot.js';\n\nimport { dedupingMixin } from '../utils/mixin.js';\nimport * as caseMap$0 from '../utils/case-map.js';\nimport { PropertiesChanged } from './properties-changed.js';\n\nlet caseMap = caseMap$0;\n\n// Save map of native properties; this forms a blacklist or properties\n// that won't have their values \"saved\" by `saveAccessorValue`, since\n// reading from an HTMLElement accessor from the context of a prototype throws\nconst nativeProperties = {};\nlet proto = HTMLElement.prototype;\nwhile (proto) {\n  let props = Object.getOwnPropertyNames(proto);\n  for (let i=0; i<props.length; i++) {\n    nativeProperties[props[i]] = true;\n  }\n  proto = Object.getPrototypeOf(proto);\n}\n\n/**\n * Used to save the value of a property that will be overridden with\n * an accessor. If the `model` is a prototype, the values will be saved\n * in `__dataProto`, and it's up to the user (or downstream mixin) to\n * decide how/when to set these values back into the accessors.\n * If `model` is already an instance (it has a `__data` property), then\n * the value will be set as a pending property, meaning the user should\n * call `_invalidateProperties` or `_flushProperties` to take effect\n *\n * @param {Object} model Prototype or instance\n * @param {string} property Name of property\n * @return {void}\n * @private\n */\nfunction saveAccessorValue(model, property) {\n  // Don't read/store value for any native properties since they could throw\n  if (!nativeProperties[property]) {\n    let value = model[property];\n    if (value !== undefined) {\n      if (model.__data) {\n        // Adding accessor to instance; update the property\n        // It is the user's responsibility to call _flushProperties\n        model._setPendingProperty(property, value);\n      } else {\n        // Adding accessor to proto; save proto's value for instance-time use\n        if (!model.__dataProto) {\n          model.__dataProto = {};\n        } else if (!model.hasOwnProperty(JSCompiler_renameProperty('__dataProto', model))) {\n          model.__dataProto = Object.create(model.__dataProto);\n        }\n        model.__dataProto[property] = value;\n      }\n    }\n  }\n}\n\n/**\n * Element class mixin that provides basic meta-programming for creating one\n * or more property accessors (getter/setter pair) that enqueue an async\n * (batched) `_propertiesChanged` callback.\n *\n * For basic usage of this mixin:\n *\n * -   Declare attributes to observe via the standard `static get observedAttributes()`. Use\n *     `dash-case` attribute names to represent `camelCase` property names.\n * -   Implement the `_propertiesChanged` callback on the class.\n * -   Call `MyClass.createPropertiesForAttributes()` **once** on the class to generate\n *     property accessors for each observed attribute. This must be called before the first\n *     instance is created, for example, by calling it before calling `customElements.define`.\n *     It can also be called lazily from the element's `constructor`, as long as it's guarded so\n *     that the call is only made once, when the first instance is created.\n * -   Call `this._enableProperties()` in the element's `connectedCallback` to enable\n *     the accessors.\n *\n * Any `observedAttributes` will automatically be\n * deserialized via `attributeChangedCallback` and set to the associated\n * property using `dash-case`-to-`camelCase` convention.\n *\n * @mixinFunction\n * @polymer\n * @appliesMixin PropertiesChanged\n * @summary Element class mixin for reacting to property changes from\n *   generated property accessors.\n */\nexport const PropertyAccessors = dedupingMixin(superClass => {\n\n  /**\n   * @constructor\n   * @extends {superClass}\n   * @implements {Polymer_PropertiesChanged}\n   * @unrestricted\n   */\n   const base = PropertiesChanged(superClass);\n\n  /**\n   * @polymer\n   * @mixinClass\n   * @implements {Polymer_PropertyAccessors}\n   * @extends {base}\n   * @unrestricted\n   */\n  class PropertyAccessors extends base {\n\n    /**\n     * Generates property accessors for all attributes in the standard\n     * static `observedAttributes` array.\n     *\n     * Attribute names are mapped to property names using the `dash-case` to\n     * `camelCase` convention\n     *\n     * @return {void}\n     */\n    static createPropertiesForAttributes() {\n      let a$ = this.observedAttributes;\n      for (let i=0; i < a$.length; i++) {\n        this.prototype._createPropertyAccessor(caseMap.dashToCamelCase(a$[i]));\n      }\n    }\n\n    /**\n     * Returns an attribute name that corresponds to the given property.\n     * By default, converts camel to dash case, e.g. `fooBar` to `foo-bar`.\n     * @param {string} property Property to convert\n     * @return {string} Attribute name corresponding to the given property.\n     *\n     * @protected\n     */\n    static attributeNameForProperty(property) {\n      return caseMap.camelToDashCase(property);\n    }\n\n    /**\n     * Overrides PropertiesChanged implementation to initialize values for\n     * accessors created for values that already existed on the element\n     * prototype.\n     *\n     * @return {void}\n     * @protected\n     */\n    _initializeProperties() {\n      if (this.__dataProto) {\n        this._initializeProtoProperties(this.__dataProto);\n        this.__dataProto = null;\n      }\n      super._initializeProperties();\n    }\n\n    /**\n     * Called at instance time with bag of properties that were overwritten\n     * by accessors on the prototype when accessors were created.\n     *\n     * The default implementation sets these properties back into the\n     * setter at instance time.  This method is provided as an override\n     * point for customizing or providing more efficient initialization.\n     *\n     * @param {Object} props Bag of property values that were overwritten\n     *   when creating property accessors.\n     * @return {void}\n     * @protected\n     */\n    _initializeProtoProperties(props) {\n      for (let p in props) {\n        this._setProperty(p, props[p]);\n      }\n    }\n\n    /**\n     * Ensures the element has the given attribute. If it does not,\n     * assigns the given value to the attribute.\n     *\n     * @suppress {invalidCasts} Closure can't figure out `this` is infact an element\n     *\n     * @param {string} attribute Name of attribute to ensure is set.\n     * @param {string} value of the attribute.\n     * @return {void}\n     */\n    _ensureAttribute(attribute, value) {\n      const el = /** @type {!HTMLElement} */(this);\n      if (!el.hasAttribute(attribute)) {\n        this._valueToNodeAttribute(el, value, attribute);\n      }\n    }\n\n    /**\n     * Overrides PropertiesChanged implemention to serialize objects as JSON.\n     *\n     * @param {*} value Property value to serialize.\n     * @return {string | undefined} String serialized from the provided property value.\n     */\n    _serializeValue(value) {\n      /* eslint-disable no-fallthrough */\n      switch (typeof value) {\n        case 'object':\n          if (value instanceof Date) {\n            return value.toString();\n          } else if (value) {\n            try {\n              return JSON.stringify(value);\n            } catch(x) {\n              return '';\n            }\n          }\n\n        default:\n          return super._serializeValue(value);\n      }\n    }\n\n    /**\n     * Converts a string to a typed JavaScript value.\n     *\n     * This method is called by Polymer when reading HTML attribute values to\n     * JS properties.  Users may override this method on Polymer element\n     * prototypes to provide deserialization for custom `type`s.  Note,\n     * the `type` argument is the value of the `type` field provided in the\n     * `properties` configuration object for a given property, and is\n     * by convention the constructor for the type to deserialize.\n     *\n     *\n     * @param {?string} value Attribute value to deserialize.\n     * @param {*=} type Type to deserialize the string to.\n     * @return {*} Typed value deserialized from the provided string.\n     */\n    _deserializeValue(value, type) {\n      /**\n       * @type {*}\n       */\n      let outValue;\n      switch (type) {\n        case Object:\n          try {\n            outValue = JSON.parse(/** @type {string} */(value));\n          } catch(x) {\n            // allow non-JSON literals like Strings and Numbers\n            outValue = value;\n          }\n          break;\n        case Array:\n          try {\n            outValue = JSON.parse(/** @type {string} */(value));\n          } catch(x) {\n            outValue = null;\n            console.warn(`Polymer::Attributes: couldn't decode Array as JSON: ${value}`);\n          }\n          break;\n        case Date:\n          outValue = isNaN(value) ? String(value) : Number(value);\n          outValue = new Date(outValue);\n          break;\n        default:\n          outValue = super._deserializeValue(value, type);\n          break;\n      }\n      return outValue;\n    }\n    /* eslint-enable no-fallthrough */\n\n    /**\n     * Overrides PropertiesChanged implementation to save existing prototype\n     * property value so that it can be reset.\n     * @param {string} property Name of the property\n     * @param {boolean=} readOnly When true, no setter is created\n     *\n     * When calling on a prototype, any overwritten values are saved in\n     * `__dataProto`, and it is up to the subclasser to decide how/when\n     * to set those properties back into the accessor.  When calling on an\n     * instance, the overwritten value is set via `_setPendingProperty`,\n     * and the user should call `_invalidateProperties` or `_flushProperties`\n     * for the values to take effect.\n     * @protected\n     * @return {void}\n     */\n    _definePropertyAccessor(property, readOnly) {\n      saveAccessorValue(this, property);\n      super._definePropertyAccessor(property, readOnly);\n    }\n\n    /**\n     * Returns true if this library created an accessor for the given property.\n     *\n     * @param {string} property Property name\n     * @return {boolean} True if an accessor was created\n     */\n    _hasAccessor(property) {\n      return this.__dataHasAccessor && this.__dataHasAccessor[property];\n    }\n\n    /**\n     * Returns true if the specified property has a pending change.\n     *\n     * @param {string} prop Property name\n     * @return {boolean} True if property has a pending change\n     * @protected\n     */\n    _isPropertyPending(prop) {\n      return Boolean(this.__dataPending && (prop in this.__dataPending));\n    }\n\n  }\n\n  return PropertyAccessors;\n\n});\n","/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\nimport '../utils/boot.js';\n\nimport { dedupingMixin } from '../utils/mixin.js';\nimport { PropertiesChanged } from './properties-changed.js';\n\n/**\n * Creates a copy of `props` with each property normalized such that\n * upgraded it is an object with at least a type property { type: Type}.\n *\n * @param {Object} props Properties to normalize\n * @return {Object} Copy of input `props` with normalized properties that\n * are in the form {type: Type}\n * @private\n */\nfunction normalizeProperties(props) {\n  const output = {};\n  for (let p in props) {\n    const o = props[p];\n    output[p] = (typeof o === 'function') ? {type: o} : o;\n  }\n  return output;\n}\n\n/**\n * Mixin that provides a minimal starting point to using the PropertiesChanged\n * mixin by providing a mechanism to declare properties in a static\n * getter (e.g. static get properties() { return { foo: String } }). Changes\n * are reported via the `_propertiesChanged` method.\n *\n * This mixin provides no specific support for rendering. Users are expected\n * to create a ShadowRoot and put content into it and update it in whatever\n * way makes sense. This can be done in reaction to properties changing by\n * implementing `_propertiesChanged`.\n *\n * @mixinFunction\n * @polymer\n * @appliesMixin PropertiesChanged\n * @summary Mixin that provides a minimal starting point for using\n * the PropertiesChanged mixin by providing a declarative `properties` object.\n */\nexport const PropertiesMixin = dedupingMixin(superClass => {\n\n /**\n  * @constructor\n  * @extends {superClass}\n  * @implements {Polymer_PropertiesChanged}\n  */\n const base = PropertiesChanged(superClass);\n\n /**\n  * Returns the super class constructor for the given class, if it is an\n  * instance of the PropertiesMixin.\n  *\n  * @param {!PropertiesMixinConstructor} constructor PropertiesMixin constructor\n  * @return {PropertiesMixinConstructor} Super class constructor\n  */\n function superPropertiesClass(constructor) {\n   const superCtor = Object.getPrototypeOf(constructor);\n\n   // Note, the `PropertiesMixin` class below only refers to the class\n   // generated by this call to the mixin; the instanceof test only works\n   // because the mixin is deduped and guaranteed only to apply once, hence\n   // all constructors in a proto chain will see the same `PropertiesMixin`\n   return (superCtor.prototype instanceof PropertiesMixin) ?\n     /** @type {PropertiesMixinConstructor} */ (superCtor) : null;\n }\n\n /**\n  * Returns a memoized version of the `properties` object for the\n  * given class. Properties not in object format are converted to at\n  * least {type}.\n  *\n  * @param {PropertiesMixinConstructor} constructor PropertiesMixin constructor\n  * @return {Object} Memoized properties object\n  */\n function ownProperties(constructor) {\n   if (!constructor.hasOwnProperty(JSCompiler_renameProperty('__ownProperties', constructor))) {\n     let props = null;\n\n     if (constructor.hasOwnProperty(JSCompiler_renameProperty('properties', constructor)) && constructor.properties) {\n       props = normalizeProperties(constructor.properties);\n     }\n\n     constructor.__ownProperties = props;\n   }\n   return constructor.__ownProperties;\n }\n\n /**\n  * @polymer\n  * @mixinClass\n  * @extends {base}\n  * @implements {Polymer_PropertiesMixin}\n  * @unrestricted\n  */\n class PropertiesMixin extends base {\n\n   /**\n    * Implements standard custom elements getter to observes the attributes\n    * listed in `properties`.\n    * @suppress {missingProperties} Interfaces in closure do not inherit statics, but classes do\n    */\n   static get observedAttributes() {\n     const props = this._properties;\n     return props ? Object.keys(props).map(p => this.attributeNameForProperty(p)) : [];\n   }\n\n   /**\n    * Finalizes an element definition, including ensuring any super classes\n    * are also finalized. This includes ensuring property\n    * accessors exist on the element prototype. This method calls\n    * `_finalizeClass` to finalize each constructor in the prototype chain.\n    * @return {void}\n    */\n   static finalize() {\n     if (!this.hasOwnProperty(JSCompiler_renameProperty('__finalized', this))) {\n       const superCtor = superPropertiesClass(/** @type {PropertiesMixinConstructor} */(this));\n       if (superCtor) {\n         superCtor.finalize();\n       }\n       this.__finalized = true;\n       this._finalizeClass();\n     }\n   }\n\n   /**\n    * Finalize an element class. This includes ensuring property\n    * accessors exist on the element prototype. This method is called by\n    * `finalize` and finalizes the class constructor.\n    *\n    * @protected\n    */\n   static _finalizeClass() {\n     const props = ownProperties(/** @type {PropertiesMixinConstructor} */(this));\n     if (props) {\n       this.createProperties(props);\n     }\n   }\n\n   /**\n    * Returns a memoized version of all properties, including those inherited\n    * from super classes. Properties not in object format are converted to\n    * at least {type}.\n    *\n    * @return {Object} Object containing properties for this class\n    * @protected\n    */\n   static get _properties() {\n     if (!this.hasOwnProperty(\n       JSCompiler_renameProperty('__properties', this))) {\n       const superCtor = superPropertiesClass(/** @type {PropertiesMixinConstructor} */(this));\n       this.__properties = Object.assign({},\n         superCtor && superCtor._properties,\n         ownProperties(/** @type {PropertiesMixinConstructor} */(this)));\n     }\n     return this.__properties;\n   }\n\n   /**\n    * Overrides `PropertiesChanged` method to return type specified in the\n    * static `properties` object for the given property.\n    * @param {string} name Name of property\n    * @return {*} Type to which to deserialize attribute\n    *\n    * @protected\n    */\n   static typeForProperty(name) {\n     const info = this._properties[name];\n     return info && info.type;\n   }\n\n   /**\n    * Overrides `PropertiesChanged` method and adds a call to\n    * `finalize` which lazily configures the element's property accessors.\n    * @override\n    * @return {void}\n    */\n   _initializeProperties() {\n     this.constructor.finalize();\n     super._initializeProperties();\n   }\n\n   /**\n    * Called when the element is added to a document.\n    * Calls `_enableProperties` to turn on property system from\n    * `PropertiesChanged`.\n    * @suppress {missingProperties} Super may or may not implement the callback\n    * @return {void}\n    */\n   connectedCallback() {\n     if (super.connectedCallback) {\n       super.connectedCallback();\n     }\n     this._enableProperties();\n   }\n\n   /**\n    * Called when the element is removed from a document\n    * @suppress {missingProperties} Super may or may not implement the callback\n    * @return {void}\n    */\n   disconnectedCallback() {\n     if (super.disconnectedCallback) {\n       super.disconnectedCallback();\n     }\n   }\n\n }\n\n return PropertiesMixin;\n\n});\n","/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\nimport '../utils/boot.js';\n\nimport { rootPath as rootPath$0 } from '../utils/settings.js';\nimport { dedupingMixin } from '../utils/mixin.js';\nimport { stylesFromTemplate, stylesFromModuleImports } from '../utils/style-gather.js';\nimport { pathFromUrl, resolveCss, resolveUrl as resolveUrl$0 } from '../utils/resolve-url.js';\nimport { DomModule } from '../elements/dom-module.js';\nimport { PropertyEffects } from './property-effects.js';\nimport { PropertiesMixin } from './properties-mixin.js';\n\n/**\n * Element class mixin that provides the core API for Polymer's meta-programming\n * features including template stamping, data-binding, attribute deserialization,\n * and property change observation.\n *\n * Subclassers may provide the following static getters to return metadata\n * used to configure Polymer's features for the class:\n *\n * - `static get is()`: When the template is provided via a `dom-module`,\n *   users should return the `dom-module` id from a static `is` getter.  If\n *   no template is needed or the template is provided directly via the\n *   `template` getter, there is no need to define `is` for the element.\n *\n * - `static get template()`: Users may provide the template directly (as\n *   opposed to via `dom-module`) by implementing a static `template` getter.\n *   The getter may return an `HTMLTemplateElement` or a string, which will\n *   automatically be parsed into a template.\n *\n * - `static get properties()`: Should return an object describing\n *   property-related metadata used by Polymer features (key: property name\n *   value: object containing property metadata). Valid keys in per-property\n *   metadata include:\n *   - `type` (String|Number|Object|Array|...): Used by\n *     `attributeChangedCallback` to determine how string-based attributes\n *     are deserialized to JavaScript property values.\n *   - `notify` (boolean): Causes a change in the property to fire a\n *     non-bubbling event called `<property>-changed`. Elements that have\n *     enabled two-way binding to the property use this event to observe changes.\n *   - `readOnly` (boolean): Creates a getter for the property, but no setter.\n *     To set a read-only property, use the private setter method\n *     `_setProperty(property, value)`.\n *   - `observer` (string): Observer method name that will be called when\n *     the property changes. The arguments of the method are\n *     `(value, previousValue)`.\n *   - `computed` (string): String describing method and dependent properties\n *     for computing the value of this property (e.g. `'computeFoo(bar, zot)'`).\n *     Computed properties are read-only by default and can only be changed\n *     via the return value of the computing method.\n *\n * - `static get observers()`: Array of strings describing multi-property\n *   observer methods and their dependent properties (e.g.\n *   `'observeABC(a, b, c)'`).\n *\n * The base class provides default implementations for the following standard\n * custom element lifecycle callbacks; users may override these, but should\n * call the super method to ensure\n * - `constructor`: Run when the element is created or upgraded\n * - `connectedCallback`: Run each time the element is connected to the\n *   document\n * - `disconnectedCallback`: Run each time the element is disconnected from\n *   the document\n * - `attributeChangedCallback`: Run each time an attribute in\n *   `observedAttributes` is set or removed (note: this element's default\n *   `observedAttributes` implementation will automatically return an array\n *   of dash-cased attributes based on `properties`)\n *\n * @mixinFunction\n * @polymer\n * @appliesMixin PropertyEffects\n * @appliesMixin PropertiesMixin\n * @property rootPath {string} Set to the value of `rootPath`,\n *   which defaults to the main document path\n * @property importPath {string} Set to the value of the class's static\n *   `importPath` property, which defaults to the path of this element's\n *   `dom-module` (when `is` is used), but can be overridden for other\n *   import strategies.\n * @summary Element class mixin that provides the core API for Polymer's\n * meta-programming features.\n */\nexport const ElementMixin = dedupingMixin(base => {\n\n  /**\n   * @constructor\n   * @extends {base}\n   * @implements {Polymer_PropertyEffects}\n   * @implements {Polymer_PropertiesMixin}\n   */\n  const polymerElementBase = PropertiesMixin(PropertyEffects(base));\n\n  /**\n   * Returns a list of properties with default values.\n   * This list is created as an optimization since it is a subset of\n   * the list returned from `_properties`.\n   * This list is used in `_initializeProperties` to set property defaults.\n   *\n   * @param {PolymerElementConstructor} constructor Element class\n   * @return {PolymerElementProperties} Flattened properties for this class\n   *   that have default values\n   * @private\n   */\n  function propertyDefaults(constructor) {\n    if (!constructor.hasOwnProperty(\n      JSCompiler_renameProperty('__propertyDefaults', constructor))) {\n      constructor.__propertyDefaults = null;\n      let props = constructor._properties;\n      for (let p in props) {\n        let info = props[p];\n        if ('value' in info) {\n          constructor.__propertyDefaults = constructor.__propertyDefaults || {};\n          constructor.__propertyDefaults[p] = info;\n        }\n      }\n    }\n    return constructor.__propertyDefaults;\n  }\n\n  /**\n   * Returns a memoized version of the the `observers` array.\n   * @param {PolymerElementConstructor} constructor Element class\n   * @return {Array} Array containing own observers for the given class\n   * @protected\n   */\n  function ownObservers(constructor) {\n    if (!constructor.hasOwnProperty(\n      JSCompiler_renameProperty('__ownObservers', constructor))) {\n        constructor.__ownObservers =\n        constructor.hasOwnProperty(JSCompiler_renameProperty('observers', constructor)) ?\n        /** @type {PolymerElementConstructor} */ (constructor).observers : null;\n    }\n    return constructor.__ownObservers;\n  }\n\n  /**\n   * Creates effects for a property.\n   *\n   * Note, once a property has been set to\n   * `readOnly`, `computed`, `reflectToAttribute`, or `notify`\n   * these values may not be changed. For example, a subclass cannot\n   * alter these settings. However, additional `observers` may be added\n   * by subclasses.\n   *\n   * The info object should may contain property metadata as follows:\n   *\n   * * `type`: {function} type to which an attribute matching the property\n   * is deserialized. Note the property is camel-cased from a dash-cased\n   * attribute. For example, 'foo-bar' attribute is deserialized to a\n   * property named 'fooBar'.\n   *\n   * * `readOnly`: {boolean} creates a readOnly property and\n   * makes a private setter for the private of the form '_setFoo' for a\n   * property 'foo',\n   *\n   * * `computed`: {string} creates a computed property. A computed property\n   * also automatically is set to `readOnly: true`. The value is calculated\n   * by running a method and arguments parsed from the given string. For\n   * example 'compute(foo)' will compute a given property when the\n   * 'foo' property changes by executing the 'compute' method. This method\n   * must return the computed value.\n   *\n   * * `reflectToAttribute`: {boolean} If true, the property value is reflected\n   * to an attribute of the same name. Note, the attribute is dash-cased\n   * so a property named 'fooBar' is reflected as 'foo-bar'.\n   *\n   * * `notify`: {boolean} sends a non-bubbling notification event when\n   * the property changes. For example, a property named 'foo' sends an\n   * event named 'foo-changed' with `event.detail` set to the value of\n   * the property.\n   *\n   * * observer: {string} name of a method that runs when the property\n   * changes. The arguments of the method are (value, previousValue).\n   *\n   * Note: Users may want control over modifying property\n   * effects via subclassing. For example, a user might want to make a\n   * reflectToAttribute property not do so in a subclass. We've chosen to\n   * disable this because it leads to additional complication.\n   * For example, a readOnly effect generates a special setter. If a subclass\n   * disables the effect, the setter would fail unexpectedly.\n   * Based on feedback, we may want to try to make effects more malleable\n   * and/or provide an advanced api for manipulating them.\n   * Also consider adding warnings when an effect cannot be changed.\n   *\n   * @param {!PolymerElement} proto Element class prototype to add accessors\n   *   and effects to\n   * @param {string} name Name of the property.\n   * @param {Object} info Info object from which to create property effects.\n   * Supported keys:\n   * @param {Object} allProps Flattened map of all properties defined in this\n   *   element (including inherited properties)\n   * @return {void}\n   * @private\n   */\n  function createPropertyFromConfig(proto, name, info, allProps) {\n    // computed forces readOnly...\n    if (info.computed) {\n      info.readOnly = true;\n    }\n    // Note, since all computed properties are readOnly, this prevents\n    // adding additional computed property effects (which leads to a confusing\n    // setup where multiple triggers for setting a property)\n    // While we do have `hasComputedEffect` this is set on the property's\n    // dependencies rather than itself.\n    if (info.computed && !proto._hasReadOnlyEffect(name)) {\n      proto._createComputedProperty(name, info.computed, allProps);\n    }\n    if (info.readOnly && !proto._hasReadOnlyEffect(name)) {\n      proto._createReadOnlyProperty(name, !info.computed);\n    }\n    if (info.reflectToAttribute && !proto._hasReflectEffect(name)) {\n      proto._createReflectedProperty(name);\n    }\n    if (info.notify && !proto._hasNotifyEffect(name)) {\n      proto._createNotifyingProperty(name);\n    }\n    // always add observer\n    if (info.observer) {\n      proto._createPropertyObserver(name, info.observer, allProps[info.observer]);\n    }\n    // always create the mapping from attribute back to property for deserialization.\n    proto._addPropertyToAttributeMap(name);\n  }\n\n  /**\n   * Process all style elements in the element template. Styles with the\n   * `include` attribute are processed such that any styles in\n   * the associated \"style modules\" are included in the element template.\n   * @param {PolymerElementConstructor} klass Element class\n   * @param {!HTMLTemplateElement} template Template to process\n   * @param {string} is Name of element\n   * @param {string} baseURI Base URI for element\n   * @private\n   */\n  function processElementStyles(klass, template, is, baseURI) {\n    const templateStyles = template.content.querySelectorAll('style');\n    const stylesWithImports = stylesFromTemplate(template);\n    // insert styles from <link rel=\"import\" type=\"css\"> at the top of the template\n    const linkedStyles = stylesFromModuleImports(is);\n    const firstTemplateChild = template.content.firstElementChild;\n    for (let idx = 0; idx < linkedStyles.length; idx++) {\n      let s = linkedStyles[idx];\n      s.textContent = klass._processStyleText(s.textContent, baseURI);\n      template.content.insertBefore(s, firstTemplateChild);\n    }\n    // keep track of the last \"concrete\" style in the template we have encountered\n    let templateStyleIndex = 0;\n    // ensure all gathered styles are actually in this template.\n    for (let i = 0; i < stylesWithImports.length; i++) {\n      let s = stylesWithImports[i];\n      let templateStyle = templateStyles[templateStyleIndex];\n      // if the style is not in this template, it's been \"included\" and\n      // we put a clone of it in the template before the style that included it\n      if (templateStyle !== s) {\n        s = s.cloneNode(true);\n        templateStyle.parentNode.insertBefore(s, templateStyle);\n      } else {\n        templateStyleIndex++;\n      }\n      s.textContent = klass._processStyleText(s.textContent, baseURI);\n    }\n    if (window.ShadyCSS) {\n      window.ShadyCSS.prepareTemplate(template, is);\n    }\n  }\n\n  /**\n   * @polymer\n   * @mixinClass\n   * @unrestricted\n   * @implements {Polymer_ElementMixin}\n   */\n  class PolymerElement extends polymerElementBase {\n\n    /**\n     * Override of PropertiesMixin _finalizeClass to create observers and\n     * find the template.\n     * @return {void}\n     * @protected\n     * @override\n     * @suppress {missingProperties} Interfaces in closure do not inherit statics, but classes do\n     */\n   static _finalizeClass() {\n      super._finalizeClass();\n      if (this.hasOwnProperty(\n        JSCompiler_renameProperty('is', this)) &&  this.is) {\n        register(this.prototype);\n      }\n      const observers = ownObservers(this);\n      if (observers) {\n        this.createObservers(observers, this._properties);\n      }\n      // note: create \"working\" template that is finalized at instance time\n      let template = /** @type {PolymerElementConstructor} */ (this).template;\n      if (template) {\n        if (typeof template === 'string') {\n          console.error('template getter must return HTMLTemplateElement');\n          template = null;\n        } else {\n          template = template.cloneNode(true);\n        }\n      }\n\n      this.prototype._template = template;\n    }\n\n    /**\n     * Override of PropertiesChanged createProperties to create accessors\n     * and property effects for all of the properties.\n     * @return {void}\n     * @protected\n     * @override\n     */\n     static createProperties(props) {\n      for (let p in props) {\n        createPropertyFromConfig(this.prototype, p, props[p], props);\n      }\n    }\n\n    /**\n     * Creates observers for the given `observers` array.\n     * Leverages `PropertyEffects` to create observers.\n     * @param {Object} observers Array of observer descriptors for\n     *   this class\n     * @param {Object} dynamicFns Object containing keys for any properties\n     *   that are functions and should trigger the effect when the function\n     *   reference is changed\n     * @return {void}\n     * @protected\n     */\n    static createObservers(observers, dynamicFns) {\n      const proto = this.prototype;\n      for (let i=0; i < observers.length; i++) {\n        proto._createMethodObserver(observers[i], dynamicFns);\n      }\n    }\n\n    /**\n     * Returns the template that will be stamped into this element's shadow root.\n     *\n     * If a `static get is()` getter is defined, the default implementation\n     * will return the first `<template>` in a `dom-module` whose `id`\n     * matches this element's `is`.\n     *\n     * Users may override this getter to return an arbitrary template\n     * (in which case the `is` getter is unnecessary). The template returned\n     * may be either an `HTMLTemplateElement` or a string that will be\n     * automatically parsed into a template.\n     *\n     * Note that when subclassing, if the super class overrode the default\n     * implementation and the subclass would like to provide an alternate\n     * template via a `dom-module`, it should override this getter and\n     * return `DomModule.import(this.is, 'template')`.\n     *\n     * If a subclass would like to modify the super class template, it should\n     * clone it rather than modify it in place.  If the getter does expensive\n     * work such as cloning/modifying a template, it should memoize the\n     * template for maximum performance:\n     *\n     *   let memoizedTemplate;\n     *   class MySubClass extends MySuperClass {\n     *     static get template() {\n     *       if (!memoizedTemplate) {\n     *         memoizedTemplate = super.template.cloneNode(true);\n     *         let subContent = document.createElement('div');\n     *         subContent.textContent = 'This came from MySubClass';\n     *         memoizedTemplate.content.appendChild(subContent);\n     *       }\n     *       return memoizedTemplate;\n     *     }\n     *   }\n     *\n     * @return {HTMLTemplateElement|string} Template to be stamped\n     */\n    static get template() {\n      if (!this.hasOwnProperty(JSCompiler_renameProperty('_template', this))) {\n        this._template = DomModule && DomModule.import(\n          /** @type {PolymerElementConstructor}*/ (this).is, 'template') ||\n          // note: implemented so a subclass can retrieve the super\n          // template; call the super impl this way so that `this` points\n          // to the superclass.\n          Object.getPrototypeOf(/** @type {PolymerElementConstructor}*/ (this).prototype).constructor.template;\n      }\n      return this._template;\n    }\n\n    /**\n     * Path matching the url from which the element was imported.\n     *\n     * This path is used to resolve url's in template style cssText.\n     * The `importPath` property is also set on element instances and can be\n     * used to create bindings relative to the import path.\n     *\n     * For elements defined in ES modules, users should implement\n     * `static get importMeta() { return import.meta; }`, and the default\n     * implementation of `importPath` will  return `import.meta.url`'s path.\n     * For elements defined in HTML imports, this getter will return the path\n     * to the document containing a `dom-module` element matching this\n     * element's static `is` property.\n     *\n     * Note, this path should contain a trailing `/`.\n     *\n     * @return {string} The import path for this element class\n     * @suppress {missingProperties}\n     */\n    static get importPath() {\n      if (!this.hasOwnProperty(JSCompiler_renameProperty('_importPath', this))) {\n        const meta = this.importMeta;\n        if (meta) {\n          this._importPath = pathFromUrl(meta.url);\n        } else {\n          const module = DomModule && DomModule.import(/** @type {PolymerElementConstructor} */ (this).is);\n          this._importPath = (module && module.assetpath) ||\n            Object.getPrototypeOf(/** @type {PolymerElementConstructor}*/ (this).prototype).constructor.importPath;\n        }\n      }\n      return this._importPath;\n    }\n\n    constructor() {\n      super();\n      /** @type {HTMLTemplateElement} */\n      this._template;\n      /** @type {string} */\n      this._importPath;\n      /** @type {string} */\n      this.rootPath;\n      /** @type {string} */\n      this.importPath;\n      /** @type {StampedTemplate | HTMLElement | ShadowRoot} */\n      this.root;\n      /** @type {!Object<string, !Element>} */\n      this.$;\n    }\n\n    /**\n     * Overrides the default `PropertyAccessors` to ensure class\n     * metaprogramming related to property accessors and effects has\n     * completed (calls `finalize`).\n     *\n     * It also initializes any property defaults provided via `value` in\n     * `properties` metadata.\n     *\n     * @return {void}\n     * @override\n     * @suppress {invalidCasts}\n     */\n    _initializeProperties() {\n      instanceCount++;\n      this.constructor.finalize();\n      // note: finalize template when we have access to `localName` to\n      // avoid dependence on `is` for polyfilling styling.\n      this.constructor._finalizeTemplate(/** @type {!HTMLElement} */(this).localName);\n      super._initializeProperties();\n      // set path defaults\n      this.rootPath = rootPath$0;\n      this.importPath = this.constructor.importPath;\n      // apply property defaults...\n      let p$ = propertyDefaults(this.constructor);\n      if (!p$) {\n        return;\n      }\n      for (let p in p$) {\n        let info = p$[p];\n        // Don't set default value if there is already an own property, which\n        // happens when a `properties` property with default but no effects had\n        // a property set (e.g. bound) by its host before upgrade\n        if (!this.hasOwnProperty(p)) {\n          let value = typeof info.value == 'function' ?\n            info.value.call(this) :\n            info.value;\n          // Set via `_setProperty` if there is an accessor, to enable\n          // initializing readOnly property defaults\n          if (this._hasAccessor(p)) {\n            this._setPendingProperty(p, value, true);\n          } else {\n            this[p] = value;\n          }\n        }\n      }\n    }\n\n    /**\n     * Gather style text for a style element in the template.\n     *\n     * @param {string} cssText Text containing styling to process\n     * @param {string} baseURI Base URI to rebase CSS paths against\n     * @return {string} The processed CSS text\n     * @protected\n     */\n    static _processStyleText(cssText, baseURI) {\n      return resolveCss(cssText, baseURI);\n    }\n\n    /**\n    * Configures an element `proto` to function with a given `template`.\n    * The element name `is` and extends `ext` must be specified for ShadyCSS\n    * style scoping.\n    *\n    * @param {string} is Tag name (or type extension name) for this element\n    * @return {void}\n    * @protected\n    */\n    static _finalizeTemplate(is) {\n      /** @const {HTMLTemplateElement} */\n      const template = this.prototype._template;\n      if (template && !template.__polymerFinalized) {\n        template.__polymerFinalized = true;\n        const importPath = this.importPath;\n        const baseURI = importPath ? resolveUrl$0(importPath) : '';\n        // e.g. support `include=\"module-name\"`, and ShadyCSS\n        processElementStyles(this, template, is, baseURI);\n        this.prototype._bindTemplate(template);\n      }\n    }\n\n    /**\n     * Provides a default implementation of the standard Custom Elements\n     * `connectedCallback`.\n     *\n     * The default implementation enables the property effects system and\n     * flushes any pending properties, and updates shimmed CSS properties\n     * when using the ShadyCSS scoping/custom properties polyfill.\n     *\n     * @suppress {missingProperties, invalidCasts} Super may or may not implement the callback\n     * @return {void}\n     */\n    connectedCallback() {\n      if (window.ShadyCSS && this._template) {\n        window.ShadyCSS.styleElement(/** @type {!HTMLElement} */(this));\n      }\n      super.connectedCallback();\n    }\n\n    /**\n     * Stamps the element template.\n     *\n     * @return {void}\n     * @override\n     */\n    ready() {\n      if (this._template) {\n        this.root = this._stampTemplate(this._template);\n        this.$ = this.root.$;\n      }\n      super.ready();\n    }\n\n    /**\n     * Implements `PropertyEffects`'s `_readyClients` call. Attaches\n     * element dom by calling `_attachDom` with the dom stamped from the\n     * element's template via `_stampTemplate`. Note that this allows\n     * client dom to be attached to the element prior to any observers\n     * running.\n     *\n     * @return {void}\n     * @override\n     */\n    _readyClients() {\n      if (this._template) {\n        this.root = this._attachDom(/** @type {StampedTemplate} */(this.root));\n      }\n      // The super._readyClients here sets the clients initialized flag.\n      // We must wait to do this until after client dom is created/attached\n      // so that this flag can be checked to prevent notifications fired\n      // during this process from being handled before clients are ready.\n      super._readyClients();\n    }\n\n\n    /**\n     * Attaches an element's stamped dom to itself. By default,\n     * this method creates a `shadowRoot` and adds the dom to it.\n     * However, this method may be overridden to allow an element\n     * to put its dom in another location.\n     *\n     * @throws {Error}\n     * @suppress {missingReturn}\n     * @param {StampedTemplate} dom to attach to the element.\n     * @return {ShadowRoot} node to which the dom has been attached.\n     */\n    _attachDom(dom) {\n      if (this.attachShadow) {\n        if (dom) {\n          if (!this.shadowRoot) {\n            this.attachShadow({mode: 'open'});\n          }\n          this.shadowRoot.appendChild(dom);\n          return this.shadowRoot;\n        }\n        return null;\n      } else {\n        throw new Error('ShadowDOM not available. ' +\n          // TODO(sorvell): move to compile-time conditional when supported\n        'PolymerElement can create dom as children instead of in ' +\n        'ShadowDOM by setting `this.root = this;\\` before \\`ready\\`.');\n      }\n    }\n\n    /**\n     * When using the ShadyCSS scoping and custom property shim, causes all\n     * shimmed styles in this element (and its subtree) to be updated\n     * based on current custom property values.\n     *\n     * The optional parameter overrides inline custom property styles with an\n     * object of properties where the keys are CSS properties, and the values\n     * are strings.\n     *\n     * Example: `this.updateStyles({'--color': 'blue'})`\n     *\n     * These properties are retained unless a value of `null` is set.\n     *\n     * Note: This function does not support updating CSS mixins.\n     * You can not dynamically change the value of an `@apply`.\n     *\n     * @param {Object=} properties Bag of custom property key/values to\n     *   apply to this element.\n     * @return {void}\n     * @suppress {invalidCasts}\n     */\n    updateStyles(properties) {\n      if (window.ShadyCSS) {\n        window.ShadyCSS.styleSubtree(/** @type {!HTMLElement} */(this), properties);\n      }\n    }\n\n    /**\n     * Rewrites a given URL relative to a base URL. The base URL defaults to\n     * the original location of the document containing the `dom-module` for\n     * this element. This method will return the same URL before and after\n     * bundling.\n     *\n     * Note that this function performs no resolution for URLs that start\n     * with `/` (absolute URLs) or `#` (hash identifiers).  For general purpose\n     * URL resolution, use `window.URL`.\n     *\n     * @param {string} url URL to resolve.\n     * @param {string=} base Optional base URL to resolve against, defaults\n     * to the element's `importPath`\n     * @return {string} Rewritten URL relative to base\n     */\n    resolveUrl(url, base) {\n      if (!base && this.importPath) {\n        base = resolveUrl$0(this.importPath);\n      }\n      return resolveUrl$0(url, base);\n    }\n\n    /**\n     * Overrides `PropertyAccessors` to add map of dynamic functions on\n     * template info, for consumption by `PropertyEffects` template binding\n     * code. This map determines which method templates should have accessors\n     * created for them.\n     *\n     * @override\n     * @suppress {missingProperties} Interfaces in closure do not inherit statics, but classes do\n     */\n    static _parseTemplateContent(template, templateInfo, nodeInfo) {\n      templateInfo.dynamicFns = templateInfo.dynamicFns || this._properties;\n      return super._parseTemplateContent(template, templateInfo, nodeInfo);\n    }\n\n  }\n\n  return PolymerElement;\n});\n\n/**\n * Provides basic tracking of element definitions (registrations) and\n * instance counts.\n *\n * @summary Provides basic tracking of element definitions (registrations) and\n * instance counts.\n */\n`TODO(modulizer): A namespace named Polymer.telemetry was\ndeclared here. The surrounding comments should be reviewed,\nand this string can then be deleted`;\n\n/**\n * Total number of Polymer element instances created.\n * @type {number}\n */\nexport let instanceCount = 0;\n\n/**\n * Array of Polymer element classes that have been finalized.\n * @type {Array<PolymerElement>}\n */\nexport const registrations = [];\n\n/**\n * @param {!PolymerElementConstructor} prototype Element prototype to log\n * @this {this}\n * @private\n */\nfunction _regLog(prototype) {\n  console.log('[' + prototype.is + ']: registered');\n}\n\n/**\n * Registers a class prototype for telemetry purposes.\n * @param {HTMLElement} prototype Element prototype to register\n * @this {this}\n * @protected\n */\nexport function register(prototype) {\n  registrations.push(prototype);\n  undefined && _regLog(prototype);\n}\n\n/**\n * Logs all elements registered with an `is` to the console.\n * @public\n * @this {this}\n */\nexport function dumpRegistrations() {\n  registrations.forEach(_regLog);\n}\n\n/**\n * When using the ShadyCSS scoping and custom property shim, causes all\n * shimmed `styles` (via `custom-style`) in the document (and its subtree)\n * to be updated based on current custom property values.\n *\n * The optional parameter overrides inline custom property styles with an\n * object of properties where the keys are CSS properties, and the values\n * are strings.\n *\n * Example: `updateStyles({'--color': 'blue'})`\n *\n * These properties are retained unless a value of `null` is set.\n *\n * @param {Object=} props Bag of custom property key/values to\n *   apply to the document.\n * @return {void}\n */\nexport const updateStyles = function(props) {\n  if (window.ShadyCSS) {\n    window.ShadyCSS.styleDocument(props);\n  }\n};\n","/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\n\nimport { ElementMixin } from './lib/mixins/element-mixin.js';\nexport { html } from './lib/utils/html-tag.js';\n\n/**\n * Base class that provides the core API for Polymer's meta-programming\n * features including template stamping, data-binding, attribute deserialization,\n * and property change observation.\n *\n * @customElement\n * @polymer\n * @constructor\n * @implements {Polymer_ElementMixin}\n * @extends HTMLElement\n * @appliesMixin ElementMixin\n * @summary Custom element base class that provides the core API for Polymer's\n *   key meta-programming features including template stamping, data-binding,\n *   attribute deserialization, and property change observation\n */\nexport const PolymerElement = ElementMixin(HTMLElement);\n\n","var $export = require('./_export');\n// 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])\n$export($export.S, 'Object', { create: require('./_object-create') });\n","require('../../modules/es6.object.create');\nvar $Object = require('../../modules/_core').Object;\nmodule.exports = function create(P, D) {\n  return $Object.create(P, D);\n};\n","module.exports = { \"default\": require(\"core-js/library/fn/object/create\"), __esModule: true };","// Works with __proto__ only. Old v8 can't work with null proto objects.\n/* eslint-disable no-proto */\nvar isObject = require('./_is-object');\nvar anObject = require('./_an-object');\nvar check = function (O, proto) {\n  anObject(O);\n  if (!isObject(proto) && proto !== null) throw TypeError(proto + \": can't set as prototype!\");\n};\nmodule.exports = {\n  set: Object.setPrototypeOf || ('__proto__' in {} ? // eslint-disable-line\n    function (test, buggy, set) {\n      try {\n        set = require('./_ctx')(Function.call, require('./_object-gopd').f(Object.prototype, '__proto__').set, 2);\n        set(test, []);\n        buggy = !(test instanceof Array);\n      } catch (e) { buggy = true; }\n      return function setPrototypeOf(O, proto) {\n        check(O, proto);\n        if (buggy) O.__proto__ = proto;\n        else set(O, proto);\n        return O;\n      };\n    }({}, false) : undefined),\n  check: check\n};\n","// 19.1.3.19 Object.setPrototypeOf(O, proto)\nvar $export = require('./_export');\n$export($export.S, 'Object', { setPrototypeOf: require('./_set-proto').set });\n","require('../../modules/es6.object.set-prototype-of');\nmodule.exports = require('../../modules/_core').Object.setPrototypeOf;\n","module.exports = { \"default\": require(\"core-js/library/fn/object/set-prototype-of\"), __esModule: true };","\"use strict\";\n\nexports.__esModule = true;\n\nvar _setPrototypeOf = require(\"../core-js/object/set-prototype-of\");\n\nvar _setPrototypeOf2 = _interopRequireDefault(_setPrototypeOf);\n\nvar _create = require(\"../core-js/object/create\");\n\nvar _create2 = _interopRequireDefault(_create);\n\nvar _typeof2 = require(\"../helpers/typeof\");\n\nvar _typeof3 = _interopRequireDefault(_typeof2);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nexports.default = function (subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + (typeof superClass === \"undefined\" ? \"undefined\" : (0, _typeof3.default)(superClass)));\n  }\n\n  subClass.prototype = (0, _create2.default)(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf2.default ? (0, _setPrototypeOf2.default)(subClass, superClass) : subClass.__proto__ = superClass;\n};","var $export = require('./_export');\n// 19.1.2.4 / 15.2.3.6 Object.defineProperty(O, P, Attributes)\n$export($export.S + $export.F * !require('./_descriptors'), 'Object', { defineProperty: require('./_object-dp').f });\n","require('../../modules/es6.object.define-property');\nvar $Object = require('../../modules/_core').Object;\nmodule.exports = function defineProperty(it, key, desc) {\n  return $Object.defineProperty(it, key, desc);\n};\n","module.exports = { \"default\": require(\"core-js/library/fn/object/define-property\"), __esModule: true };","\"use strict\";\n\nexports.__esModule = true;\n\nvar _defineProperty = require(\"../core-js/object/define-property\");\n\nvar _defineProperty2 = _interopRequireDefault(_defineProperty);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nexports.default = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      (0, _defineProperty2.default)(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();","require('./_wks-define')('observable');\n","// fallback for IE11 buggy Object.getOwnPropertyNames with iframe and window\nvar toIObject = require('./_to-iobject');\nvar gOPN = require('./_object-gopn').f;\nvar toString = {}.toString;\n\nvar windowNames = typeof window == 'object' && window && Object.getOwnPropertyNames\n  ? Object.getOwnPropertyNames(window) : [];\n\nvar getWindowNames = function (it) {\n  try {\n    return gOPN(it);\n  } catch (e) {\n    return windowNames.slice();\n  }\n};\n\nmodule.exports.f = function getOwnPropertyNames(it) {\n  return windowNames && toString.call(it) == '[object Window]' ? getWindowNames(it) : gOPN(toIObject(it));\n};\n","// 7.2.2 IsArray(argument)\nvar cof = require('./_cof');\nmodule.exports = Array.isArray || function isArray(arg) {\n  return cof(arg) == 'Array';\n};\n","// all enumerable object keys, includes symbols\nvar getKeys = require('./_object-keys');\nvar gOPS = require('./_object-gops');\nvar pIE = require('./_object-pie');\nmodule.exports = function (it) {\n  var result = getKeys(it);\n  var getSymbols = gOPS.f;\n  if (getSymbols) {\n    var symbols = getSymbols(it);\n    var isEnum = pIE.f;\n    var i = 0;\n    var key;\n    while (symbols.length > i) if (isEnum.call(it, key = symbols[i++])) result.push(key);\n  } return result;\n};\n","'use strict';\n// ECMAScript 6 symbols shim\nvar global = require('./_global');\nvar has = require('./_has');\nvar DESCRIPTORS = require('./_descriptors');\nvar $export = require('./_export');\nvar redefine = require('./_redefine');\nvar META = require('./_meta').KEY;\nvar $fails = require('./_fails');\nvar shared = require('./_shared');\nvar setToStringTag = require('./_set-to-string-tag');\nvar uid = require('./_uid');\nvar wks = require('./_wks');\nvar wksExt = require('./_wks-ext');\nvar wksDefine = require('./_wks-define');\nvar enumKeys = require('./_enum-keys');\nvar isArray = require('./_is-array');\nvar anObject = require('./_an-object');\nvar isObject = require('./_is-object');\nvar toIObject = require('./_to-iobject');\nvar toPrimitive = require('./_to-primitive');\nvar createDesc = require('./_property-desc');\nvar _create = require('./_object-create');\nvar gOPNExt = require('./_object-gopn-ext');\nvar $GOPD = require('./_object-gopd');\nvar $DP = require('./_object-dp');\nvar $keys = require('./_object-keys');\nvar gOPD = $GOPD.f;\nvar dP = $DP.f;\nvar gOPN = gOPNExt.f;\nvar $Symbol = global.Symbol;\nvar $JSON = global.JSON;\nvar _stringify = $JSON && $JSON.stringify;\nvar PROTOTYPE = 'prototype';\nvar HIDDEN = wks('_hidden');\nvar TO_PRIMITIVE = wks('toPrimitive');\nvar isEnum = {}.propertyIsEnumerable;\nvar SymbolRegistry = shared('symbol-registry');\nvar AllSymbols = shared('symbols');\nvar OPSymbols = shared('op-symbols');\nvar ObjectProto = Object[PROTOTYPE];\nvar USE_NATIVE = typeof $Symbol == 'function';\nvar QObject = global.QObject;\n// Don't use setters in Qt Script, https://github.com/zloirock/core-js/issues/173\nvar setter = !QObject || !QObject[PROTOTYPE] || !QObject[PROTOTYPE].findChild;\n\n// fallback for old Android, https://code.google.com/p/v8/issues/detail?id=687\nvar setSymbolDesc = DESCRIPTORS && $fails(function () {\n  return _create(dP({}, 'a', {\n    get: function () { return dP(this, 'a', { value: 7 }).a; }\n  })).a != 7;\n}) ? function (it, key, D) {\n  var protoDesc = gOPD(ObjectProto, key);\n  if (protoDesc) delete ObjectProto[key];\n  dP(it, key, D);\n  if (protoDesc && it !== ObjectProto) dP(ObjectProto, key, protoDesc);\n} : dP;\n\nvar wrap = function (tag) {\n  var sym = AllSymbols[tag] = _create($Symbol[PROTOTYPE]);\n  sym._k = tag;\n  return sym;\n};\n\nvar isSymbol = USE_NATIVE && typeof $Symbol.iterator == 'symbol' ? function (it) {\n  return typeof it == 'symbol';\n} : function (it) {\n  return it instanceof $Symbol;\n};\n\nvar $defineProperty = function defineProperty(it, key, D) {\n  if (it === ObjectProto) $defineProperty(OPSymbols, key, D);\n  anObject(it);\n  key = toPrimitive(key, true);\n  anObject(D);\n  if (has(AllSymbols, key)) {\n    if (!D.enumerable) {\n      if (!has(it, HIDDEN)) dP(it, HIDDEN, createDesc(1, {}));\n      it[HIDDEN][key] = true;\n    } else {\n      if (has(it, HIDDEN) && it[HIDDEN][key]) it[HIDDEN][key] = false;\n      D = _create(D, { enumerable: createDesc(0, false) });\n    } return setSymbolDesc(it, key, D);\n  } return dP(it, key, D);\n};\nvar $defineProperties = function defineProperties(it, P) {\n  anObject(it);\n  var keys = enumKeys(P = toIObject(P));\n  var i = 0;\n  var l = keys.length;\n  var key;\n  while (l > i) $defineProperty(it, key = keys[i++], P[key]);\n  return it;\n};\nvar $create = function create(it, P) {\n  return P === undefined ? _create(it) : $defineProperties(_create(it), P);\n};\nvar $propertyIsEnumerable = function propertyIsEnumerable(key) {\n  var E = isEnum.call(this, key = toPrimitive(key, true));\n  if (this === ObjectProto && has(AllSymbols, key) && !has(OPSymbols, key)) return false;\n  return E || !has(this, key) || !has(AllSymbols, key) || has(this, HIDDEN) && this[HIDDEN][key] ? E : true;\n};\nvar $getOwnPropertyDescriptor = function getOwnPropertyDescriptor(it, key) {\n  it = toIObject(it);\n  key = toPrimitive(key, true);\n  if (it === ObjectProto && has(AllSymbols, key) && !has(OPSymbols, key)) return;\n  var D = gOPD(it, key);\n  if (D && has(AllSymbols, key) && !(has(it, HIDDEN) && it[HIDDEN][key])) D.enumerable = true;\n  return D;\n};\nvar $getOwnPropertyNames = function getOwnPropertyNames(it) {\n  var names = gOPN(toIObject(it));\n  var result = [];\n  var i = 0;\n  var key;\n  while (names.length > i) {\n    if (!has(AllSymbols, key = names[i++]) && key != HIDDEN && key != META) result.push(key);\n  } return result;\n};\nvar $getOwnPropertySymbols = function getOwnPropertySymbols(it) {\n  var IS_OP = it === ObjectProto;\n  var names = gOPN(IS_OP ? OPSymbols : toIObject(it));\n  var result = [];\n  var i = 0;\n  var key;\n  while (names.length > i) {\n    if (has(AllSymbols, key = names[i++]) && (IS_OP ? has(ObjectProto, key) : true)) result.push(AllSymbols[key]);\n  } return result;\n};\n\n// 19.4.1.1 Symbol([description])\nif (!USE_NATIVE) {\n  $Symbol = function Symbol() {\n    if (this instanceof $Symbol) throw TypeError('Symbol is not a constructor!');\n    var tag = uid(arguments.length > 0 ? arguments[0] : undefined);\n    var $set = function (value) {\n      if (this === ObjectProto) $set.call(OPSymbols, value);\n      if (has(this, HIDDEN) && has(this[HIDDEN], tag)) this[HIDDEN][tag] = false;\n      setSymbolDesc(this, tag, createDesc(1, value));\n    };\n    if (DESCRIPTORS && setter) setSymbolDesc(ObjectProto, tag, { configurable: true, set: $set });\n    return wrap(tag);\n  };\n  redefine($Symbol[PROTOTYPE], 'toString', function toString() {\n    return this._k;\n  });\n\n  $GOPD.f = $getOwnPropertyDescriptor;\n  $DP.f = $defineProperty;\n  require('./_object-gopn').f = gOPNExt.f = $getOwnPropertyNames;\n  require('./_object-pie').f = $propertyIsEnumerable;\n  require('./_object-gops').f = $getOwnPropertySymbols;\n\n  if (DESCRIPTORS && !require('./_library')) {\n    redefine(ObjectProto, 'propertyIsEnumerable', $propertyIsEnumerable, true);\n  }\n\n  wksExt.f = function (name) {\n    return wrap(wks(name));\n  };\n}\n\n$export($export.G + $export.W + $export.F * !USE_NATIVE, { Symbol: $Symbol });\n\nfor (var es6Symbols = (\n  // 19.4.2.2, 19.4.2.3, 19.4.2.4, 19.4.2.6, 19.4.2.8, 19.4.2.9, 19.4.2.10, 19.4.2.11, 19.4.2.12, 19.4.2.13, 19.4.2.14\n  'hasInstance,isConcatSpreadable,iterator,match,replace,search,species,split,toPrimitive,toStringTag,unscopables'\n).split(','), j = 0; es6Symbols.length > j;)wks(es6Symbols[j++]);\n\nfor (var wellKnownSymbols = $keys(wks.store), k = 0; wellKnownSymbols.length > k;) wksDefine(wellKnownSymbols[k++]);\n\n$export($export.S + $export.F * !USE_NATIVE, 'Symbol', {\n  // 19.4.2.1 Symbol.for(key)\n  'for': function (key) {\n    return has(SymbolRegistry, key += '')\n      ? SymbolRegistry[key]\n      : SymbolRegistry[key] = $Symbol(key);\n  },\n  // 19.4.2.5 Symbol.keyFor(sym)\n  keyFor: function keyFor(sym) {\n    if (!isSymbol(sym)) throw TypeError(sym + ' is not a symbol!');\n    for (var key in SymbolRegistry) if (SymbolRegistry[key] === sym) return key;\n  },\n  useSetter: function () { setter = true; },\n  useSimple: function () { setter = false; }\n});\n\n$export($export.S + $export.F * !USE_NATIVE, 'Object', {\n  // 19.1.2.2 Object.create(O [, Properties])\n  create: $create,\n  // 19.1.2.4 Object.defineProperty(O, P, Attributes)\n  defineProperty: $defineProperty,\n  // 19.1.2.3 Object.defineProperties(O, Properties)\n  defineProperties: $defineProperties,\n  // 19.1.2.6 Object.getOwnPropertyDescriptor(O, P)\n  getOwnPropertyDescriptor: $getOwnPropertyDescriptor,\n  // 19.1.2.7 Object.getOwnPropertyNames(O)\n  getOwnPropertyNames: $getOwnPropertyNames,\n  // 19.1.2.8 Object.getOwnPropertySymbols(O)\n  getOwnPropertySymbols: $getOwnPropertySymbols\n});\n\n// 24.3.2 JSON.stringify(value [, replacer [, space]])\n$JSON && $export($export.S + $export.F * (!USE_NATIVE || $fails(function () {\n  var S = $Symbol();\n  // MS Edge converts symbol values to JSON as {}\n  // WebKit converts symbol values to JSON as null\n  // V8 throws on boxed symbols\n  return _stringify([S]) != '[null]' || _stringify({ a: S }) != '{}' || _stringify(Object(S)) != '{}';\n})), 'JSON', {\n  stringify: function stringify(it) {\n    var args = [it];\n    var i = 1;\n    var replacer, $replacer;\n    while (arguments.length > i) args.push(arguments[i++]);\n    $replacer = replacer = args[1];\n    if (!isObject(replacer) && it === undefined || isSymbol(it)) return; // IE8 returns string on undefined\n    if (!isArray(replacer)) replacer = function (key, value) {\n      if (typeof $replacer == 'function') value = $replacer.call(this, key, value);\n      if (!isSymbol(value)) return value;\n    };\n    args[1] = replacer;\n    return _stringify.apply($JSON, args);\n  }\n});\n\n// 19.4.3.4 Symbol.prototype[@@toPrimitive](hint)\n$Symbol[PROTOTYPE][TO_PRIMITIVE] || require('./_hide')($Symbol[PROTOTYPE], TO_PRIMITIVE, $Symbol[PROTOTYPE].valueOf);\n// 19.4.3.5 Symbol.prototype[@@toStringTag]\nsetToStringTag($Symbol, 'Symbol');\n// 20.2.1.9 Math[@@toStringTag]\nsetToStringTag(Math, 'Math', true);\n// 24.3.3 JSON[@@toStringTag]\nsetToStringTag(global.JSON, 'JSON', true);\n","require('../../modules/es6.symbol');\nrequire('../../modules/es6.object.to-string');\nrequire('../../modules/es7.symbol.async-iterator');\nrequire('../../modules/es7.symbol.observable');\nmodule.exports = require('../../modules/_core').Symbol;\n","module.exports = { \"default\": require(\"core-js/library/fn/symbol\"), __esModule: true };","module.exports = function (done, value) {\n  return { value: value, done: !!done };\n};\n","module.exports = function () { /* empty */ };\n","'use strict';\nvar addToUnscopables = require('./_add-to-unscopables');\nvar step = require('./_iter-step');\nvar Iterators = require('./_iterators');\nvar toIObject = require('./_to-iobject');\n\n// 22.1.3.4 Array.prototype.entries()\n// 22.1.3.13 Array.prototype.keys()\n// 22.1.3.29 Array.prototype.values()\n// 22.1.3.30 Array.prototype[@@iterator]()\nmodule.exports = require('./_iter-define')(Array, 'Array', function (iterated, kind) {\n  this._t = toIObject(iterated); // target\n  this._i = 0;                   // next index\n  this._k = kind;                // kind\n// 22.1.5.2.1 %ArrayIteratorPrototype%.next()\n}, function () {\n  var O = this._t;\n  var kind = this._k;\n  var index = this._i++;\n  if (!O || index >= O.length) {\n    this._t = undefined;\n    return step(1);\n  }\n  if (kind == 'keys') return step(0, index);\n  if (kind == 'values') return step(0, O[index]);\n  return step(0, [index, O[index]]);\n}, 'values');\n\n// argumentsList[@@iterator] is %ArrayProto_values% (9.4.4.6, 9.4.4.7)\nIterators.Arguments = Iterators.Array;\n\naddToUnscopables('keys');\naddToUnscopables('values');\naddToUnscopables('entries');\n","require('./es6.array.iterator');\nvar global = require('./_global');\nvar hide = require('./_hide');\nvar Iterators = require('./_iterators');\nvar TO_STRING_TAG = require('./_wks')('toStringTag');\n\nvar DOMIterables = ('CSSRuleList,CSSStyleDeclaration,CSSValueList,ClientRectList,DOMRectList,DOMStringList,' +\n  'DOMTokenList,DataTransferItemList,FileList,HTMLAllCollection,HTMLCollection,HTMLFormElement,HTMLSelectElement,' +\n  'MediaList,MimeTypeArray,NamedNodeMap,NodeList,PaintRequestList,Plugin,PluginArray,SVGLengthList,SVGNumberList,' +\n  'SVGPathSegList,SVGPointList,SVGStringList,SVGTransformList,SourceBufferList,StyleSheetList,TextTrackCueList,' +\n  'TextTrackList,TouchList').split(',');\n\nfor (var i = 0; i < DOMIterables.length; i++) {\n  var NAME = DOMIterables[i];\n  var Collection = global[NAME];\n  var proto = Collection && Collection.prototype;\n  if (proto && !proto[TO_STRING_TAG]) hide(proto, TO_STRING_TAG, NAME);\n  Iterators[NAME] = Iterators.Array;\n}\n","var document = require('./_global').document;\nmodule.exports = document && document.documentElement;\n","'use strict';\nvar create = require('./_object-create');\nvar descriptor = require('./_property-desc');\nvar setToStringTag = require('./_set-to-string-tag');\nvar IteratorPrototype = {};\n\n// 25.1.2.1.1 %IteratorPrototype%[@@iterator]()\nrequire('./_hide')(IteratorPrototype, require('./_wks')('iterator'), function () { return this; });\n\nmodule.exports = function (Constructor, NAME, next) {\n  Constructor.prototype = create(IteratorPrototype, { next: descriptor(1, next) });\n  setToStringTag(Constructor, NAME + ' Iterator');\n};\n","var toInteger = require('./_to-integer');\nvar defined = require('./_defined');\n// true  -> String#at\n// false -> String#codePointAt\nmodule.exports = function (TO_STRING) {\n  return function (that, pos) {\n    var s = String(defined(that));\n    var i = toInteger(pos);\n    var l = s.length;\n    var a, b;\n    if (i < 0 || i >= l) return TO_STRING ? '' : undefined;\n    a = s.charCodeAt(i);\n    return a < 0xd800 || a > 0xdbff || i + 1 === l || (b = s.charCodeAt(i + 1)) < 0xdc00 || b > 0xdfff\n      ? TO_STRING ? s.charAt(i) : a\n      : TO_STRING ? s.slice(i, i + 2) : (a - 0xd800 << 10) + (b - 0xdc00) + 0x10000;\n  };\n};\n","'use strict';\nvar $at = require('./_string-at')(true);\n\n// 21.1.3.27 String.prototype[@@iterator]()\nrequire('./_iter-define')(String, 'String', function (iterated) {\n  this._t = String(iterated); // target\n  this._i = 0;                // next index\n// 21.1.5.2.1 %StringIteratorPrototype%.next()\n}, function () {\n  var O = this._t;\n  var index = this._i;\n  var point;\n  if (index >= O.length) return { value: undefined, done: true };\n  point = $at(O, index);\n  this._i += point.length;\n  return { value: point, done: false };\n});\n","require('../../modules/es6.string.iterator');\nrequire('../../modules/web.dom.iterable');\nmodule.exports = require('../../modules/_wks-ext').f('iterator');\n","module.exports = { \"default\": require(\"core-js/library/fn/symbol/iterator\"), __esModule: true };","\"use strict\";\n\nexports.__esModule = true;\n\nvar _typeof2 = require(\"../helpers/typeof\");\n\nvar _typeof3 = _interopRequireDefault(_typeof2);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nexports.default = function (self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && ((typeof call === \"undefined\" ? \"undefined\" : (0, _typeof3.default)(call)) === \"object\" || typeof call === \"function\") ? call : self;\n};","\"use strict\";\n\nexports.__esModule = true;\n\nexports.default = function (instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n};","// 19.1.2.5 Object.freeze(O)\nvar isObject = require('./_is-object');\nvar meta = require('./_meta').onFreeze;\n\nrequire('./_object-sap')('freeze', function ($freeze) {\n  return function freeze(it) {\n    return $freeze && isObject(it) ? $freeze(meta(it)) : it;\n  };\n});\n","require('../../modules/es6.object.freeze');\nmodule.exports = require('../../modules/_core').Object.freeze;\n","module.exports = { \"default\": require(\"core-js/library/fn/object/freeze\"), __esModule: true };","var toInteger = require('./_to-integer');\nvar max = Math.max;\nvar min = Math.min;\nmodule.exports = function (index, length) {\n  index = toInteger(index);\n  return index < 0 ? max(index + length, 0) : min(index, length);\n};\n","// 7.1.15 ToLength\nvar toInteger = require('./_to-integer');\nvar min = Math.min;\nmodule.exports = function (it) {\n  return it > 0 ? min(toInteger(it), 0x1fffffffffffff) : 0; // pow(2, 53) - 1 == 9007199254740991\n};\n","// false -> Array#indexOf\n// true  -> Array#includes\nvar toIObject = require('./_to-iobject');\nvar toLength = require('./_to-length');\nvar toAbsoluteIndex = require('./_to-absolute-index');\nmodule.exports = function (IS_INCLUDES) {\n  return function ($this, el, fromIndex) {\n    var O = toIObject($this);\n    var length = toLength(O.length);\n    var index = toAbsoluteIndex(fromIndex, length);\n    var value;\n    // Array#includes uses SameValueZero equality algorithm\n    // eslint-disable-next-line no-self-compare\n    if (IS_INCLUDES && el != el) while (length > index) {\n      value = O[index++];\n      // eslint-disable-next-line no-self-compare\n      if (value != value) return true;\n    // Array#indexOf ignores holes, Array#includes - not\n    } else for (;length > index; index++) if (IS_INCLUDES || index in O) {\n      if (O[index] === el) return IS_INCLUDES || index || 0;\n    } return !IS_INCLUDES && -1;\n  };\n};\n","// fallback for non-array-like ES3 and non-enumerable old V8 strings\nvar cof = require('./_cof');\n// eslint-disable-next-line no-prototype-builtins\nmodule.exports = Object('z').propertyIsEnumerable(0) ? Object : function (it) {\n  return cof(it) == 'String' ? it.split('') : Object(it);\n};\n","var $export = require('./_export');\n// 19.1.2.3 / 15.2.3.7 Object.defineProperties(O, Properties)\n$export($export.S + $export.F * !require('./_descriptors'), 'Object', { defineProperties: require('./_object-dps') });\n","require('../../modules/es6.object.define-properties');\nvar $Object = require('../../modules/_core').Object;\nmodule.exports = function defineProperties(T, D) {\n  return $Object.defineProperties(T, D);\n};\n","module.exports = { \"default\": require(\"core-js/library/fn/object/define-properties\"), __esModule: true };","\"use strict\";\n\nexports.__esModule = true;\n\nvar _defineProperties = require(\"../core-js/object/define-properties\");\n\nvar _defineProperties2 = _interopRequireDefault(_defineProperties);\n\nvar _freeze = require(\"../core-js/object/freeze\");\n\nvar _freeze2 = _interopRequireDefault(_freeze);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nexports.default = function (strings, raw) {\n  return (0, _freeze2.default)((0, _defineProperties2.default)(strings, {\n    raw: {\n      value: (0, _freeze2.default)(raw)\n    }\n  }));\n};","module.exports = function (it) {\n  if (typeof it != 'function') throw TypeError(it + ' is not a function!');\n  return it;\n};\n","// 19.1.2.9 Object.getPrototypeOf(O)\nvar toObject = require('./_to-object');\nvar $getPrototypeOf = require('./_object-gpo');\n\nrequire('./_object-sap')('getPrototypeOf', function () {\n  return function getPrototypeOf(it) {\n    return $getPrototypeOf(toObject(it));\n  };\n});\n","require('../../modules/es6.object.get-prototype-of');\nmodule.exports = require('../../modules/_core').Object.getPrototypeOf;\n","module.exports = { \"default\": require(\"core-js/library/fn/object/get-prototype-of\"), __esModule: true };","import { PolymerElement } from '@polymer/polymer/polymer-element.js';\nimport { html } from '@polymer/polymer/lib/utils/html-tag.js';\n\n/**\n * `sample-component`\n * < Your component description >\n *\n * @customElement\n * @polymer\n * @demo demo/index.html\n */\nclass SampleComponent extends PolymerElement {\n  static get template() {\n    return html`\n    <style>\n      :host {\n        display: block;\n        height: 100%;\n        width: 100%;\n      }\n\n      canvas {\n        visibility: inherit !important;\n      }\n    </style>\n`;\n  }\n\n  constructor() {\n    super();\n  }\n\n  static get is() {\n    return 'sample-component';\n  }\n}\n\nwindow.customElements.define(SampleComponent.is, SampleComponent);\n"],"sourceRoot":""}