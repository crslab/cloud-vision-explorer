{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./node_modules/@polymer/polymer/lib/utils/path.js","webpack:///./node_modules/@polymer/polymer/lib/utils/boot.js","webpack:///./node_modules/@polymer/polymer/lib/utils/mixin.js","webpack:///./node_modules/@polymer/polymer/lib/utils/resolve-url.js","webpack:///./node_modules/core-js/library/modules/_core.js","webpack:///./node_modules/core-js/library/modules/_export.js","webpack:///./node_modules/@polymer/polymer/lib/utils/settings.js","webpack:///./node_modules/core-js/library/modules/_descriptors.js","webpack:///./node_modules/core-js/library/modules/_global.js","webpack:///./node_modules/@polymer/polymer/lib/utils/async.js","webpack:///./node_modules/core-js/library/modules/_has.js","webpack:///./node_modules/core-js/library/modules/_is-object.js","webpack:///./node_modules/core-js/library/modules/_object-dp.js","webpack:///./node_modules/core-js/library/modules/_wks.js","webpack:///./node_modules/core-js/library/modules/_to-iobject.js","webpack:///./node_modules/core-js/library/modules/_fails.js","webpack:///./node_modules/core-js/library/modules/_hide.js","webpack:///./node_modules/core-js/library/modules/_an-object.js","webpack:///./node_modules/@polymer/polymer/lib/utils/case-map.js","webpack:///./node_modules/@polymer/polymer/lib/mixins/template-stamp.js","webpack:///./node_modules/@polymer/polymer/lib/mixins/property-effects.js","webpack:///./node_modules/@polymer/polymer/lib/mixins/property-accessors.js","webpack:///./node_modules/core-js/library/modules/_object-pie.js","webpack:///./node_modules/core-js/library/modules/_object-keys.js","webpack:///./node_modules/core-js/library/modules/_uid.js","webpack:///./node_modules/core-js/library/modules/_library.js","webpack:///./node_modules/core-js/library/modules/_property-desc.js","webpack:///./node_modules/@polymer/polymer/lib/utils/debounce.js","webpack:///./node_modules/@polymer/polymer/lib/mixins/properties-changed.js","webpack:///./node_modules/@polymer/polymer/lib/utils/html-tag.js","webpack:///./node_modules/core-js/library/modules/_object-gops.js","webpack:///./node_modules/core-js/library/modules/_wks-define.js","webpack:///./node_modules/core-js/library/modules/_wks-ext.js","webpack:///./node_modules/core-js/library/modules/_set-to-string-tag.js","webpack:///./node_modules/core-js/library/modules/_object-create.js","webpack:///./node_modules/core-js/library/modules/_iterators.js","webpack:///./node_modules/core-js/library/modules/_enum-bug-keys.js","webpack:///./node_modules/core-js/library/modules/_to-integer.js","webpack:///./node_modules/core-js/library/modules/_shared.js","webpack:///./node_modules/core-js/library/modules/_shared-key.js","webpack:///./node_modules/core-js/library/modules/_defined.js","webpack:///./node_modules/core-js/library/modules/_to-object.js","webpack:///./node_modules/core-js/library/modules/_to-primitive.js","webpack:///./node_modules/@polymer/polymer/lib/utils/style-gather.js","webpack:///./node_modules/@polymer/polymer/lib/elements/dom-module.js","webpack:///./node_modules/@polymer/polymer/lib/mixins/properties-mixin.js","webpack:///./node_modules/@polymer/polymer/lib/mixins/element-mixin.js","webpack:///./node_modules/@polymer/polymer/polymer-element.js","webpack:///./node_modules/babel-runtime/helpers/createClass.js","webpack:///./node_modules/core-js/library/modules/_object-gopd.js","webpack:///./node_modules/core-js/library/modules/_object-gopn.js","webpack:///./node_modules/core-js/library/modules/_redefine.js","webpack:///./node_modules/core-js/library/modules/_iter-define.js","webpack:///./node_modules/babel-runtime/helpers/typeof.js","webpack:///./node_modules/babel-runtime/helpers/classCallCheck.js","webpack:///./node_modules/core-js/library/modules/_meta.js","webpack:///./node_modules/core-js/library/modules/_cof.js","webpack:///./node_modules/core-js/library/modules/_iobject.js","webpack:///./node_modules/core-js/library/modules/_object-keys-internal.js","webpack:///./node_modules/core-js/library/modules/_object-dps.js","webpack:///./node_modules/core-js/library/modules/_object-sap.js","webpack:///./node_modules/core-js/library/modules/_object-gpo.js","webpack:///./node_modules/core-js/library/modules/_dom-create.js","webpack:///./node_modules/core-js/library/modules/_ie8-dom-define.js","webpack:///./node_modules/core-js/library/modules/_ctx.js","webpack:///./node_modules/@polymer/polymer/lib/utils/gestures.js","webpack:///./node_modules/@polymer/polymer/lib/mixins/gesture-event-listeners.js","webpack:///./node_modules/@polymer/polymer/lib/mixins/mutable-data.js","webpack:///./node_modules/@polymer/polymer/lib/utils/templatize.js","webpack:///./node_modules/@polymer/polymer/lib/utils/flush.js","webpack:///./node_modules/@polymer/polymer/lib/elements/dom-if.js","webpack:///./node_modules/core-js/library/modules/_object-assign.js","webpack:///./node_modules/core-js/library/modules/es6.object.assign.js","webpack:///./node_modules/core-js/library/fn/object/assign.js","webpack:///./node_modules/babel-runtime/core-js/object/assign.js","webpack:///./src/common/customEvents.js","webpack:///./node_modules/core-js/library/modules/es6.object.create.js","webpack:///./node_modules/core-js/library/fn/object/create.js","webpack:///./node_modules/babel-runtime/core-js/object/create.js","webpack:///./node_modules/core-js/library/modules/_set-proto.js","webpack:///./node_modules/core-js/library/modules/es6.object.set-prototype-of.js","webpack:///./node_modules/core-js/library/fn/object/set-prototype-of.js","webpack:///./node_modules/babel-runtime/core-js/object/set-prototype-of.js","webpack:///./node_modules/babel-runtime/helpers/inherits.js","webpack:///./node_modules/core-js/library/modules/es6.object.define-property.js","webpack:///./node_modules/core-js/library/fn/object/define-property.js","webpack:///./node_modules/babel-runtime/core-js/object/define-property.js","webpack:///./node_modules/core-js/library/modules/es7.symbol.observable.js","webpack:///./node_modules/core-js/library/modules/_object-gopn-ext.js","webpack:///./node_modules/core-js/library/modules/_is-array.js","webpack:///./node_modules/core-js/library/modules/_enum-keys.js","webpack:///./node_modules/core-js/library/modules/es6.symbol.js","webpack:///./node_modules/core-js/library/fn/symbol/index.js","webpack:///./node_modules/babel-runtime/core-js/symbol.js","webpack:///./node_modules/core-js/library/modules/_iter-step.js","webpack:///./node_modules/core-js/library/modules/_add-to-unscopables.js","webpack:///./node_modules/core-js/library/modules/es6.array.iterator.js","webpack:///./node_modules/core-js/library/modules/web.dom.iterable.js","webpack:///./node_modules/core-js/library/modules/_html.js","webpack:///./node_modules/core-js/library/modules/_iter-create.js","webpack:///./node_modules/core-js/library/modules/_string-at.js","webpack:///./node_modules/core-js/library/modules/es6.string.iterator.js","webpack:///./node_modules/core-js/library/fn/symbol/iterator.js","webpack:///./node_modules/babel-runtime/core-js/symbol/iterator.js","webpack:///./node_modules/babel-runtime/helpers/possibleConstructorReturn.js","webpack:///./node_modules/core-js/library/modules/es6.object.freeze.js","webpack:///./node_modules/core-js/library/fn/object/freeze.js","webpack:///./node_modules/babel-runtime/core-js/object/freeze.js","webpack:///./node_modules/core-js/library/modules/_to-absolute-index.js","webpack:///./node_modules/core-js/library/modules/_to-length.js","webpack:///./node_modules/core-js/library/modules/_array-includes.js","webpack:///./node_modules/core-js/library/modules/es6.object.define-properties.js","webpack:///./node_modules/core-js/library/fn/object/define-properties.js","webpack:///./node_modules/babel-runtime/core-js/object/define-properties.js","webpack:///./node_modules/babel-runtime/helpers/taggedTemplateLiteral.js","webpack:///./node_modules/core-js/library/modules/es6.object.get-prototype-of.js","webpack:///./node_modules/core-js/library/fn/object/get-prototype-of.js","webpack:///./node_modules/babel-runtime/core-js/object/get-prototype-of.js","webpack:///./node_modules/core-js/library/modules/_a-function.js","webpack:///./node_modules/core-js/library/modules/es6.number.is-nan.js","webpack:///./node_modules/core-js/library/fn/number/is-nan.js","webpack:///./node_modules/babel-runtime/core-js/number/is-nan.js","webpack:///./src/index.js"],"names":["t","o","a","exports","n","i","l","e","call","m","c","d","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","__esModule","create","bind","prototype","hasOwnProperty","p","s","indexOf","slice","length","Array","isArray","toString","split","push","join","path","_","u","window","JSCompiler_renameProperty","__mixinApplications","__mixinSet","WeakMap","set","test","URL","pathname","href","document","baseURI","location","implementation","createHTMLDocument","base","createElement","head","appendChild","anchor","body","replace","substring","lastIndexOf","version","__e","g","P","b","F","G","S","B","W","y","h","f","this","arguments","apply","Function","virtual","R","U","ShadyDOM","ShadyCSS","nativeCss","customElements","polyfillWrapFlushCallback","Math","self","__g","createTextNode","MutationObserver","setTimeout","splice","observe","characterData","after","run","[object Object]","clearTimeout","textContent","Error","TypeError","store","K","toUpperCase","Q","toLowerCase","getAttribute","oe","removeAttribute","ownerDocument","parentNode","replaceChild","attributes","setAttribute","name","parentInfo","firstChild","nextSibling","parentIndex","id","events","_addMethodEventListenerToNode","templateInfo","_templateInfo","se","J","info","lastRun","trigger","fn","structured","wildcard","method","property","__data","dynamicFn","console","warn","queueProperty","dispatchEvent","CustomEvent","detail","eventName","x","re","attrName","_propertyToAttribute","E","D","methodInfo","__dataHasAccessor","_setPendingProperty","O","bindings","kind","target","parts","literal","isCompound","mode","I","event","negate","listenerEvent","ie","camelToDashCase","listenerNegate","nodeInfoList","compoundIndex","C","dependencies","index","binding","part","evaluator","Y","_addTemplatePropertyEffect","rootProperty","k","source","__isPropertyEffectsClient","_setPendingPropertyOrPath","_enqueueClient","__dataCompoundStorage","localName","N","_valueToNodeAttribute","de","READ_ONLY","_setUnmanagedPropertyToNode","w","_evaluateBinding","H","L","addEventListener","_invalidateProperties","v","static","methodName","args","_addPropertyEffect","_methodHost","z","M","j","match","_e","trim","map","$","notifyPath","indexSplices","X","addedCount","removed","object","type","floor","ee","te","HTMLElement","getOwnPropertyNames","getPrototypeOf","ae","V","Z","observedAttributes","_createPropertyAccessor","dashToCamelCase","__dataProto","_initializeProtoProperties","super","_initializeProperties","_setProperty","hasAttribute","Date","JSON","stringify","_serializeValue","parse","isNaN","_deserializeValue","_definePropertyAccessor","__dataPending","dom-if","dom-repeat","ne","stripWhiteSpace","_parseTemplateContent","parent","_parseTemplateNode","content","hasInsertionPoint","_parseTemplateNestedTemplate","_parseTemplateChildNodes","hasAttributes","_parseTemplateNodeAttributes","nodeType","Node","TEXT_NODE","removeChild","infoIndex","_parseTemplate","createDocumentFragment","from","_parseTemplateNodeAttribute","HTMLTemplateElement","decorate","constructor","importNode","__noInsertionPoint","nodeList","_addEventListenerToNode","removeEventListener","ce","COMPUTE","REFLECT","NOTIFY","PROPAGATE","OBSERVE","le","pe","ue","__dataCounter","__dataClientsReady","__dataPendingClients","__dataToNotify","__dataLinkedPaths","__dataHasPaths","__dataHost","__dataTemp","__dataClientsInitialized","__dataOld","__computeEffects","__reflectEffects","__notifyEffects","__propagateEffects","__observeEffects","__readOnly","__templateInfo","PROPERTY_EFFECT_TYPES","me","registerHost","_hasPropertyEffect","_shouldPropertyChange","T","__dataReady","_flushProperties","__enableOrFlushClients","_readyClients","__dataEnabled","_enableProperties","_flushClients","assign","_propagatePropertyChanges","propertyEffects","nextTemplateInfo","pop","shift","unshift","q","attributeNameForProperty","_createPropertyObserver","_createMethodObserver","_createNotifyingProperty","_createReadOnlyProperty","_createReflectedProperty","_createComputedProperty","_bindTemplate","wasPreBound","__templateInfoLast","previousTemplateInfo","hostProps","beginHosting","_stampTemplate","endHosting","childNodes","A","_parseBindings","exec","dynamicFns","customEvent","signature","lastIndex","stack","propertyIsEnumerable","keys","random","concat","configurable","writable","_asyncModule","_callback","_timer","isActive","cancel","setConfig","_addPropertyToAttributeMap","__dataAttributes","_getProperty","__dataInvalid","__dataInstanceProps","__serializing","_initializeInstanceProperties","ready","_shouldPropertiesChange","_propertiesChanged","_attributeToProperty","attributeChangedCallback","typeForProperty","Boolean","Number","innerHTML","reduce","getOwnPropertySymbols","charAt","style","display","src","contentWindow","open","write","close","ceil","copyright","valueOf","import","_styles","querySelector","assetpath","querySelectorAll","filter","_unscopedStyle","_style","register","__assetpath","HTMLImports","importForElement","modules","define","properties","__ownProperties","_properties","finalize","__finalized","_finalizeClass","createProperties","__properties","connectedCallback","disconnectedCallback","computed","readOnly","_hasReadOnlyEffect","reflectToAttribute","_hasReflectEffect","notify","_hasNotifyEffect","observer","is","__ownObservers","observers","createObservers","template","error","cloneNode","_template","importPath","importMeta","_importPath","url","rootPath","root","_finalizeTemplate","__propertyDefaults","_hasAccessor","__polymerFinalized","firstElementChild","_processStyleText","insertBefore","prepareTemplate","styleElement","_attachDom","attachShadow","shadowRoot","styleSubtree","html","default","key","getOwnPropertyDescriptor","entries","next","values","isExtensible","preventExtensions","KEY","NEED","fastKey","getWeak","onFreeze","defineProperties","passive","labels","getRootNode","buttons","MouseEvent","which","button","movefn","upfn","elementFromPoint","composedPath","currentTarget","changedTouches","touches","touch","identifier","clientX","clientY","scrollDecided","cancelable","preventDefault","skip","flow","start","reset","deps","_count","touchAction","emits","Event","bubbles","composed","defaultPrevented","preventer","sourceEvent","prevent","mouse","mouseIgnoreJob","flush","abs","navigator","userAgent","mousedown","mousemove","mouseup","touchstart","touchmove","touchend","click","input","keygen","meter","output","textarea","progress","select","sourceCapabilities","firesTouchEvents","__polymerGesturesHandled","ELEMENT_NODE","stopPropagation","debounce","end","_fire","state","started","moves","addMove","hasMovedEnough","dx","dy","ddx","ddy","hover","NaN","save","forward","disabled","getBoundingClientRect","pageX","pageY","left","right","top","bottom","addListener","removeListener","_removeEventListenerFromNode","mutableData","__templatizeOptions","instanceProps","notifyInstanceProp","forwardHostProp","templatizeTemplateClass","setPrototypeOf","__templatizeOwner","_mutablePropertyChange","_configureProperties","children","__templatizeInstance","__hideTemplateChildren__","_showHideChildren","__hostProps","parentModel","model","__polymerTextContent__","__polymerDisplay__","__polymerReplaced__","createComment","__parentModel","ScopingShim","PolymerElement","if","restamp","__renderDebouncer","__invalidProps","__instance","_lastIf","__ctor","__render","DOCUMENT_FRAGMENT_NODE","host","__teardownInstance","__debounceRender","__ensureInstance","disconnect","childList","templatizeInstanceClass","__syncHostProperties","previousSibling","forEach","CustomEventsCollection","dataJSON","params","defaultParams","sliderStart","sliderMove","sliderStop","__proto__","check","QObject","findChild","_k","iterator","for","keyFor","useSetter","useSimple","done","_t","_i","Arguments","documentElement","charCodeAt","String","ReferenceError","freeze","max","min","raw","DynamicSlider","handlePositionX","handlePositionY","parentBoundaries","isSliderShown","__isShowSlider","setDefaultHandlePosition","val","__adjustedPts","handleRadius","imageHandle","imgHandle","localX","localY","__lineParam","x_min","x_max","currentDistance","calculateDistance","data","proportion","__length","lineThickness","__pt1","__pt2","xOffset","yOffset","to","bSanityCheck","__drawStartPt","lineColor","__overlayThickness","handleColor","width","height","x1","y1","x2","y2","__width","__height","__containerStyle","__trackStyle","__trackOverlayStyle","__circleHandleStyle","__imgHandleStyle","__imgHandleSize","GestureEventListeners"],"mappings":"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","file":"dynamic-slider.min.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 113);\n","/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\nimport './boot.js';\n\n/**\n * Module with utilities for manipulating structured data path strings.\n *\n * @summary Module with utilities for manipulating structured data path strings.\n */\n`TODO(modulizer): A namespace named Polymer.Path was\ndeclared here. The surrounding comments should be reviewed,\nand this string can then be deleted`;\n\n/**\n * Returns true if the given string is a structured data path (has dots).\n *\n * Example:\n *\n * ```\n * isPath('foo.bar.baz') // true\n * isPath('foo')         // false\n * ```\n *\n * @param {string} path Path string\n * @return {boolean} True if the string contained one or more dots\n */\nexport function isPath(path) {\n  return path.indexOf('.') >= 0;\n}\n\n/**\n * Returns the root property name for the given path.\n *\n * Example:\n *\n * ```\n * root('foo.bar.baz') // 'foo'\n * root('foo')         // 'foo'\n * ```\n *\n * @param {string} path Path string\n * @return {string} Root property name\n */\nexport function root(path) {\n  let dotIndex = path.indexOf('.');\n  if (dotIndex === -1) {\n    return path;\n  }\n  return path.slice(0, dotIndex);\n}\n\n/**\n * Given `base` is `foo.bar`, `foo` is an ancestor, `foo.bar` is not\n * Returns true if the given path is an ancestor of the base path.\n *\n * Example:\n *\n * ```\n * isAncestor('foo.bar', 'foo')         // true\n * isAncestor('foo.bar', 'foo.bar')     // false\n * isAncestor('foo.bar', 'foo.bar.baz') // false\n * ```\n *\n * @param {string} base Path string to test against.\n * @param {string} path Path string to test.\n * @return {boolean} True if `path` is an ancestor of `base`.\n */\nexport function isAncestor(base, path) {\n  //     base.startsWith(path + '.');\n  return base.indexOf(path + '.') === 0;\n}\n\n/**\n * Given `base` is `foo.bar`, `foo.bar.baz` is an descendant\n *\n * Example:\n *\n * ```\n * isDescendant('foo.bar', 'foo.bar.baz') // true\n * isDescendant('foo.bar', 'foo.bar')     // false\n * isDescendant('foo.bar', 'foo')         // false\n * ```\n *\n * @param {string} base Path string to test against.\n * @param {string} path Path string to test.\n * @return {boolean} True if `path` is a descendant of `base`.\n */\nexport function isDescendant(base, path) {\n  //     path.startsWith(base + '.');\n  return path.indexOf(base + '.') === 0;\n}\n\n/**\n * Replaces a previous base path with a new base path, preserving the\n * remainder of the path.\n *\n * User must ensure `path` has a prefix of `base`.\n *\n * Example:\n *\n * ```\n * translate('foo.bar', 'zot', 'foo.bar.baz') // 'zot.baz'\n * ```\n *\n * @param {string} base Current base string to remove\n * @param {string} newBase New base string to replace with\n * @param {string} path Path to translate\n * @return {string} Translated string\n */\nexport function translate(base, newBase, path) {\n  return newBase + path.slice(base.length);\n}\n\n/**\n * @param {string} base Path string to test against\n * @param {string} path Path string to test\n * @return {boolean} True if `path` is equal to `base`\n * @this {Path}\n */\nexport function matches(base, path) {\n  return (base === path) ||\n         isAncestor(base, path) ||\n         isDescendant(base, path);\n}\n\n/**\n * Converts array-based paths to flattened path.  String-based paths\n * are returned as-is.\n *\n * Example:\n *\n * ```\n * normalize(['foo.bar', 0, 'baz'])  // 'foo.bar.0.baz'\n * normalize('foo.bar.0.baz')        // 'foo.bar.0.baz'\n * ```\n *\n * @param {string | !Array<string|number>} path Input path\n * @return {string} Flattened path\n */\nexport function normalize(path) {\n  if (Array.isArray(path)) {\n    let parts = [];\n    for (let i=0; i<path.length; i++) {\n      let args = path[i].toString().split('.');\n      for (let j=0; j<args.length; j++) {\n        parts.push(args[j]);\n      }\n    }\n    return parts.join('.');\n  } else {\n    return path;\n  }\n}\n\n/**\n * Splits a path into an array of property names. Accepts either arrays\n * of path parts or strings.\n *\n * Example:\n *\n * ```\n * split(['foo.bar', 0, 'baz'])  // ['foo', 'bar', '0', 'baz']\n * split('foo.bar.0.baz')        // ['foo', 'bar', '0', 'baz']\n * ```\n *\n * @param {string | !Array<string|number>} path Input path\n * @return {!Array<string>} Array of path parts\n * @this {Path}\n * @suppress {checkTypes}\n */\nexport function split(path) {\n  if (Array.isArray(path)) {\n    return normalize(path).split('.');\n  }\n  return path.toString().split('.');\n}\n\n/**\n * Reads a value from a path.  If any sub-property in the path is `undefined`,\n * this method returns `undefined` (will never throw.\n *\n * @param {Object} root Object from which to dereference path from\n * @param {string | !Array<string|number>} path Path to read\n * @param {Object=} info If an object is provided to `info`, the normalized\n *  (flattened) path will be set to `info.path`.\n * @return {*} Value at path, or `undefined` if the path could not be\n *  fully dereferenced.\n * @this {Path}\n */\nexport function get(root, path, info) {\n  let prop = root;\n  let parts = split(path);\n  // Loop over path parts[0..n-1] and dereference\n  for (let i=0; i<parts.length; i++) {\n    if (!prop) {\n      return;\n    }\n    let part = parts[i];\n    prop = prop[part];\n  }\n  if (info) {\n    info.path = parts.join('.');\n  }\n  return prop;\n}\n\n/**\n * Sets a value to a path.  If any sub-property in the path is `undefined`,\n * this method will no-op.\n *\n * @param {Object} root Object from which to dereference path from\n * @param {string | !Array<string|number>} path Path to set\n * @param {*} value Value to set to path\n * @return {string | undefined} The normalized version of the input path\n * @this {Path}\n */\nexport function set(root, path, value) {\n  let prop = root;\n  let parts = split(path);\n  let last = parts[parts.length-1];\n  if (parts.length > 1) {\n    // Loop over path parts[0..n-2] and dereference\n    for (let i=0; i<parts.length-1; i++) {\n      let part = parts[i];\n      prop = prop[part];\n      if (!prop) {\n        return;\n      }\n    }\n    // Set value to object at end of path\n    prop[last] = value;\n  } else {\n    // Simple property set\n    prop[path] = value;\n  }\n  return parts.join('.');\n}\n\n/**\n * Returns true if the given string is a structured data path (has dots).\n *\n * This function is deprecated.  Use `isPath` instead.\n *\n * Example:\n *\n * ```\n * isDeep('foo.bar.baz') // true\n * isDeep('foo')         // false\n * ```\n *\n * @deprecated\n * @param {string} path Path string\n * @return {boolean} True if the string contained one or more dots\n */\nexport const isDeep = isPath;\n","/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\n\nwindow.JSCompiler_renameProperty = function(prop) { return prop; };\n","/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\nimport './boot.js';\n\n// unique global id for deduping mixins.\nlet dedupeId = 0;\n\n/**\n * @constructor\n * @extends {Function}\n */\nfunction MixinFunction(){}\n/** @type {(WeakMap | undefined)} */\nMixinFunction.prototype.__mixinApplications;\n/** @type {(Object | undefined)} */\nMixinFunction.prototype.__mixinSet;\n\n/* eslint-disable valid-jsdoc */\n/**\n * Wraps an ES6 class expression mixin such that the mixin is only applied\n * if it has not already been applied its base argument. Also memoizes mixin\n * applications.\n *\n * @template T\n * @param {T} mixin ES6 class expression mixin to wrap\n * @return {T}\n * @suppress {invalidCasts}\n */\nexport const dedupingMixin = function(mixin) {\n  let mixinApplications = /** @type {!MixinFunction} */(mixin).__mixinApplications;\n  if (!mixinApplications) {\n    mixinApplications = new WeakMap();\n    /** @type {!MixinFunction} */(mixin).__mixinApplications = mixinApplications;\n  }\n  // maintain a unique id for each mixin\n  let mixinDedupeId = dedupeId++;\n  function dedupingMixin(base) {\n    let baseSet = /** @type {!MixinFunction} */(base).__mixinSet;\n    if (baseSet && baseSet[mixinDedupeId]) {\n      return base;\n    }\n    let map = mixinApplications;\n    let extended = map.get(base);\n    if (!extended) {\n      extended = /** @type {!Function} */(mixin)(base);\n      map.set(base, extended);\n    }\n    // copy inherited mixin set from the extended class, or the base class\n    // NOTE: we avoid use of Set here because some browser (IE11)\n    // cannot extend a base Set via the constructor.\n    let mixinSet = Object.create(/** @type {!MixinFunction} */(extended).__mixinSet || baseSet || null);\n    mixinSet[mixinDedupeId] = true;\n    /** @type {!MixinFunction} */(extended).__mixinSet = mixinSet;\n    return extended;\n  }\n\n  return /** @type {T} */ (dedupingMixin);\n};\n/* eslint-enable valid-jsdoc */\n","/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\nimport './boot.js';\n\nlet CSS_URL_RX = /(url\\()([^)]*)(\\))/g;\nlet ABS_URL = /(^\\/)|(^#)|(^[\\w-\\d]*:)/;\nlet workingURL;\nlet resolveDoc;\n/**\n * Resolves the given URL against the provided `baseUri'.\n *\n * Note that this function performs no resolution for URLs that start\n * with `/` (absolute URLs) or `#` (hash identifiers).  For general purpose\n * URL resolution, use `window.URL`.\n *\n * @param {string} url Input URL to resolve\n * @param {?string=} baseURI Base URI to resolve the URL against\n * @return {string} resolved URL\n */\nexport function resolveUrl(url, baseURI) {\n  if (url && ABS_URL.test(url)) {\n    return url;\n  }\n  // Lazy feature detection.\n  if (workingURL === undefined) {\n    workingURL = false;\n    try {\n      const u = new URL('b', 'http://a');\n      u.pathname = 'c%20d';\n      workingURL = (u.href === 'http://a/c%20d');\n    } catch (e) {\n      // silently fail\n    }\n  }\n  if (!baseURI) {\n    baseURI = document.baseURI || window.location.href;\n  }\n  if (workingURL) {\n    return (new URL(url, baseURI)).href;\n  }\n  // Fallback to creating an anchor into a disconnected document.\n  if (!resolveDoc) {\n    resolveDoc = document.implementation.createHTMLDocument('temp');\n    resolveDoc.base = resolveDoc.createElement('base');\n    resolveDoc.head.appendChild(resolveDoc.base);\n    resolveDoc.anchor = resolveDoc.createElement('a');\n    resolveDoc.body.appendChild(resolveDoc.anchor);\n  }\n  resolveDoc.base.href = baseURI;\n  resolveDoc.anchor.href = url;\n  return resolveDoc.anchor.href || url;\n\n}\n\n/**\n * Resolves any relative URL's in the given CSS text against the provided\n * `ownerDocument`'s `baseURI`.\n *\n * @param {string} cssText CSS text to process\n * @param {string} baseURI Base URI to resolve the URL against\n * @return {string} Processed CSS text with resolved URL's\n */\nexport function resolveCss(cssText, baseURI) {\n  return cssText.replace(CSS_URL_RX, function(m, pre, url, post) {\n    return pre + '\\'' +\n      resolveUrl(url.replace(/[\"']/g, ''), baseURI) +\n      '\\'' + post;\n  });\n}\n\n/**\n * Returns a path from a given `url`. The path includes the trailing\n * `/` from the url.\n *\n * @param {string} url Input URL to transform\n * @return {string} resolved path\n */\nexport function pathFromUrl(url) {\n  return url.substring(0, url.lastIndexOf('/') + 1);\n}\n","var core = module.exports = { version: '2.5.7' };\nif (typeof __e == 'number') __e = core; // eslint-disable-line no-undef\n","var global = require('./_global');\nvar core = require('./_core');\nvar ctx = require('./_ctx');\nvar hide = require('./_hide');\nvar has = require('./_has');\nvar PROTOTYPE = 'prototype';\n\nvar $export = function (type, name, source) {\n  var IS_FORCED = type & $export.F;\n  var IS_GLOBAL = type & $export.G;\n  var IS_STATIC = type & $export.S;\n  var IS_PROTO = type & $export.P;\n  var IS_BIND = type & $export.B;\n  var IS_WRAP = type & $export.W;\n  var exports = IS_GLOBAL ? core : core[name] || (core[name] = {});\n  var expProto = exports[PROTOTYPE];\n  var target = IS_GLOBAL ? global : IS_STATIC ? global[name] : (global[name] || {})[PROTOTYPE];\n  var key, own, out;\n  if (IS_GLOBAL) source = name;\n  for (key in source) {\n    // contains in native\n    own = !IS_FORCED && target && target[key] !== undefined;\n    if (own && has(exports, key)) continue;\n    // export native or passed\n    out = own ? target[key] : source[key];\n    // prevent global pollution for namespaces\n    exports[key] = IS_GLOBAL && typeof target[key] != 'function' ? source[key]\n    // bind timers to global for call from export context\n    : IS_BIND && own ? ctx(out, global)\n    // wrap global constructors for prevent change them in library\n    : IS_WRAP && target[key] == out ? (function (C) {\n      var F = function (a, b, c) {\n        if (this instanceof C) {\n          switch (arguments.length) {\n            case 0: return new C();\n            case 1: return new C(a);\n            case 2: return new C(a, b);\n          } return new C(a, b, c);\n        } return C.apply(this, arguments);\n      };\n      F[PROTOTYPE] = C[PROTOTYPE];\n      return F;\n    // make static versions for prototype methods\n    })(out) : IS_PROTO && typeof out == 'function' ? ctx(Function.call, out) : out;\n    // export proto methods to core.%CONSTRUCTOR%.methods.%NAME%\n    if (IS_PROTO) {\n      (exports.virtual || (exports.virtual = {}))[key] = out;\n      // export proto methods to core.%CONSTRUCTOR%.prototype.%NAME%\n      if (type & $export.R && expProto && !expProto[key]) hide(expProto, key, out);\n    }\n  }\n};\n// type bitmap\n$export.F = 1;   // forced\n$export.G = 2;   // global\n$export.S = 4;   // static\n$export.P = 8;   // proto\n$export.B = 16;  // bind\n$export.W = 32;  // wrap\n$export.U = 64;  // safe\n$export.R = 128; // real proto method for `library`\nmodule.exports = $export;\n","/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\nimport './boot.js';\n\nimport { pathFromUrl } from './resolve-url.js';\nexport const useShadow = !(window.ShadyDOM);\nexport const useNativeCSSProperties = Boolean(!window.ShadyCSS || window.ShadyCSS.nativeCss);\nexport const useNativeCustomElements = !(window.customElements.polyfillWrapFlushCallback);\n\n\n/**\n * Globally settable property that is automatically assigned to\n * `ElementMixin` instances, useful for binding in templates to\n * make URL's relative to an application's root.  Defaults to the main\n * document URL, but can be overridden by users.  It may be useful to set\n * `rootPath` to provide a stable application mount path when\n * using client side routing.\n */\nexport let rootPath = undefined ||\n  pathFromUrl(document.baseURI || window.location.href);\n\n/**\n * Sets the global rootPath property used by `ElementMixin` and\n * available via `rootPath`.\n *\n * @param {string} path The new root path\n * @return {void}\n */\nexport const setRootPath = function(path) {\n  rootPath = path;\n};\n\n/**\n * A global callback used to sanitize any value before inserting it into the DOM. The callback signature is:\n *\n *     Polymer = {\n *       sanitizeDOMValue: function(value, name, type, node) { ... }\n *     }\n *\n * Where:\n *\n * `value` is the value to sanitize.\n * `name` is the name of an attribute or property (for example, href).\n * `type` indicates where the value is being inserted: one of property, attribute, or text.\n * `node` is the node where the value is being inserted.\n *\n * @type {(function(*,string,string,Node):*)|undefined}\n */\nexport let sanitizeDOMValue = undefined;\n\n/**\n * Sets the global sanitizeDOMValue available via this module's exported\n * `sanitizeDOMValue` variable.\n *\n * @param {(function(*,string,string,Node):*)|undefined} newSanitizeDOMValue the global sanitizeDOMValue callback\n * @return {void}\n */\nexport const setSanitizeDOMValue = function(newSanitizeDOMValue) {\n  sanitizeDOMValue = newSanitizeDOMValue;\n};\n\n/**\n * Globally settable property to make Polymer Gestures use passive TouchEvent listeners when recognizing gestures.\n * When set to `true`, gestures made from touch will not be able to prevent scrolling, allowing for smoother\n * scrolling performance.\n * Defaults to `false` for backwards compatibility.\n */\nexport let passiveTouchGestures = false;\n\n/**\n * Sets `passiveTouchGestures` globally for all elements using Polymer Gestures.\n *\n * @param {boolean} usePassive enable or disable passive touch gestures globally\n * @return {void}\n */\nexport const setPassiveTouchGestures = function(usePassive) {\n  passiveTouchGestures = usePassive;\n};\n","// Thank's IE8 for his funny defineProperty\nmodule.exports = !require('./_fails')(function () {\n  return Object.defineProperty({}, 'a', { get: function () { return 7; } }).a != 7;\n});\n","// https://github.com/zloirock/core-js/issues/86#issuecomment-115759028\nvar global = module.exports = typeof window != 'undefined' && window.Math == Math\n  ? window : typeof self != 'undefined' && self.Math == Math ? self\n  // eslint-disable-next-line no-new-func\n  : Function('return this')();\nif (typeof __g == 'number') __g = global; // eslint-disable-line no-undef\n","/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\n\n/**\n * @fileoverview\n *\n * This module provides a number of strategies for enqueuing asynchronous\n * tasks. Each sub-module provides a standard `run(fn)` interface that returns a\n * handle, and a `cancel(handle)` interface for canceling async tasks before\n * they run.\n *\n * @summary Module that provides a number of strategies for enqueuing\n * asynchronous tasks.\n */\n\nimport './boot.js';\n\n// Microtask implemented using Mutation Observer\nlet microtaskCurrHandle = 0;\nlet microtaskLastHandle = 0;\nlet microtaskCallbacks = [];\nlet microtaskNodeContent = 0;\nlet microtaskNode = document.createTextNode('');\nnew window.MutationObserver(microtaskFlush).observe(microtaskNode, {characterData: true});\n\nfunction microtaskFlush() {\n  const len = microtaskCallbacks.length;\n  for (let i = 0; i < len; i++) {\n    let cb = microtaskCallbacks[i];\n    if (cb) {\n      try {\n        cb();\n      } catch (e) {\n        setTimeout(() => { throw e; });\n      }\n    }\n  }\n  microtaskCallbacks.splice(0, len);\n  microtaskLastHandle += len;\n}\n\n/**\n * Async interface wrapper around `setTimeout`.\n *\n * @namespace\n * @summary Async interface wrapper around `setTimeout`.\n */\nconst timeOut = {\n  /**\n   * Returns a sub-module with the async interface providing the provided\n   * delay.\n   *\n   * @memberof timeOut\n   * @param {number=} delay Time to wait before calling callbacks in ms\n   * @return {!AsyncInterface} An async timeout interface\n   */\n  after(delay) {\n    return {\n      run(fn) { return window.setTimeout(fn, delay); },\n      cancel(handle) {\n        window.clearTimeout(handle);\n      }\n    };\n  },\n  /**\n   * Enqueues a function called in the next task.\n   *\n   * @memberof timeOut\n   * @param {!Function} fn Callback to run\n   * @param {number=} delay Delay in milliseconds\n   * @return {number} Handle used for canceling task\n   */\n  run(fn, delay) {\n    return window.setTimeout(fn, delay);\n  },\n  /**\n   * Cancels a previously enqueued `timeOut` callback.\n   *\n   * @memberof timeOut\n   * @param {number} handle Handle returned from `run` of callback to cancel\n   * @return {void}\n   */\n  cancel(handle) {\n    window.clearTimeout(handle);\n  }\n};\nexport {timeOut};\n\n/**\n * Async interface wrapper around `requestAnimationFrame`.\n *\n * @namespace\n * @summary Async interface wrapper around `requestAnimationFrame`.\n */\nconst animationFrame = {\n  /**\n   * Enqueues a function called at `requestAnimationFrame` timing.\n   *\n   * @memberof animationFrame\n   * @param {function(number):void} fn Callback to run\n   * @return {number} Handle used for canceling task\n   */\n  run(fn) {\n    return window.requestAnimationFrame(fn);\n  },\n  /**\n   * Cancels a previously enqueued `animationFrame` callback.\n   *\n   * @memberof animationFrame\n   * @param {number} handle Handle returned from `run` of callback to cancel\n   * @return {void}\n   */\n  cancel(handle) {\n    window.cancelAnimationFrame(handle);\n  }\n};\nexport {animationFrame};\n\n/**\n * Async interface wrapper around `requestIdleCallback`.  Falls back to\n * `setTimeout` on browsers that do not support `requestIdleCallback`.\n *\n * @namespace\n * @summary Async interface wrapper around `requestIdleCallback`.\n */\nconst idlePeriod = {\n  /**\n   * Enqueues a function called at `requestIdleCallback` timing.\n   *\n   * @memberof idlePeriod\n   * @param {function(!IdleDeadline):void} fn Callback to run\n   * @return {number} Handle used for canceling task\n   */\n  run(fn) {\n    return window.requestIdleCallback ?\n      window.requestIdleCallback(fn) :\n      window.setTimeout(fn, 16);\n  },\n  /**\n   * Cancels a previously enqueued `idlePeriod` callback.\n   *\n   * @memberof idlePeriod\n   * @param {number} handle Handle returned from `run` of callback to cancel\n   * @return {void}\n   */\n  cancel(handle) {\n    window.cancelIdleCallback ?\n      window.cancelIdleCallback(handle) :\n      window.clearTimeout(handle);\n  }\n};\nexport {idlePeriod};\n\n/**\n * Async interface for enqueuing callbacks that run at microtask timing.\n *\n * Note that microtask timing is achieved via a single `MutationObserver`,\n * and thus callbacks enqueued with this API will all run in a single\n * batch, and not interleaved with other microtasks such as promises.\n * Promises are avoided as an implementation choice for the time being\n * due to Safari bugs that cause Promises to lack microtask guarantees.\n *\n * @namespace\n * @summary Async interface for enqueuing callbacks that run at microtask\n *   timing.\n */\nconst microTask = {\n\n  /**\n   * Enqueues a function called at microtask timing.\n   *\n   * @memberof microTask\n   * @param {!Function=} callback Callback to run\n   * @return {number} Handle used for canceling task\n   */\n  run(callback) {\n    microtaskNode.textContent = microtaskNodeContent++;\n    microtaskCallbacks.push(callback);\n    return microtaskCurrHandle++;\n  },\n\n  /**\n   * Cancels a previously enqueued `microTask` callback.\n   *\n   * @memberof microTask\n   * @param {number} handle Handle returned from `run` of callback to cancel\n   * @return {void}\n   */\n  cancel(handle) {\n    const idx = handle - microtaskLastHandle;\n    if (idx >= 0) {\n      if (!microtaskCallbacks[idx]) {\n        throw new Error('invalid async handle: ' + handle);\n      }\n      microtaskCallbacks[idx] = null;\n    }\n  }\n\n};\nexport {microTask};\n","var hasOwnProperty = {}.hasOwnProperty;\nmodule.exports = function (it, key) {\n  return hasOwnProperty.call(it, key);\n};\n","module.exports = function (it) {\n  return typeof it === 'object' ? it !== null : typeof it === 'function';\n};\n","var anObject = require('./_an-object');\nvar IE8_DOM_DEFINE = require('./_ie8-dom-define');\nvar toPrimitive = require('./_to-primitive');\nvar dP = Object.defineProperty;\n\nexports.f = require('./_descriptors') ? Object.defineProperty : function defineProperty(O, P, Attributes) {\n  anObject(O);\n  P = toPrimitive(P, true);\n  anObject(Attributes);\n  if (IE8_DOM_DEFINE) try {\n    return dP(O, P, Attributes);\n  } catch (e) { /* empty */ }\n  if ('get' in Attributes || 'set' in Attributes) throw TypeError('Accessors not supported!');\n  if ('value' in Attributes) O[P] = Attributes.value;\n  return O;\n};\n","var store = require('./_shared')('wks');\nvar uid = require('./_uid');\nvar Symbol = require('./_global').Symbol;\nvar USE_SYMBOL = typeof Symbol == 'function';\n\nvar $exports = module.exports = function (name) {\n  return store[name] || (store[name] =\n    USE_SYMBOL && Symbol[name] || (USE_SYMBOL ? Symbol : uid)('Symbol.' + name));\n};\n\n$exports.store = store;\n","// to indexed object, toObject with fallback for non-array-like ES3 strings\nvar IObject = require('./_iobject');\nvar defined = require('./_defined');\nmodule.exports = function (it) {\n  return IObject(defined(it));\n};\n","module.exports = function (exec) {\n  try {\n    return !!exec();\n  } catch (e) {\n    return true;\n  }\n};\n","var dP = require('./_object-dp');\nvar createDesc = require('./_property-desc');\nmodule.exports = require('./_descriptors') ? function (object, key, value) {\n  return dP.f(object, key, createDesc(1, value));\n} : function (object, key, value) {\n  object[key] = value;\n  return object;\n};\n","var isObject = require('./_is-object');\nmodule.exports = function (it) {\n  if (!isObject(it)) throw TypeError(it + ' is not an object!');\n  return it;\n};\n","/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\nimport './boot.js';\n\nconst caseMap = {};\nconst DASH_TO_CAMEL = /-[a-z]/g;\nconst CAMEL_TO_DASH = /([A-Z])/g;\n\n/**\n * Module with utilities for converting between \"dash-case\" and \"camelCase\"\n * identifiers.\n *\n * @summary Module that provides utilities for converting between \"dash-case\"\n *   and \"camelCase\".\n */\n`TODO(modulizer): A namespace named Polymer.CaseMap was\ndeclared here. The surrounding comments should be reviewed,\nand this string can then be deleted`;\n\n/**\n * Converts \"dash-case\" identifier (e.g. `foo-bar-baz`) to \"camelCase\"\n * (e.g. `fooBarBaz`).\n *\n * @param {string} dash Dash-case identifier\n * @return {string} Camel-case representation of the identifier\n */\nexport function dashToCamelCase(dash) {\n  return caseMap[dash] || (\n    caseMap[dash] = dash.indexOf('-') < 0 ? dash : dash.replace(DASH_TO_CAMEL,\n      (m) => m[1].toUpperCase()\n    )\n  );\n}\n\n/**\n * Converts \"camelCase\" identifier (e.g. `fooBarBaz`) to \"dash-case\"\n * (e.g. `foo-bar-baz`).\n *\n * @param {string} camel Camel-case identifier\n * @return {string} Dash-case representation of the identifier\n */\nexport function camelToDashCase(camel) {\n  return caseMap[camel] || (\n    caseMap[camel] = camel.replace(CAMEL_TO_DASH, '-$1').toLowerCase()\n  );\n}\n","/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\nimport '../utils/boot.js';\n\nimport { dedupingMixin } from '../utils/mixin.js';\n\n// 1.x backwards-compatible auto-wrapper for template type extensions\n// This is a clear layering violation and gives favored-nation status to\n// dom-if and dom-repeat templates.  This is a conceit we're choosing to keep\n// a.) to ease 1.x backwards-compatibility due to loss of `is`, and\n// b.) to maintain if/repeat capability in parser-constrained elements\n//     (e.g. table, select) in lieu of native CE type extensions without\n//     massive new invention in this space (e.g. directive system)\nconst templateExtensions = {\n  'dom-if': true,\n  'dom-repeat': true\n};\nfunction wrapTemplateExtension(node) {\n  let is = node.getAttribute('is');\n  if (is && templateExtensions[is]) {\n    let t = node;\n    t.removeAttribute('is');\n    node = t.ownerDocument.createElement(is);\n    t.parentNode.replaceChild(node, t);\n    node.appendChild(t);\n    while(t.attributes.length) {\n      node.setAttribute(t.attributes[0].name, t.attributes[0].value);\n      t.removeAttribute(t.attributes[0].name);\n    }\n  }\n  return node;\n}\n\nfunction findTemplateNode(root, nodeInfo) {\n  // recursively ascend tree until we hit root\n  let parent = nodeInfo.parentInfo && findTemplateNode(root, nodeInfo.parentInfo);\n  // unwind the stack, returning the indexed node at each level\n  if (parent) {\n    // note: marginally faster than indexing via childNodes\n    // (http://jsperf.com/childnodes-lookup)\n    for (let n=parent.firstChild, i=0; n; n=n.nextSibling) {\n      if (nodeInfo.parentIndex === i++) {\n        return n;\n      }\n    }\n  } else {\n    return root;\n  }\n}\n\n// construct `$` map (from id annotations)\nfunction applyIdToMap(inst, map, node, nodeInfo) {\n  if (nodeInfo.id) {\n    map[nodeInfo.id] = node;\n  }\n}\n\n// install event listeners (from event annotations)\nfunction applyEventListener(inst, node, nodeInfo) {\n  if (nodeInfo.events && nodeInfo.events.length) {\n    for (let j=0, e$=nodeInfo.events, e; (j<e$.length) && (e=e$[j]); j++) {\n      inst._addMethodEventListenerToNode(node, e.name, e.value, inst);\n    }\n  }\n}\n\n// push configuration references at configure time\nfunction applyTemplateContent(inst, node, nodeInfo) {\n  if (nodeInfo.templateInfo) {\n    node._templateInfo = nodeInfo.templateInfo;\n  }\n}\n\nfunction createNodeEventHandler(context, eventName, methodName) {\n  // Instances can optionally have a _methodHost which allows redirecting where\n  // to find methods. Currently used by `templatize`.\n  context = context._methodHost || context;\n  let handler = function(e) {\n    if (context[methodName]) {\n      context[methodName](e, e.detail);\n    } else {\n      console.warn('listener method `' + methodName + '` not defined');\n    }\n  };\n  return handler;\n}\n\n/**\n * Element mixin that provides basic template parsing and stamping, including\n * the following template-related features for stamped templates:\n *\n * - Declarative event listeners (`on-eventname=\"listener\"`)\n * - Map of node id's to stamped node instances (`this.$.id`)\n * - Nested template content caching/removal and re-installation (performance\n *   optimization)\n *\n * @mixinFunction\n * @polymer\n * @summary Element class mixin that provides basic template parsing and stamping\n */\nexport const TemplateStamp = dedupingMixin(superClass => {\n\n  /**\n   * @polymer\n   * @mixinClass\n   * @implements {Polymer_TemplateStamp}\n   */\n  class TemplateStamp extends superClass {\n\n    /**\n     * Scans a template to produce template metadata.\n     *\n     * Template-specific metadata are stored in the object returned, and node-\n     * specific metadata are stored in objects in its flattened `nodeInfoList`\n     * array.  Only nodes in the template that were parsed as nodes of\n     * interest contain an object in `nodeInfoList`.  Each `nodeInfo` object\n     * contains an `index` (`childNodes` index in parent) and optionally\n     * `parent`, which points to node info of its parent (including its index).\n     *\n     * The template metadata object returned from this method has the following\n     * structure (many fields optional):\n     *\n     * ```js\n     *   {\n     *     // Flattened list of node metadata (for nodes that generated metadata)\n     *     nodeInfoList: [\n     *       {\n     *         // `id` attribute for any nodes with id's for generating `$` map\n     *         id: {string},\n     *         // `on-event=\"handler\"` metadata\n     *         events: [\n     *           {\n     *             name: {string},   // event name\n     *             value: {string},  // handler method name\n     *           }, ...\n     *         ],\n     *         // Notes when the template contained a `<slot>` for shady DOM\n     *         // optimization purposes\n     *         hasInsertionPoint: {boolean},\n     *         // For nested `<template>`` nodes, nested template metadata\n     *         templateInfo: {object}, // nested template metadata\n     *         // Metadata to allow efficient retrieval of instanced node\n     *         // corresponding to this metadata\n     *         parentInfo: {number},   // reference to parent nodeInfo>\n     *         parentIndex: {number},  // index in parent's `childNodes` collection\n     *         infoIndex: {number},    // index of this `nodeInfo` in `templateInfo.nodeInfoList`\n     *       },\n     *       ...\n     *     ],\n     *     // When true, the template had the `strip-whitespace` attribute\n     *     // or was nested in a template with that setting\n     *     stripWhitespace: {boolean},\n     *     // For nested templates, nested template content is moved into\n     *     // a document fragment stored here; this is an optimization to\n     *     // avoid the cost of nested template cloning\n     *     content: {DocumentFragment}\n     *   }\n     * ```\n     *\n     * This method kicks off a recursive treewalk as follows:\n     *\n     * ```\n     *    _parseTemplate <---------------------+\n     *      _parseTemplateContent              |\n     *        _parseTemplateNode  <------------|--+\n     *          _parseTemplateNestedTemplate --+  |\n     *          _parseTemplateChildNodes ---------+\n     *          _parseTemplateNodeAttributes\n     *            _parseTemplateNodeAttribute\n     *\n     * ```\n     *\n     * These methods may be overridden to add custom metadata about templates\n     * to either `templateInfo` or `nodeInfo`.\n     *\n     * Note that this method may be destructive to the template, in that\n     * e.g. event annotations may be removed after being noted in the\n     * template metadata.\n     *\n     * @param {!HTMLTemplateElement} template Template to parse\n     * @param {TemplateInfo=} outerTemplateInfo Template metadata from the outer\n     *   template, for parsing nested templates\n     * @return {!TemplateInfo} Parsed template metadata\n     */\n    static _parseTemplate(template, outerTemplateInfo) {\n      // since a template may be re-used, memo-ize metadata\n      if (!template._templateInfo) {\n        let templateInfo = template._templateInfo = {};\n        templateInfo.nodeInfoList = [];\n        templateInfo.stripWhiteSpace =\n          (outerTemplateInfo && outerTemplateInfo.stripWhiteSpace) ||\n          template.hasAttribute('strip-whitespace');\n        this._parseTemplateContent(template, templateInfo, {parent: null});\n      }\n      return template._templateInfo;\n    }\n\n    static _parseTemplateContent(template, templateInfo, nodeInfo) {\n      return this._parseTemplateNode(template.content, templateInfo, nodeInfo);\n    }\n\n    /**\n     * Parses template node and adds template and node metadata based on\n     * the current node, and its `childNodes` and `attributes`.\n     *\n     * This method may be overridden to add custom node or template specific\n     * metadata based on this node.\n     *\n     * @param {Node} node Node to parse\n     * @param {!TemplateInfo} templateInfo Template metadata for current template\n     * @param {!NodeInfo} nodeInfo Node metadata for current template.\n     * @return {boolean} `true` if the visited node added node-specific\n     *   metadata to `nodeInfo`\n     */\n    static _parseTemplateNode(node, templateInfo, nodeInfo) {\n      let noted;\n      let element = /** @type {Element} */(node);\n      if (element.localName == 'template' && !element.hasAttribute('preserve-content')) {\n        noted = this._parseTemplateNestedTemplate(element, templateInfo, nodeInfo) || noted;\n      } else if (element.localName === 'slot') {\n        // For ShadyDom optimization, indicating there is an insertion point\n        templateInfo.hasInsertionPoint = true;\n      }\n      if (element.firstChild) {\n        noted = this._parseTemplateChildNodes(element, templateInfo, nodeInfo) || noted;\n      }\n      if (element.hasAttributes && element.hasAttributes()) {\n        noted = this._parseTemplateNodeAttributes(element, templateInfo, nodeInfo) || noted;\n      }\n      return noted;\n    }\n\n    /**\n     * Parses template child nodes for the given root node.\n     *\n     * This method also wraps whitelisted legacy template extensions\n     * (`is=\"dom-if\"` and `is=\"dom-repeat\"`) with their equivalent element\n     * wrappers, collapses text nodes, and strips whitespace from the template\n     * if the `templateInfo.stripWhitespace` setting was provided.\n     *\n     * @param {Node} root Root node whose `childNodes` will be parsed\n     * @param {!TemplateInfo} templateInfo Template metadata for current template\n     * @param {!NodeInfo} nodeInfo Node metadata for current template.\n     * @return {void}\n     */\n    static _parseTemplateChildNodes(root, templateInfo, nodeInfo) {\n      if (root.localName === 'script' || root.localName === 'style') {\n        return;\n      }\n      for (let node=root.firstChild, parentIndex=0, next; node; node=next) {\n        // Wrap templates\n        if (node.localName == 'template') {\n          node = wrapTemplateExtension(node);\n        }\n        // collapse adjacent textNodes: fixes an IE issue that can cause\n        // text nodes to be inexplicably split =(\n        // note that root.normalize() should work but does not so we do this\n        // manually.\n        next = node.nextSibling;\n        if (node.nodeType === Node.TEXT_NODE) {\n          let /** Node */ n = next;\n          while (n && (n.nodeType === Node.TEXT_NODE)) {\n            node.textContent += n.textContent;\n            next = n.nextSibling;\n            root.removeChild(n);\n            n = next;\n          }\n          // optionally strip whitespace\n          if (templateInfo.stripWhiteSpace && !node.textContent.trim()) {\n            root.removeChild(node);\n            continue;\n          }\n        }\n        let childInfo = { parentIndex, parentInfo: nodeInfo };\n        if (this._parseTemplateNode(node, templateInfo, childInfo)) {\n          childInfo.infoIndex = templateInfo.nodeInfoList.push(/** @type {!NodeInfo} */(childInfo)) - 1;\n        }\n        // Increment if not removed\n        if (node.parentNode) {\n          parentIndex++;\n        }\n      }\n    }\n\n    /**\n     * Parses template content for the given nested `<template>`.\n     *\n     * Nested template info is stored as `templateInfo` in the current node's\n     * `nodeInfo`. `template.content` is removed and stored in `templateInfo`.\n     * It will then be the responsibility of the host to set it back to the\n     * template and for users stamping nested templates to use the\n     * `_contentForTemplate` method to retrieve the content for this template\n     * (an optimization to avoid the cost of cloning nested template content).\n     *\n     * @param {HTMLTemplateElement} node Node to parse (a <template>)\n     * @param {TemplateInfo} outerTemplateInfo Template metadata for current template\n     *   that includes the template `node`\n     * @param {!NodeInfo} nodeInfo Node metadata for current template.\n     * @return {boolean} `true` if the visited node added node-specific\n     *   metadata to `nodeInfo`\n     */\n    static _parseTemplateNestedTemplate(node, outerTemplateInfo, nodeInfo) {\n      let templateInfo = this._parseTemplate(node, outerTemplateInfo);\n      let content = templateInfo.content =\n        node.content.ownerDocument.createDocumentFragment();\n      content.appendChild(node.content);\n      nodeInfo.templateInfo = templateInfo;\n      return true;\n    }\n\n    /**\n     * Parses template node attributes and adds node metadata to `nodeInfo`\n     * for nodes of interest.\n     *\n     * @param {Element} node Node to parse\n     * @param {TemplateInfo} templateInfo Template metadata for current template\n     * @param {NodeInfo} nodeInfo Node metadata for current template.\n     * @return {boolean} `true` if the visited node added node-specific\n     *   metadata to `nodeInfo`\n     */\n    static _parseTemplateNodeAttributes(node, templateInfo, nodeInfo) {\n      // Make copy of original attribute list, since the order may change\n      // as attributes are added and removed\n      let noted = false;\n      let attrs = Array.from(node.attributes);\n      for (let i=attrs.length-1, a; (a=attrs[i]); i--) {\n        noted = this._parseTemplateNodeAttribute(node, templateInfo, nodeInfo, a.name, a.value) || noted;\n      }\n      return noted;\n    }\n\n    /**\n     * Parses a single template node attribute and adds node metadata to\n     * `nodeInfo` for attributes of interest.\n     *\n     * This implementation adds metadata for `on-event=\"handler\"` attributes\n     * and `id` attributes.\n     *\n     * @param {Element} node Node to parse\n     * @param {!TemplateInfo} templateInfo Template metadata for current template\n     * @param {!NodeInfo} nodeInfo Node metadata for current template.\n     * @param {string} name Attribute name\n     * @param {string} value Attribute value\n     * @return {boolean} `true` if the visited node added node-specific\n     *   metadata to `nodeInfo`\n     */\n    static _parseTemplateNodeAttribute(node, templateInfo, nodeInfo, name, value) {\n      // events (on-*)\n      if (name.slice(0, 3) === 'on-') {\n        node.removeAttribute(name);\n        nodeInfo.events = nodeInfo.events || [];\n        nodeInfo.events.push({\n          name: name.slice(3),\n          value\n        });\n        return true;\n      }\n      // static id\n      else if (name === 'id') {\n        nodeInfo.id = value;\n        return true;\n      }\n      return false;\n    }\n\n    /**\n     * Returns the `content` document fragment for a given template.\n     *\n     * For nested templates, Polymer performs an optimization to cache nested\n     * template content to avoid the cost of cloning deeply nested templates.\n     * This method retrieves the cached content for a given template.\n     *\n     * @param {HTMLTemplateElement} template Template to retrieve `content` for\n     * @return {DocumentFragment} Content fragment\n     */\n    static _contentForTemplate(template) {\n      let templateInfo = /** @type {HTMLTemplateElementWithInfo} */ (template)._templateInfo;\n      return (templateInfo && templateInfo.content) || template.content;\n    }\n\n    /**\n     * Clones the provided template content and returns a document fragment\n     * containing the cloned dom.\n     *\n     * The template is parsed (once and memoized) using this library's\n     * template parsing features, and provides the following value-added\n     * features:\n     * * Adds declarative event listeners for `on-event=\"handler\"` attributes\n     * * Generates an \"id map\" for all nodes with id's under `$` on returned\n     *   document fragment\n     * * Passes template info including `content` back to templates as\n     *   `_templateInfo` (a performance optimization to avoid deep template\n     *   cloning)\n     *\n     * Note that the memoized template parsing process is destructive to the\n     * template: attributes for bindings and declarative event listeners are\n     * removed after being noted in notes, and any nested `<template>.content`\n     * is removed and stored in notes as well.\n     *\n     * @param {!HTMLTemplateElement} template Template to stamp\n     * @return {!StampedTemplate} Cloned template content\n     */\n    _stampTemplate(template) {\n      // Polyfill support: bootstrap the template if it has not already been\n      if (template && !template.content &&\n          window.HTMLTemplateElement && HTMLTemplateElement.decorate) {\n        HTMLTemplateElement.decorate(template);\n      }\n      let templateInfo = this.constructor._parseTemplate(template);\n      let nodeInfo = templateInfo.nodeInfoList;\n      let content = templateInfo.content || template.content;\n      let dom = /** @type {DocumentFragment} */ (document.importNode(content, true));\n      // NOTE: ShadyDom optimization indicating there is an insertion point\n      dom.__noInsertionPoint = !templateInfo.hasInsertionPoint;\n      let nodes = dom.nodeList = new Array(nodeInfo.length);\n      dom.$ = {};\n      for (let i=0, l=nodeInfo.length, info; (i<l) && (info=nodeInfo[i]); i++) {\n        let node = nodes[i] = findTemplateNode(dom, info);\n        applyIdToMap(this, dom.$, node, info);\n        applyTemplateContent(this, node, info);\n        applyEventListener(this, node, info);\n      }\n      dom = /** @type {!StampedTemplate} */(dom); // eslint-disable-line no-self-assign\n      return dom;\n    }\n\n    /**\n     * Adds an event listener by method name for the event provided.\n     *\n     * This method generates a handler function that looks up the method\n     * name at handling time.\n     *\n     * @param {!Node} node Node to add listener on\n     * @param {string} eventName Name of event\n     * @param {string} methodName Name of method\n     * @param {*=} context Context the method will be called on (defaults\n     *   to `node`)\n     * @return {Function} Generated handler function\n     */\n    _addMethodEventListenerToNode(node, eventName, methodName, context) {\n      context = context || node;\n      let handler = createNodeEventHandler(context, eventName, methodName);\n      this._addEventListenerToNode(node, eventName, handler);\n      return handler;\n    }\n\n    /**\n     * Override point for adding custom or simulated event handling.\n     *\n     * @param {!Node} node Node to add event listener to\n     * @param {string} eventName Name of event\n     * @param {function(!Event):void} handler Listener function to add\n     * @return {void}\n     */\n    _addEventListenerToNode(node, eventName, handler) {\n      node.addEventListener(eventName, handler);\n    }\n\n    /**\n     * Override point for adding custom or simulated event handling.\n     *\n     * @param {Node} node Node to remove event listener from\n     * @param {string} eventName Name of event\n     * @param {function(!Event):void} handler Listener function to remove\n     * @return {void}\n     */\n    _removeEventListenerFromNode(node, eventName, handler) {\n      node.removeEventListener(eventName, handler);\n    }\n\n  }\n\n  return TemplateStamp;\n\n});\n","/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\n\nimport '../utils/boot.js';\n\nimport { dedupingMixin } from '../utils/mixin.js';\nimport { root as root$0, isAncestor, isDescendant, get as get$0, translate, isPath as isPath$0, set as set$0, normalize } from '../utils/path.js';\n/* for notify, reflect */\nimport * as caseMap from '../utils/case-map.js';\nimport { camelToDashCase as camelToDashCase$0, dashToCamelCase } from '../utils/case-map.js';\nimport { PropertyAccessors } from './property-accessors.js';\n/* for annotated effects */\nimport { TemplateStamp } from './template-stamp.js';\nimport { sanitizeDOMValue } from '../utils/settings.js';\n\n/** @const {Object} */\nconst CaseMap = caseMap;\n\n// Monotonically increasing unique ID used for de-duping effects triggered\n// from multiple properties in the same turn\nlet dedupeId = 0;\n\n/**\n * Property effect types; effects are stored on the prototype using these keys\n * @enum {string}\n */\nconst TYPES = {\n  COMPUTE: '__computeEffects',\n  REFLECT: '__reflectEffects',\n  NOTIFY: '__notifyEffects',\n  PROPAGATE: '__propagateEffects',\n  OBSERVE: '__observeEffects',\n  READ_ONLY: '__readOnly'\n};\n\n/** @const {RegExp} */\nconst capitalAttributeRegex = /[A-Z]/;\n\n/**\n * @typedef {{\n * name: (string | undefined),\n * structured: (boolean | undefined),\n * wildcard: (boolean | undefined)\n * }}\n */\nlet DataTrigger; //eslint-disable-line no-unused-vars\n\n/**\n * @typedef {{\n * info: ?,\n * trigger: (!DataTrigger | undefined),\n * fn: (!Function | undefined)\n * }}\n */\nlet DataEffect; //eslint-disable-line no-unused-vars\n\nlet PropertyEffectsType; //eslint-disable-line no-unused-vars\n\n/**\n * Ensures that the model has an own-property map of effects for the given type.\n * The model may be a prototype or an instance.\n *\n * Property effects are stored as arrays of effects by property in a map,\n * by named type on the model. e.g.\n *\n *   __computeEffects: {\n *     foo: [ ... ],\n *     bar: [ ... ]\n *   }\n *\n * If the model does not yet have an effect map for the type, one is created\n * and returned.  If it does, but it is not an own property (i.e. the\n * prototype had effects), the the map is deeply cloned and the copy is\n * set on the model and returned, ready for new effects to be added.\n *\n * @param {Object} model Prototype or instance\n * @param {string} type Property effect type\n * @return {Object} The own-property map of effects for the given type\n * @private\n */\nfunction ensureOwnEffectMap(model, type) {\n  let effects = model[type];\n  if (!effects) {\n    effects = model[type] = {};\n  } else if (!model.hasOwnProperty(type)) {\n    effects = model[type] = Object.create(model[type]);\n    for (let p in effects) {\n      let protoFx = effects[p];\n      let instFx = effects[p] = Array(protoFx.length);\n      for (let i=0; i<protoFx.length; i++) {\n        instFx[i] = protoFx[i];\n      }\n    }\n  }\n  return effects;\n}\n\n// -- effects ----------------------------------------------\n\n/**\n * Runs all effects of a given type for the given set of property changes\n * on an instance.\n *\n * @param {!PropertyEffectsType} inst The instance with effects to run\n * @param {Object} effects Object map of property-to-Array of effects\n * @param {Object} props Bag of current property changes\n * @param {Object=} oldProps Bag of previous values for changed properties\n * @param {boolean=} hasPaths True with `props` contains one or more paths\n * @param {*=} extraArgs Additional metadata to pass to effect function\n * @return {boolean} True if an effect ran for this property\n * @private\n */\nfunction runEffects(inst, effects, props, oldProps, hasPaths, extraArgs) {\n  if (effects) {\n    let ran = false;\n    let id = dedupeId++;\n    for (let prop in props) {\n      if (runEffectsForProperty(inst, effects, id, prop, props, oldProps, hasPaths, extraArgs)) {\n        ran = true;\n      }\n    }\n    return ran;\n  }\n  return false;\n}\n\n/**\n * Runs a list of effects for a given property.\n *\n * @param {!PropertyEffectsType} inst The instance with effects to run\n * @param {Object} effects Object map of property-to-Array of effects\n * @param {number} dedupeId Counter used for de-duping effects\n * @param {string} prop Name of changed property\n * @param {*} props Changed properties\n * @param {*} oldProps Old properties\n * @param {boolean=} hasPaths True with `props` contains one or more paths\n * @param {*=} extraArgs Additional metadata to pass to effect function\n * @return {boolean} True if an effect ran for this property\n * @private\n */\nfunction runEffectsForProperty(inst, effects, dedupeId, prop, props, oldProps, hasPaths, extraArgs) {\n  let ran = false;\n  let rootProperty = hasPaths ? root$0(prop) : prop;\n  let fxs = effects[rootProperty];\n  if (fxs) {\n    for (let i=0, l=fxs.length, fx; (i<l) && (fx=fxs[i]); i++) {\n      if ((!fx.info || fx.info.lastRun !== dedupeId) &&\n          (!hasPaths || pathMatchesTrigger(prop, fx.trigger))) {\n        if (fx.info) {\n          fx.info.lastRun = dedupeId;\n        }\n        fx.fn(inst, prop, props, oldProps, fx.info, hasPaths, extraArgs);\n        ran = true;\n      }\n    }\n  }\n  return ran;\n}\n\n/**\n * Determines whether a property/path that has changed matches the trigger\n * criteria for an effect.  A trigger is a descriptor with the following\n * structure, which matches the descriptors returned from `parseArg`.\n * e.g. for `foo.bar.*`:\n * ```\n * trigger: {\n *   name: 'a.b',\n *   structured: true,\n *   wildcard: true\n * }\n * ```\n * If no trigger is given, the path is deemed to match.\n *\n * @param {string} path Path or property that changed\n * @param {DataTrigger} trigger Descriptor\n * @return {boolean} Whether the path matched the trigger\n */\nfunction pathMatchesTrigger(path, trigger) {\n  if (trigger) {\n    let triggerPath = trigger.name;\n    return (triggerPath == path) ||\n      (trigger.structured && isAncestor(triggerPath, path)) ||\n      (trigger.wildcard && isDescendant(triggerPath, path));\n  } else {\n    return true;\n  }\n}\n\n/**\n * Implements the \"observer\" effect.\n *\n * Calls the method with `info.methodName` on the instance, passing the\n * new and old values.\n *\n * @param {!PropertyEffectsType} inst The instance the effect will be run on\n * @param {string} property Name of property\n * @param {Object} props Bag of current property changes\n * @param {Object} oldProps Bag of previous values for changed properties\n * @param {?} info Effect metadata\n * @return {void}\n * @private\n */\nfunction runObserverEffect(inst, property, props, oldProps, info) {\n  let fn = typeof info.method === \"string\" ? inst[info.method] : info.method;\n  let changedProp = info.property;\n  if (fn) {\n    fn.call(inst, inst.__data[changedProp], oldProps[changedProp]);\n  } else if (!info.dynamicFn) {\n    console.warn('observer method `' + info.method + '` not defined');\n  }\n}\n\n/**\n * Runs \"notify\" effects for a set of changed properties.\n *\n * This method differs from the generic `runEffects` method in that it\n * will dispatch path notification events in the case that the property\n * changed was a path and the root property for that path didn't have a\n * \"notify\" effect.  This is to maintain 1.0 behavior that did not require\n * `notify: true` to ensure object sub-property notifications were\n * sent.\n *\n * @param {!PropertyEffectsType} inst The instance with effects to run\n * @param {Object} notifyProps Bag of properties to notify\n * @param {Object} props Bag of current property changes\n * @param {Object} oldProps Bag of previous values for changed properties\n * @param {boolean} hasPaths True with `props` contains one or more paths\n * @return {void}\n * @private\n */\nfunction runNotifyEffects(inst, notifyProps, props, oldProps, hasPaths) {\n  // Notify\n  let fxs = inst[TYPES.NOTIFY];\n  let notified;\n  let id = dedupeId++;\n  // Try normal notify effects; if none, fall back to try path notification\n  for (let prop in notifyProps) {\n    if (notifyProps[prop]) {\n      if (fxs && runEffectsForProperty(inst, fxs, id, prop, props, oldProps, hasPaths)) {\n        notified = true;\n      } else if (hasPaths && notifyPath(inst, prop, props)) {\n        notified = true;\n      }\n    }\n  }\n  // Flush host if we actually notified and host was batching\n  // And the host has already initialized clients; this prevents\n  // an issue with a host observing data changes before clients are ready.\n  let host;\n  if (notified && (host = inst.__dataHost) && host._invalidateProperties) {\n    host._invalidateProperties();\n  }\n}\n\n/**\n * Dispatches {property}-changed events with path information in the detail\n * object to indicate a sub-path of the property was changed.\n *\n * @param {!PropertyEffectsType} inst The element from which to fire the event\n * @param {string} path The path that was changed\n * @param {Object} props Bag of current property changes\n * @return {boolean} Returns true if the path was notified\n * @private\n */\nfunction notifyPath(inst, path, props) {\n  let rootProperty = root$0(path);\n  if (rootProperty !== path) {\n    let eventName = camelToDashCase$0(rootProperty) + '-changed';\n    dispatchNotifyEvent(inst, eventName, props[path], path);\n    return true;\n  }\n  return false;\n}\n\n/**\n * Dispatches {property}-changed events to indicate a property (or path)\n * changed.\n *\n * @param {!PropertyEffectsType} inst The element from which to fire the event\n * @param {string} eventName The name of the event to send ('{property}-changed')\n * @param {*} value The value of the changed property\n * @param {string | null | undefined} path If a sub-path of this property changed, the path\n *   that changed (optional).\n * @return {void}\n * @private\n * @suppress {invalidCasts}\n */\nfunction dispatchNotifyEvent(inst, eventName, value, path) {\n  let detail = {\n    value: value,\n    queueProperty: true\n  };\n  if (path) {\n    detail.path = path;\n  }\n  /** @type {!HTMLElement} */(inst).dispatchEvent(new CustomEvent(eventName, { detail }));\n}\n\n/**\n * Implements the \"notify\" effect.\n *\n * Dispatches a non-bubbling event named `info.eventName` on the instance\n * with a detail object containing the new `value`.\n *\n * @param {!PropertyEffectsType} inst The instance the effect will be run on\n * @param {string} property Name of property\n * @param {Object} props Bag of current property changes\n * @param {Object} oldProps Bag of previous values for changed properties\n * @param {?} info Effect metadata\n * @param {boolean} hasPaths True with `props` contains one or more paths\n * @return {void}\n * @private\n */\nfunction runNotifyEffect(inst, property, props, oldProps, info, hasPaths) {\n  let rootProperty = hasPaths ? root$0(property) : property;\n  let path = rootProperty != property ? property : null;\n  let value = path ? get$0(inst, path) : inst.__data[property];\n  if (path && value === undefined) {\n    value = props[property];  // specifically for .splices\n  }\n  dispatchNotifyEvent(inst, info.eventName, value, path);\n}\n\n/**\n * Handler function for 2-way notification events. Receives context\n * information captured in the `addNotifyListener` closure from the\n * `__notifyListeners` metadata.\n *\n * Sets the value of the notified property to the host property or path.  If\n * the event contained path information, translate that path to the host\n * scope's name for that path first.\n *\n * @param {CustomEvent} event Notification event (e.g. '<property>-changed')\n * @param {!PropertyEffectsType} inst Host element instance handling the notification event\n * @param {string} fromProp Child element property that was bound\n * @param {string} toPath Host property/path that was bound\n * @param {boolean} negate Whether the binding was negated\n * @return {void}\n * @private\n */\nfunction handleNotification(event, inst, fromProp, toPath, negate) {\n  let value;\n  let detail = /** @type {Object} */(event.detail);\n  let fromPath = detail && detail.path;\n  if (fromPath) {\n    toPath = translate(fromProp, toPath, fromPath);\n    value = detail && detail.value;\n  } else {\n    value = event.target[fromProp];\n  }\n  value = negate ? !value : value;\n  if (!inst[TYPES.READ_ONLY] || !inst[TYPES.READ_ONLY][toPath]) {\n    if (inst._setPendingPropertyOrPath(toPath, value, true, Boolean(fromPath))\n      && (!detail || !detail.queueProperty)) {\n      inst._invalidateProperties();\n    }\n  }\n}\n\n/**\n * Implements the \"reflect\" effect.\n *\n * Sets the attribute named `info.attrName` to the given property value.\n *\n * @param {!PropertyEffectsType} inst The instance the effect will be run on\n * @param {string} property Name of property\n * @param {Object} props Bag of current property changes\n * @param {Object} oldProps Bag of previous values for changed properties\n * @param {?} info Effect metadata\n * @return {void}\n * @private\n */\nfunction runReflectEffect(inst, property, props, oldProps, info) {\n  let value = inst.__data[property];\n  if (sanitizeDOMValue) {\n    value = sanitizeDOMValue(value, info.attrName, 'attribute', /** @type {Node} */(inst));\n  }\n  inst._propertyToAttribute(property, info.attrName, value);\n}\n\n/**\n * Runs \"computed\" effects for a set of changed properties.\n *\n * This method differs from the generic `runEffects` method in that it\n * continues to run computed effects based on the output of each pass until\n * there are no more newly computed properties.  This ensures that all\n * properties that will be computed by the initial set of changes are\n * computed before other effects (binding propagation, observers, and notify)\n * run.\n *\n * @param {!PropertyEffectsType} inst The instance the effect will be run on\n * @param {!Object} changedProps Bag of changed properties\n * @param {!Object} oldProps Bag of previous values for changed properties\n * @param {boolean} hasPaths True with `props` contains one or more paths\n * @return {void}\n * @private\n */\nfunction runComputedEffects(inst, changedProps, oldProps, hasPaths) {\n  let computeEffects = inst[TYPES.COMPUTE];\n  if (computeEffects) {\n    let inputProps = changedProps;\n    while (runEffects(inst, computeEffects, inputProps, oldProps, hasPaths)) {\n      Object.assign(oldProps, inst.__dataOld);\n      Object.assign(changedProps, inst.__dataPending);\n      inputProps = inst.__dataPending;\n      inst.__dataPending = null;\n    }\n  }\n}\n\n/**\n * Implements the \"computed property\" effect by running the method with the\n * values of the arguments specified in the `info` object and setting the\n * return value to the computed property specified.\n *\n * @param {!PropertyEffectsType} inst The instance the effect will be run on\n * @param {string} property Name of property\n * @param {Object} props Bag of current property changes\n * @param {Object} oldProps Bag of previous values for changed properties\n * @param {?} info Effect metadata\n * @return {void}\n * @private\n */\nfunction runComputedEffect(inst, property, props, oldProps, info) {\n  let result = runMethodEffect(inst, property, props, oldProps, info);\n  let computedProp = info.methodInfo;\n  if (inst.__dataHasAccessor && inst.__dataHasAccessor[computedProp]) {\n    inst._setPendingProperty(computedProp, result, true);\n  } else {\n    inst[computedProp] = result;\n  }\n}\n\n/**\n * Computes path changes based on path links set up using the `linkPaths`\n * API.\n *\n * @param {!PropertyEffectsType} inst The instance whose props are changing\n * @param {string | !Array<(string|number)>} path Path that has changed\n * @param {*} value Value of changed path\n * @return {void}\n * @private\n */\nfunction computeLinkedPaths(inst, path, value) {\n  let links = inst.__dataLinkedPaths;\n  if (links) {\n    let link;\n    for (let a in links) {\n      let b = links[a];\n      if (isDescendant(a, path)) {\n        link = translate(a, b, path);\n        inst._setPendingPropertyOrPath(link, value, true, true);\n      } else if (isDescendant(b, path)) {\n        link = translate(b, a, path);\n        inst._setPendingPropertyOrPath(link, value, true, true);\n      }\n    }\n  }\n}\n\n// -- bindings ----------------------------------------------\n\n/**\n * Adds binding metadata to the current `nodeInfo`, and binding effects\n * for all part dependencies to `templateInfo`.\n *\n * @param {Function} constructor Class that `_parseTemplate` is currently\n *   running on\n * @param {TemplateInfo} templateInfo Template metadata for current template\n * @param {NodeInfo} nodeInfo Node metadata for current template node\n * @param {string} kind Binding kind, either 'property', 'attribute', or 'text'\n * @param {string} target Target property name\n * @param {!Array<!BindingPart>} parts Array of binding part metadata\n * @param {string=} literal Literal text surrounding binding parts (specified\n *   only for 'property' bindings, since these must be initialized as part\n *   of boot-up)\n * @return {void}\n * @private\n */\nfunction addBinding(constructor, templateInfo, nodeInfo, kind, target, parts, literal) {\n  // Create binding metadata and add to nodeInfo\n  nodeInfo.bindings = nodeInfo.bindings || [];\n  let /** Binding */ binding = { kind, target, parts, literal, isCompound: (parts.length !== 1) };\n  nodeInfo.bindings.push(binding);\n  // Add listener info to binding metadata\n  if (shouldAddListener(binding)) {\n    let {event, negate} = binding.parts[0];\n    binding.listenerEvent = event || (CaseMap.camelToDashCase(target) + '-changed');\n    binding.listenerNegate = negate;\n  }\n  // Add \"propagate\" property effects to templateInfo\n  let index = templateInfo.nodeInfoList.length;\n  for (let i=0; i<binding.parts.length; i++) {\n    let part = binding.parts[i];\n    part.compoundIndex = i;\n    addEffectForBindingPart(constructor, templateInfo, binding, part, index);\n  }\n}\n\n/**\n * Adds property effects to the given `templateInfo` for the given binding\n * part.\n *\n * @param {Function} constructor Class that `_parseTemplate` is currently\n *   running on\n * @param {TemplateInfo} templateInfo Template metadata for current template\n * @param {!Binding} binding Binding metadata\n * @param {!BindingPart} part Binding part metadata\n * @param {number} index Index into `nodeInfoList` for this node\n * @return {void}\n */\nfunction addEffectForBindingPart(constructor, templateInfo, binding, part, index) {\n  if (!part.literal) {\n    if (binding.kind === 'attribute' && binding.target[0] === '-') {\n      console.warn('Cannot set attribute ' + binding.target +\n        ' because \"-\" is not a valid attribute starting character');\n    } else {\n      let dependencies = part.dependencies;\n      let info = { index, binding, part, evaluator: constructor };\n      for (let j=0; j<dependencies.length; j++) {\n        let trigger = dependencies[j];\n        if (typeof trigger == 'string') {\n          trigger = parseArg(trigger);\n          trigger.wildcard = true;\n        }\n        constructor._addTemplatePropertyEffect(templateInfo, trigger.rootProperty, {\n          fn: runBindingEffect,\n          info, trigger\n        });\n      }\n    }\n  }\n}\n\n/**\n * Implements the \"binding\" (property/path binding) effect.\n *\n * Note that binding syntax is overridable via `_parseBindings` and\n * `_evaluateBinding`.  This method will call `_evaluateBinding` for any\n * non-literal parts returned from `_parseBindings`.  However,\n * there is no support for _path_ bindings via custom binding parts,\n * as this is specific to Polymer's path binding syntax.\n *\n * @param {!PropertyEffectsType} inst The instance the effect will be run on\n * @param {string} path Name of property\n * @param {Object} props Bag of current property changes\n * @param {Object} oldProps Bag of previous values for changed properties\n * @param {?} info Effect metadata\n * @param {boolean} hasPaths True with `props` contains one or more paths\n * @param {Array} nodeList List of nodes associated with `nodeInfoList` template\n *   metadata\n * @return {void}\n * @private\n */\nfunction runBindingEffect(inst, path, props, oldProps, info, hasPaths, nodeList) {\n  let node = nodeList[info.index];\n  let binding = info.binding;\n  let part = info.part;\n  // Subpath notification: transform path and set to client\n  // e.g.: foo=\"{{obj.sub}}\", path: 'obj.sub.prop', set 'foo.prop'=obj.sub.prop\n  if (hasPaths && part.source && (path.length > part.source.length) &&\n      (binding.kind == 'property') && !binding.isCompound &&\n      node.__isPropertyEffectsClient &&\n      node.__dataHasAccessor && node.__dataHasAccessor[binding.target]) {\n    let value = props[path];\n    path = translate(part.source, binding.target, path);\n    if (node._setPendingPropertyOrPath(path, value, false, true)) {\n      inst._enqueueClient(node);\n    }\n  } else {\n    let value = info.evaluator._evaluateBinding(inst, part, path, props, oldProps, hasPaths);\n    // Propagate value to child\n    applyBindingValue(inst, node, binding, part, value);\n  }\n}\n\n/**\n * Sets the value for an \"binding\" (binding) effect to a node,\n * either as a property or attribute.\n *\n * @param {!PropertyEffectsType} inst The instance owning the binding effect\n * @param {Node} node Target node for binding\n * @param {!Binding} binding Binding metadata\n * @param {!BindingPart} part Binding part metadata\n * @param {*} value Value to set\n * @return {void}\n * @private\n */\nfunction applyBindingValue(inst, node, binding, part, value) {\n  value = computeBindingValue(node, value, binding, part);\n  if (sanitizeDOMValue) {\n    value = sanitizeDOMValue(value, binding.target, binding.kind, node);\n  }\n  if (binding.kind == 'attribute') {\n    // Attribute binding\n    inst._valueToNodeAttribute(/** @type {Element} */(node), value, binding.target);\n  } else {\n    // Property binding\n    let prop = binding.target;\n    if (node.__isPropertyEffectsClient &&\n        node.__dataHasAccessor && node.__dataHasAccessor[prop]) {\n      if (!node[TYPES.READ_ONLY] || !node[TYPES.READ_ONLY][prop]) {\n        if (node._setPendingProperty(prop, value)) {\n          inst._enqueueClient(node);\n        }\n      }\n    } else  {\n      inst._setUnmanagedPropertyToNode(node, prop, value);\n    }\n  }\n}\n\n/**\n * Transforms an \"binding\" effect value based on compound & negation\n * effect metadata, as well as handling for special-case properties\n *\n * @param {Node} node Node the value will be set to\n * @param {*} value Value to set\n * @param {!Binding} binding Binding metadata\n * @param {!BindingPart} part Binding part metadata\n * @return {*} Transformed value to set\n * @private\n */\nfunction computeBindingValue(node, value, binding, part) {\n  if (binding.isCompound) {\n    let storage = node.__dataCompoundStorage[binding.target];\n    storage[part.compoundIndex] = value;\n    value = storage.join('');\n  }\n  if (binding.kind !== 'attribute') {\n    // Some browsers serialize `undefined` to `\"undefined\"`\n    if (binding.target === 'textContent' ||\n        (binding.target === 'value' &&\n          (node.localName === 'input' || node.localName === 'textarea'))) {\n      value = value == undefined ? '' : value;\n    }\n  }\n  return value;\n}\n\n/**\n * Returns true if a binding's metadata meets all the requirements to allow\n * 2-way binding, and therefore a `<property>-changed` event listener should be\n * added:\n * - used curly braces\n * - is a property (not attribute) binding\n * - is not a textContent binding\n * - is not compound\n *\n * @param {!Binding} binding Binding metadata\n * @return {boolean} True if 2-way listener should be added\n * @private\n */\nfunction shouldAddListener(binding) {\n  return Boolean(binding.target) &&\n         binding.kind != 'attribute' &&\n         binding.kind != 'text' &&\n         !binding.isCompound &&\n         binding.parts[0].mode === '{';\n}\n\n/**\n * Setup compound binding storage structures, notify listeners, and dataHost\n * references onto the bound nodeList.\n *\n * @param {!PropertyEffectsType} inst Instance that bas been previously bound\n * @param {TemplateInfo} templateInfo Template metadata\n * @return {void}\n * @private\n */\nfunction setupBindings(inst, templateInfo) {\n  // Setup compound storage, dataHost, and notify listeners\n  let {nodeList, nodeInfoList} = templateInfo;\n  if (nodeInfoList.length) {\n    for (let i=0; i < nodeInfoList.length; i++) {\n      let info = nodeInfoList[i];\n      let node = nodeList[i];\n      let bindings = info.bindings;\n      if (bindings) {\n        for (let i=0; i<bindings.length; i++) {\n          let binding = bindings[i];\n          setupCompoundStorage(node, binding);\n          addNotifyListener(node, inst, binding);\n        }\n      }\n      node.__dataHost = inst;\n    }\n  }\n}\n\n/**\n * Initializes `__dataCompoundStorage` local storage on a bound node with\n * initial literal data for compound bindings, and sets the joined\n * literal parts to the bound property.\n *\n * When changes to compound parts occur, they are first set into the compound\n * storage array for that property, and then the array is joined to result in\n * the final value set to the property/attribute.\n *\n * @param {Node} node Bound node to initialize\n * @param {Binding} binding Binding metadata\n * @return {void}\n * @private\n */\nfunction setupCompoundStorage(node, binding) {\n  if (binding.isCompound) {\n    // Create compound storage map\n    let storage = node.__dataCompoundStorage ||\n      (node.__dataCompoundStorage = {});\n    let parts = binding.parts;\n    // Copy literals from parts into storage for this binding\n    let literals = new Array(parts.length);\n    for (let j=0; j<parts.length; j++) {\n      literals[j] = parts[j].literal;\n    }\n    let target = binding.target;\n    storage[target] = literals;\n    // Configure properties with their literal parts\n    if (binding.literal && binding.kind == 'property') {\n      node[target] = binding.literal;\n    }\n  }\n}\n\n/**\n * Adds a 2-way binding notification event listener to the node specified\n *\n * @param {Object} node Child element to add listener to\n * @param {!PropertyEffectsType} inst Host element instance to handle notification event\n * @param {Binding} binding Binding metadata\n * @return {void}\n * @private\n */\nfunction addNotifyListener(node, inst, binding) {\n  if (binding.listenerEvent) {\n    let part = binding.parts[0];\n    node.addEventListener(binding.listenerEvent, function(e) {\n      handleNotification(e, inst, binding.target, part.source, part.negate);\n    });\n  }\n}\n\n// -- for method-based effects (complexObserver & computed) --------------\n\n/**\n * Adds property effects for each argument in the method signature (and\n * optionally, for the method name if `dynamic` is true) that calls the\n * provided effect function.\n *\n * @param {Element | Object} model Prototype or instance\n * @param {!MethodSignature} sig Method signature metadata\n * @param {string} type Type of property effect to add\n * @param {Function} effectFn Function to run when arguments change\n * @param {*=} methodInfo Effect-specific information to be included in\n *   method effect metadata\n * @param {boolean|Object=} dynamicFn Boolean or object map indicating whether\n *   method names should be included as a dependency to the effect. Note,\n *   defaults to true if the signature is static (sig.static is true).\n * @return {void}\n * @private\n */\nfunction createMethodEffect(model, sig, type, effectFn, methodInfo, dynamicFn) {\n  dynamicFn = sig.static || (dynamicFn &&\n    (typeof dynamicFn !== 'object' || dynamicFn[sig.methodName]));\n  let info = {\n    methodName: sig.methodName,\n    args: sig.args,\n    methodInfo,\n    dynamicFn\n  };\n  for (let i=0, arg; (i<sig.args.length) && (arg=sig.args[i]); i++) {\n    if (!arg.literal) {\n      model._addPropertyEffect(arg.rootProperty, type, {\n        fn: effectFn, info: info, trigger: arg\n      });\n    }\n  }\n  if (dynamicFn) {\n    model._addPropertyEffect(sig.methodName, type, {\n      fn: effectFn, info: info\n    });\n  }\n}\n\n/**\n * Calls a method with arguments marshaled from properties on the instance\n * based on the method signature contained in the effect metadata.\n *\n * Multi-property observers, computed properties, and inline computing\n * functions call this function to invoke the method, then use the return\n * value accordingly.\n *\n * @param {!PropertyEffectsType} inst The instance the effect will be run on\n * @param {string} property Name of property\n * @param {Object} props Bag of current property changes\n * @param {Object} oldProps Bag of previous values for changed properties\n * @param {?} info Effect metadata\n * @return {*} Returns the return value from the method invocation\n * @private\n */\nfunction runMethodEffect(inst, property, props, oldProps, info) {\n  // Instances can optionally have a _methodHost which allows redirecting where\n  // to find methods. Currently used by `templatize`.\n  let context = inst._methodHost || inst;\n  let fn = context[info.methodName];\n  if (fn) {\n    let args = marshalArgs(inst.__data, info.args, property, props);\n    return fn.apply(context, args);\n  } else if (!info.dynamicFn) {\n    console.warn('method `' + info.methodName + '` not defined');\n  }\n}\n\nconst emptyArray = [];\n\n// Regular expressions used for binding\nconst IDENT  = '(?:' + '[a-zA-Z_$][\\\\w.:$\\\\-*]*' + ')';\nconst NUMBER = '(?:' + '[-+]?[0-9]*\\\\.?[0-9]+(?:[eE][-+]?[0-9]+)?' + ')';\nconst SQUOTE_STRING = '(?:' + '\\'(?:[^\\'\\\\\\\\]|\\\\\\\\.)*\\'' + ')';\nconst DQUOTE_STRING = '(?:' + '\"(?:[^\"\\\\\\\\]|\\\\\\\\.)*\"' + ')';\nconst STRING = '(?:' + SQUOTE_STRING + '|' + DQUOTE_STRING + ')';\nconst ARGUMENT = '(?:(' + IDENT + '|' + NUMBER + '|' +  STRING + ')\\\\s*' + ')';\nconst ARGUMENTS = '(?:' + ARGUMENT + '(?:,\\\\s*' + ARGUMENT + ')*' + ')';\nconst ARGUMENT_LIST = '(?:' + '\\\\(\\\\s*' +\n                              '(?:' + ARGUMENTS + '?' + ')' +\n                            '\\\\)\\\\s*' + ')';\nconst BINDING = '(' + IDENT + '\\\\s*' + ARGUMENT_LIST + '?' + ')'; // Group 3\nconst OPEN_BRACKET = '(\\\\[\\\\[|{{)' + '\\\\s*';\nconst CLOSE_BRACKET = '(?:]]|}})';\nconst NEGATE = '(?:(!)\\\\s*)?'; // Group 2\nconst EXPRESSION = OPEN_BRACKET + NEGATE + BINDING + CLOSE_BRACKET;\nconst bindingRegex = new RegExp(EXPRESSION, \"g\");\n\n/**\n * Create a string from binding parts of all the literal parts\n *\n * @param {!Array<BindingPart>} parts All parts to stringify\n * @return {string} String made from the literal parts\n */\nfunction literalFromParts(parts) {\n  let s = '';\n  for (let i=0; i<parts.length; i++) {\n    let literal = parts[i].literal;\n    s += literal || '';\n  }\n  return s;\n}\n\n/**\n * Parses an expression string for a method signature, and returns a metadata\n * describing the method in terms of `methodName`, `static` (whether all the\n * arguments are literals), and an array of `args`\n *\n * @param {string} expression The expression to parse\n * @return {?MethodSignature} The method metadata object if a method expression was\n *   found, otherwise `undefined`\n * @private\n */\nfunction parseMethod(expression) {\n  // tries to match valid javascript property names\n  let m = expression.match(/([^\\s]+?)\\(([\\s\\S]*)\\)/);\n  if (m) {\n    let methodName = m[1];\n    let sig = { methodName, static: true, args: emptyArray };\n    if (m[2].trim()) {\n      // replace escaped commas with comma entity, split on un-escaped commas\n      let args = m[2].replace(/\\\\,/g, '&comma;').split(',');\n      return parseArgs(args, sig);\n    } else {\n      return sig;\n    }\n  }\n  return null;\n}\n\n/**\n * Parses an array of arguments and sets the `args` property of the supplied\n * signature metadata object. Sets the `static` property to false if any\n * argument is a non-literal.\n *\n * @param {!Array<string>} argList Array of argument names\n * @param {!MethodSignature} sig Method signature metadata object\n * @return {!MethodSignature} The updated signature metadata object\n * @private\n */\nfunction parseArgs(argList, sig) {\n  sig.args = argList.map(function(rawArg) {\n    let arg = parseArg(rawArg);\n    if (!arg.literal) {\n      sig.static = false;\n    }\n    return arg;\n  }, this);\n  return sig;\n}\n\n/**\n * Parses an individual argument, and returns an argument metadata object\n * with the following fields:\n *\n *   {\n *     value: 'prop',        // property/path or literal value\n *     literal: false,       // whether argument is a literal\n *     structured: false,    // whether the property is a path\n *     rootProperty: 'prop', // the root property of the path\n *     wildcard: false       // whether the argument was a wildcard '.*' path\n *   }\n *\n * @param {string} rawArg The string value of the argument\n * @return {!MethodArg} Argument metadata object\n * @private\n */\nfunction parseArg(rawArg) {\n  // clean up whitespace\n  let arg = rawArg.trim()\n    // replace comma entity with comma\n    .replace(/&comma;/g, ',')\n    // repair extra escape sequences; note only commas strictly need\n    // escaping, but we allow any other char to be escaped since its\n    // likely users will do this\n    .replace(/\\\\(.)/g, '\\$1')\n    ;\n  // basic argument descriptor\n  let a = {\n    name: arg,\n    value: '',\n    literal: false\n  };\n  // detect literal value (must be String or Number)\n  let fc = arg[0];\n  if (fc === '-') {\n    fc = arg[1];\n  }\n  if (fc >= '0' && fc <= '9') {\n    fc = '#';\n  }\n  switch(fc) {\n    case \"'\":\n    case '\"':\n      a.value = arg.slice(1, -1);\n      a.literal = true;\n      break;\n    case '#':\n      a.value = Number(arg);\n      a.literal = true;\n      break;\n  }\n  // if not literal, look for structured path\n  if (!a.literal) {\n    a.rootProperty = root$0(arg);\n    // detect structured path (has dots)\n    a.structured = isPath$0(arg);\n    if (a.structured) {\n      a.wildcard = (arg.slice(-2) == '.*');\n      if (a.wildcard) {\n        a.name = arg.slice(0, -2);\n      }\n    }\n  }\n  return a;\n}\n\n/**\n * Gather the argument values for a method specified in the provided array\n * of argument metadata.\n *\n * The `path` and `value` arguments are used to fill in wildcard descriptor\n * when the method is being called as a result of a path notification.\n *\n * @param {Object} data Instance data storage object to read properties from\n * @param {!Array<!MethodArg>} args Array of argument metadata\n * @param {string} path Property/path name that triggered the method effect\n * @param {Object} props Bag of current property changes\n * @return {Array<*>} Array of argument values\n * @private\n */\nfunction marshalArgs(data, args, path, props) {\n  let values = [];\n  for (let i=0, l=args.length; i<l; i++) {\n    let arg = args[i];\n    let name = arg.name;\n    let v;\n    if (arg.literal) {\n      v = arg.value;\n    } else {\n      if (arg.structured) {\n        v = get$0(data, name);\n        // when data is not stored e.g. `splices`\n        if (v === undefined) {\n          v = props[name];\n        }\n      } else {\n        v = data[name];\n      }\n    }\n    if (arg.wildcard) {\n      // Only send the actual path changed info if the change that\n      // caused the observer to run matched the wildcard\n      let baseChanged = (name.indexOf(path + '.') === 0);\n      let matches = (path.indexOf(name) === 0 && !baseChanged);\n      values[i] = {\n        path: matches ? path : name,\n        value: matches ? props[path] : v,\n        base: v\n      };\n    } else {\n      values[i] = v;\n    }\n  }\n  return values;\n}\n\n// data api\n\n/**\n * Sends array splice notifications (`.splices` and `.length`)\n *\n * Note: this implementation only accepts normalized paths\n *\n * @param {!PropertyEffectsType} inst Instance to send notifications to\n * @param {Array} array The array the mutations occurred on\n * @param {string} path The path to the array that was mutated\n * @param {Array} splices Array of splice records\n * @return {void}\n * @private\n */\nfunction notifySplices(inst, array, path, splices) {\n  let splicesPath = path + '.splices';\n  inst.notifyPath(splicesPath, { indexSplices: splices });\n  inst.notifyPath(path + '.length', array.length);\n  // Null here to allow potentially large splice records to be GC'ed.\n  inst.__data[splicesPath] = {indexSplices: null};\n}\n\n/**\n * Creates a splice record and sends an array splice notification for\n * the described mutation\n *\n * Note: this implementation only accepts normalized paths\n *\n * @param {!PropertyEffectsType} inst Instance to send notifications to\n * @param {Array} array The array the mutations occurred on\n * @param {string} path The path to the array that was mutated\n * @param {number} index Index at which the array mutation occurred\n * @param {number} addedCount Number of added items\n * @param {Array} removed Array of removed items\n * @return {void}\n * @private\n */\nfunction notifySplice(inst, array, path, index, addedCount, removed) {\n  notifySplices(inst, array, path, [{\n    index: index,\n    addedCount: addedCount,\n    removed: removed,\n    object: array,\n    type: 'splice'\n  }]);\n}\n\n/**\n * Returns an upper-cased version of the string.\n *\n * @param {string} name String to uppercase\n * @return {string} Uppercased string\n * @private\n */\nfunction upper(name) {\n  return name[0].toUpperCase() + name.substring(1);\n}\n\n/**\n * Element class mixin that provides meta-programming for Polymer's template\n * binding and data observation (collectively, \"property effects\") system.\n *\n * This mixin uses provides the following key static methods for adding\n * property effects to an element class:\n * - `addPropertyEffect`\n * - `createPropertyObserver`\n * - `createMethodObserver`\n * - `createNotifyingProperty`\n * - `createReadOnlyProperty`\n * - `createReflectedProperty`\n * - `createComputedProperty`\n * - `bindTemplate`\n *\n * Each method creates one or more property accessors, along with metadata\n * used by this mixin's implementation of `_propertiesChanged` to perform\n * the property effects.\n *\n * Underscored versions of the above methods also exist on the element\n * prototype for adding property effects on instances at runtime.\n *\n * Note that this mixin overrides several `PropertyAccessors` methods, in\n * many cases to maintain guarantees provided by the Polymer 1.x features;\n * notably it changes property accessors to be synchronous by default\n * whereas the default when using `PropertyAccessors` standalone is to be\n * async by default.\n *\n * @mixinFunction\n * @polymer\n * @appliesMixin TemplateStamp\n * @appliesMixin PropertyAccessors\n * @summary Element class mixin that provides meta-programming for Polymer's\n * template binding and data observation system.\n */\nexport const PropertyEffects = dedupingMixin(superClass => {\n\n  /**\n   * @constructor\n   * @extends {superClass}\n   * @implements {Polymer_PropertyAccessors}\n   * @implements {Polymer_TemplateStamp}\n   * @unrestricted\n   */\n  const propertyEffectsBase = TemplateStamp(PropertyAccessors(superClass));\n\n  /**\n   * @polymer\n   * @mixinClass\n   * @implements {Polymer_PropertyEffects}\n   * @extends {propertyEffectsBase}\n   * @unrestricted\n   */\n  class PropertyEffects extends propertyEffectsBase {\n\n    constructor() {\n      super();\n      /** @type {boolean} */\n      // Used to identify users of this mixin, ala instanceof\n      this.__isPropertyEffectsClient = true;\n      /** @type {number} */\n      // NOTE: used to track re-entrant calls to `_flushProperties`\n      // path changes dirty check against `__dataTemp` only during one \"turn\"\n      // and are cleared when `__dataCounter` returns to 0.\n      this.__dataCounter = 0;\n      /** @type {boolean} */\n      this.__dataClientsReady;\n      /** @type {Array} */\n      this.__dataPendingClients;\n      /** @type {Object} */\n      this.__dataToNotify;\n      /** @type {Object} */\n      this.__dataLinkedPaths;\n      /** @type {boolean} */\n      this.__dataHasPaths;\n      /** @type {Object} */\n      this.__dataCompoundStorage;\n      /** @type {Polymer_PropertyEffects} */\n      this.__dataHost;\n      /** @type {!Object} */\n      this.__dataTemp;\n      /** @type {boolean} */\n      this.__dataClientsInitialized;\n      /** @type {!Object} */\n      this.__data;\n      /** @type {!Object} */\n      this.__dataPending;\n      /** @type {!Object} */\n      this.__dataOld;\n      /** @type {Object} */\n      this.__computeEffects;\n      /** @type {Object} */\n      this.__reflectEffects;\n      /** @type {Object} */\n      this.__notifyEffects;\n      /** @type {Object} */\n      this.__propagateEffects;\n      /** @type {Object} */\n      this.__observeEffects;\n      /** @type {Object} */\n      this.__readOnly;\n      /** @type {!TemplateInfo} */\n      this.__templateInfo;\n    }\n\n    get PROPERTY_EFFECT_TYPES() {\n      return TYPES;\n    }\n\n    /**\n     * @return {void}\n     */\n    _initializeProperties() {\n      super._initializeProperties();\n      hostStack.registerHost(this);\n      this.__dataClientsReady = false;\n      this.__dataPendingClients = null;\n      this.__dataToNotify = null;\n      this.__dataLinkedPaths = null;\n      this.__dataHasPaths = false;\n      // May be set on instance prior to upgrade\n      this.__dataCompoundStorage = this.__dataCompoundStorage || null;\n      this.__dataHost = this.__dataHost || null;\n      this.__dataTemp = {};\n      this.__dataClientsInitialized = false;\n    }\n\n    /**\n     * Overrides `PropertyAccessors` implementation to provide a\n     * more efficient implementation of initializing properties from\n     * the prototype on the instance.\n     *\n     * @override\n     * @param {Object} props Properties to initialize on the prototype\n     * @return {void}\n     */\n    _initializeProtoProperties(props) {\n      this.__data = Object.create(props);\n      this.__dataPending = Object.create(props);\n      this.__dataOld = {};\n    }\n\n    /**\n     * Overrides `PropertyAccessors` implementation to avoid setting\n     * `_setProperty`'s `shouldNotify: true`.\n     *\n     * @override\n     * @param {Object} props Properties to initialize on the instance\n     * @return {void}\n     */\n    _initializeInstanceProperties(props) {\n      let readOnly = this[TYPES.READ_ONLY];\n      for (let prop in props) {\n        if (!readOnly || !readOnly[prop]) {\n          this.__dataPending = this.__dataPending || {};\n          this.__dataOld = this.__dataOld || {};\n          this.__data[prop] = this.__dataPending[prop] = props[prop];\n        }\n      }\n    }\n\n    // Prototype setup ----------------------------------------\n\n    /**\n     * Equivalent to static `addPropertyEffect` API but can be called on\n     * an instance to add effects at runtime.  See that method for\n     * full API docs.\n     *\n     * @param {string} property Property that should trigger the effect\n     * @param {string} type Effect type, from this.PROPERTY_EFFECT_TYPES\n     * @param {Object=} effect Effect metadata object\n     * @return {void}\n     * @protected\n     */\n    _addPropertyEffect(property, type, effect) {\n      this._createPropertyAccessor(property, type == TYPES.READ_ONLY);\n      // effects are accumulated into arrays per property based on type\n      let effects = ensureOwnEffectMap(this, type)[property];\n      if (!effects) {\n        effects = this[type][property] = [];\n      }\n      effects.push(effect);\n    }\n\n    /**\n     * Removes the given property effect.\n     *\n     * @param {string} property Property the effect was associated with\n     * @param {string} type Effect type, from this.PROPERTY_EFFECT_TYPES\n     * @param {Object=} effect Effect metadata object to remove\n     * @return {void}\n     */\n    _removePropertyEffect(property, type, effect) {\n      let effects = ensureOwnEffectMap(this, type)[property];\n      let idx = effects.indexOf(effect);\n      if (idx >= 0) {\n        effects.splice(idx, 1);\n      }\n    }\n\n    /**\n     * Returns whether the current prototype/instance has a property effect\n     * of a certain type.\n     *\n     * @param {string} property Property name\n     * @param {string=} type Effect type, from this.PROPERTY_EFFECT_TYPES\n     * @return {boolean} True if the prototype/instance has an effect of this type\n     * @protected\n     */\n    _hasPropertyEffect(property, type) {\n      let effects = this[type];\n      return Boolean(effects && effects[property]);\n    }\n\n    /**\n     * Returns whether the current prototype/instance has a \"read only\"\n     * accessor for the given property.\n     *\n     * @param {string} property Property name\n     * @return {boolean} True if the prototype/instance has an effect of this type\n     * @protected\n     */\n    _hasReadOnlyEffect(property) {\n      return this._hasPropertyEffect(property, TYPES.READ_ONLY);\n    }\n\n    /**\n     * Returns whether the current prototype/instance has a \"notify\"\n     * property effect for the given property.\n     *\n     * @param {string} property Property name\n     * @return {boolean} True if the prototype/instance has an effect of this type\n     * @protected\n     */\n    _hasNotifyEffect(property) {\n      return this._hasPropertyEffect(property, TYPES.NOTIFY);\n    }\n\n    /**\n     * Returns whether the current prototype/instance has a \"reflect to attribute\"\n     * property effect for the given property.\n     *\n     * @param {string} property Property name\n     * @return {boolean} True if the prototype/instance has an effect of this type\n     * @protected\n     */\n    _hasReflectEffect(property) {\n      return this._hasPropertyEffect(property, TYPES.REFLECT);\n    }\n\n    /**\n     * Returns whether the current prototype/instance has a \"computed\"\n     * property effect for the given property.\n     *\n     * @param {string} property Property name\n     * @return {boolean} True if the prototype/instance has an effect of this type\n     * @protected\n     */\n    _hasComputedEffect(property) {\n      return this._hasPropertyEffect(property, TYPES.COMPUTE);\n    }\n\n    // Runtime ----------------------------------------\n\n    /**\n     * Sets a pending property or path.  If the root property of the path in\n     * question had no accessor, the path is set, otherwise it is enqueued\n     * via `_setPendingProperty`.\n     *\n     * This function isolates relatively expensive functionality necessary\n     * for the public API (`set`, `setProperties`, `notifyPath`, and property\n     * change listeners via {{...}} bindings), such that it is only done\n     * when paths enter the system, and not at every propagation step.  It\n     * also sets a `__dataHasPaths` flag on the instance which is used to\n     * fast-path slower path-matching code in the property effects host paths.\n     *\n     * `path` can be a path string or array of path parts as accepted by the\n     * public API.\n     *\n     * @param {string | !Array<number|string>} path Path to set\n     * @param {*} value Value to set\n     * @param {boolean=} shouldNotify Set to true if this change should\n     *  cause a property notification event dispatch\n     * @param {boolean=} isPathNotification If the path being set is a path\n     *   notification of an already changed value, as opposed to a request\n     *   to set and notify the change.  In the latter `false` case, a dirty\n     *   check is performed and then the value is set to the path before\n     *   enqueuing the pending property change.\n     * @return {boolean} Returns true if the property/path was enqueued in\n     *   the pending changes bag.\n     * @protected\n     */\n    _setPendingPropertyOrPath(path, value, shouldNotify, isPathNotification) {\n      if (isPathNotification ||\n          root$0(Array.isArray(path) ? path[0] : path) !== path) {\n        // Dirty check changes being set to a path against the actual object,\n        // since this is the entry point for paths into the system; from here\n        // the only dirty checks are against the `__dataTemp` cache to prevent\n        // duplicate work in the same turn only. Note, if this was a notification\n        // of a change already set to a path (isPathNotification: true),\n        // we always let the change through and skip the `set` since it was\n        // already dirty checked at the point of entry and the underlying\n        // object has already been updated\n        if (!isPathNotification) {\n          let old = get$0(this, path);\n          path = /** @type {string} */ (set$0(this, path, value));\n          // Use property-accessor's simpler dirty check\n          if (!path || !super._shouldPropertyChange(path, value, old)) {\n            return false;\n          }\n        }\n        this.__dataHasPaths = true;\n        if (this._setPendingProperty(/**@type{string}*/(path), value, shouldNotify)) {\n          computeLinkedPaths(this, path, value);\n          return true;\n        }\n      } else {\n        if (this.__dataHasAccessor && this.__dataHasAccessor[path]) {\n          return this._setPendingProperty(/**@type{string}*/(path), value, shouldNotify);\n        } else {\n          this[path] = value;\n        }\n      }\n      return false;\n    }\n\n    /**\n     * Applies a value to a non-Polymer element/node's property.\n     *\n     * The implementation makes a best-effort at binding interop:\n     * Some native element properties have side-effects when\n     * re-setting the same value (e.g. setting `<input>.value` resets the\n     * cursor position), so we do a dirty-check before setting the value.\n     * However, for better interop with non-Polymer custom elements that\n     * accept objects, we explicitly re-set object changes coming from the\n     * Polymer world (which may include deep object changes without the\n     * top reference changing), erring on the side of providing more\n     * information.\n     *\n     * Users may override this method to provide alternate approaches.\n     *\n     * @param {!Node} node The node to set a property on\n     * @param {string} prop The property to set\n     * @param {*} value The value to set\n     * @return {void}\n     * @protected\n     */\n    _setUnmanagedPropertyToNode(node, prop, value) {\n      // It is a judgment call that resetting primitives is\n      // \"bad\" and resettings objects is also \"good\"; alternatively we could\n      // implement a whitelist of tag & property values that should never\n      // be reset (e.g. <input>.value && <select>.value)\n      if (value !== node[prop] || typeof value == 'object') {\n        node[prop] = value;\n      }\n    }\n\n    /**\n     * Overrides the `PropertiesChanged` implementation to introduce special\n     * dirty check logic depending on the property & value being set:\n     *\n     * 1. Any value set to a path (e.g. 'obj.prop': 42 or 'obj.prop': {...})\n     *    Stored in `__dataTemp`, dirty checked against `__dataTemp`\n     * 2. Object set to simple property (e.g. 'prop': {...})\n     *    Stored in `__dataTemp` and `__data`, dirty checked against\n     *    `__dataTemp` by default implementation of `_shouldPropertyChange`\n     * 3. Primitive value set to simple property (e.g. 'prop': 42)\n     *    Stored in `__data`, dirty checked against `__data`\n     *\n     * The dirty-check is important to prevent cycles due to two-way\n     * notification, but paths and objects are only dirty checked against any\n     * previous value set during this turn via a \"temporary cache\" that is\n     * cleared when the last `_propertiesChanged` exits. This is so:\n     * a. any cached array paths (e.g. 'array.3.prop') may be invalidated\n     *    due to array mutations like shift/unshift/splice; this is fine\n     *    since path changes are dirty-checked at user entry points like `set`\n     * b. dirty-checking for objects only lasts one turn to allow the user\n     *    to mutate the object in-place and re-set it with the same identity\n     *    and have all sub-properties re-propagated in a subsequent turn.\n     *\n     * The temp cache is not necessarily sufficient to prevent invalid array\n     * paths, since a splice can happen during the same turn (with pathological\n     * user code); we could introduce a \"fixup\" for temporarily cached array\n     * paths if needed: https://github.com/Polymer/polymer/issues/4227\n     *\n     * @override\n     * @param {string} property Name of the property\n     * @param {*} value Value to set\n     * @param {boolean=} shouldNotify True if property should fire notification\n     *   event (applies only for `notify: true` properties)\n     * @return {boolean} Returns true if the property changed\n     */\n    _setPendingProperty(property, value, shouldNotify) {\n      let isPath = this.__dataHasPaths && isPath$0(property);\n      let prevProps = isPath ? this.__dataTemp : this.__data;\n      if (this._shouldPropertyChange(property, value, prevProps[property])) {\n        if (!this.__dataPending) {\n          this.__dataPending = {};\n          this.__dataOld = {};\n        }\n        // Ensure old is captured from the last turn\n        if (!(property in this.__dataOld)) {\n          this.__dataOld[property] = this.__data[property];\n        }\n        // Paths are stored in temporary cache (cleared at end of turn),\n        // which is used for dirty-checking, all others stored in __data\n        if (isPath) {\n          this.__dataTemp[property] = value;\n        } else {\n          this.__data[property] = value;\n        }\n        // All changes go into pending property bag, passed to _propertiesChanged\n        this.__dataPending[property] = value;\n        // Track properties that should notify separately\n        if (isPath || (this[TYPES.NOTIFY] && this[TYPES.NOTIFY][property])) {\n          this.__dataToNotify = this.__dataToNotify || {};\n          this.__dataToNotify[property] = shouldNotify;\n        }\n        return true;\n      }\n      return false;\n    }\n\n    /**\n     * Overrides base implementation to ensure all accessors set `shouldNotify`\n     * to true, for per-property notification tracking.\n     *\n     * @override\n     * @param {string} property Name of the property\n     * @param {*} value Value to set\n     * @return {void}\n     */\n    _setProperty(property, value) {\n      if (this._setPendingProperty(property, value, true)) {\n        this._invalidateProperties();\n      }\n    }\n\n    /**\n     * Overrides `PropertyAccessor`'s default async queuing of\n     * `_propertiesChanged`: if `__dataReady` is false (has not yet been\n     * manually flushed), the function no-ops; otherwise flushes\n     * `_propertiesChanged` synchronously.\n     *\n     * @override\n     * @return {void}\n     */\n    _invalidateProperties() {\n      if (this.__dataReady) {\n        this._flushProperties();\n      }\n    }\n\n    /**\n     * Enqueues the given client on a list of pending clients, whose\n     * pending property changes can later be flushed via a call to\n     * `_flushClients`.\n     *\n     * @param {Object} client PropertyEffects client to enqueue\n     * @return {void}\n     * @protected\n     */\n    _enqueueClient(client) {\n      this.__dataPendingClients = this.__dataPendingClients || [];\n      if (client !== this) {\n        this.__dataPendingClients.push(client);\n      }\n    }\n\n    /**\n     * Overrides superclass implementation.\n     *\n     * @return {void}\n     * @protected\n     */\n    _flushProperties() {\n      this.__dataCounter++;\n      super._flushProperties();\n      this.__dataCounter--;\n    }\n\n    /**\n     * Flushes any clients previously enqueued via `_enqueueClient`, causing\n     * their `_flushProperties` method to run.\n     *\n     * @return {void}\n     * @protected\n     */\n    _flushClients() {\n      if (!this.__dataClientsReady) {\n        this.__dataClientsReady = true;\n        this._readyClients();\n        // Override point where accessors are turned on; importantly,\n        // this is after clients have fully readied, providing a guarantee\n        // that any property effects occur only after all clients are ready.\n        this.__dataReady = true;\n      } else {\n        this.__enableOrFlushClients();\n      }\n    }\n\n    // NOTE: We ensure clients either enable or flush as appropriate. This\n    // handles two corner cases:\n    // (1) clients flush properly when connected/enabled before the host\n    // enables; e.g.\n    //   (a) Templatize stamps with no properties and does not flush and\n    //   (b) the instance is inserted into dom and\n    //   (c) then the instance flushes.\n    // (2) clients enable properly when not connected/enabled when the host\n    // flushes; e.g.\n    //   (a) a template is runtime stamped and not yet connected/enabled\n    //   (b) a host sets a property, causing stamped dom to flush\n    //   (c) the stamped dom enables.\n    __enableOrFlushClients() {\n      let clients = this.__dataPendingClients;\n      if (clients) {\n        this.__dataPendingClients = null;\n        for (let i=0; i < clients.length; i++) {\n          let client = clients[i];\n          if (!client.__dataEnabled) {\n            client._enableProperties();\n          } else if (client.__dataPending) {\n            client._flushProperties();\n          }\n        }\n      }\n    }\n\n    /**\n     * Perform any initial setup on client dom. Called before the first\n     * `_flushProperties` call on client dom and before any element\n     * observers are called.\n     *\n     * @return {void}\n     * @protected\n     */\n    _readyClients() {\n      this.__enableOrFlushClients();\n    }\n\n    /**\n     * Sets a bag of property changes to this instance, and\n     * synchronously processes all effects of the properties as a batch.\n     *\n     * Property names must be simple properties, not paths.  Batched\n     * path propagation is not supported.\n     *\n     * @param {Object} props Bag of one or more key-value pairs whose key is\n     *   a property and value is the new value to set for that property.\n     * @param {boolean=} setReadOnly When true, any private values set in\n     *   `props` will be set. By default, `setProperties` will not set\n     *   `readOnly: true` root properties.\n     * @return {void}\n     * @public\n     */\n    setProperties(props, setReadOnly) {\n      for (let path in props) {\n        if (setReadOnly || !this[TYPES.READ_ONLY] || !this[TYPES.READ_ONLY][path]) {\n          //TODO(kschaaf): explicitly disallow paths in setProperty?\n          // wildcard observers currently only pass the first changed path\n          // in the `info` object, and you could do some odd things batching\n          // paths, e.g. {'foo.bar': {...}, 'foo': null}\n          this._setPendingPropertyOrPath(path, props[path], true);\n        }\n      }\n      this._invalidateProperties();\n    }\n\n    /**\n     * Overrides `PropertyAccessors` so that property accessor\n     * side effects are not enabled until after client dom is fully ready.\n     * Also calls `_flushClients` callback to ensure client dom is enabled\n     * that was not enabled as a result of flushing properties.\n     *\n     * @override\n     * @return {void}\n     */\n    ready() {\n      // It is important that `super.ready()` is not called here as it\n      // immediately turns on accessors. Instead, we wait until `readyClients`\n      // to enable accessors to provide a guarantee that clients are ready\n      // before processing any accessors side effects.\n      this._flushProperties();\n      // If no data was pending, `_flushProperties` will not `flushClients`\n      // so ensure this is done.\n      if (!this.__dataClientsReady) {\n        this._flushClients();\n      }\n      // Before ready, client notifications do not trigger _flushProperties.\n      // Therefore a flush is necessary here if data has been set.\n      if (this.__dataPending) {\n        this._flushProperties();\n      }\n    }\n\n    /**\n     * Implements `PropertyAccessors`'s properties changed callback.\n     *\n     * Runs each class of effects for the batch of changed properties in\n     * a specific order (compute, propagate, reflect, observe, notify).\n     *\n     * @param {!Object} currentProps Bag of all current accessor values\n     * @param {!Object} changedProps Bag of properties changed since the last\n     *   call to `_propertiesChanged`\n     * @param {!Object} oldProps Bag of previous values for each property\n     *   in `changedProps`\n     * @return {void}\n     */\n    _propertiesChanged(currentProps, changedProps, oldProps) {\n      // ----------------------------\n      // let c = Object.getOwnPropertyNames(changedProps || {});\n      // window.debug && console.group(this.localName + '#' + this.id + ': ' + c);\n      // if (window.debug) { debugger; }\n      // ----------------------------\n      let hasPaths = this.__dataHasPaths;\n      this.__dataHasPaths = false;\n      // Compute properties\n      runComputedEffects(this, changedProps, oldProps, hasPaths);\n      // Clear notify properties prior to possible reentry (propagate, observe),\n      // but after computing effects have a chance to add to them\n      let notifyProps = this.__dataToNotify;\n      this.__dataToNotify = null;\n      // Propagate properties to clients\n      this._propagatePropertyChanges(changedProps, oldProps, hasPaths);\n      // Flush clients\n      this._flushClients();\n      // Reflect properties\n      runEffects(this, this[TYPES.REFLECT], changedProps, oldProps, hasPaths);\n      // Observe properties\n      runEffects(this, this[TYPES.OBSERVE], changedProps, oldProps, hasPaths);\n      // Notify properties to host\n      if (notifyProps) {\n        runNotifyEffects(this, notifyProps, changedProps, oldProps, hasPaths);\n      }\n      // Clear temporary cache at end of turn\n      if (this.__dataCounter == 1) {\n        this.__dataTemp = {};\n      }\n      // ----------------------------\n      // window.debug && console.groupEnd(this.localName + '#' + this.id + ': ' + c);\n      // ----------------------------\n    }\n\n    /**\n     * Called to propagate any property changes to stamped template nodes\n     * managed by this element.\n     *\n     * @param {Object} changedProps Bag of changed properties\n     * @param {Object} oldProps Bag of previous values for changed properties\n     * @param {boolean} hasPaths True with `props` contains one or more paths\n     * @return {void}\n     * @protected\n     */\n    _propagatePropertyChanges(changedProps, oldProps, hasPaths) {\n      if (this[TYPES.PROPAGATE]) {\n        runEffects(this, this[TYPES.PROPAGATE], changedProps, oldProps, hasPaths);\n      }\n      let templateInfo = this.__templateInfo;\n      while (templateInfo) {\n        runEffects(this, templateInfo.propertyEffects, changedProps, oldProps,\n          hasPaths, templateInfo.nodeList);\n        templateInfo = templateInfo.nextTemplateInfo;\n      }\n    }\n\n    /**\n     * Aliases one data path as another, such that path notifications from one\n     * are routed to the other.\n     *\n     * @param {string | !Array<string|number>} to Target path to link.\n     * @param {string | !Array<string|number>} from Source path to link.\n     * @return {void}\n     * @public\n     */\n    linkPaths(to, from) {\n      to = normalize(to);\n      from = normalize(from);\n      this.__dataLinkedPaths = this.__dataLinkedPaths || {};\n      this.__dataLinkedPaths[to] = from;\n    }\n\n    /**\n     * Removes a data path alias previously established with `_linkPaths`.\n     *\n     * Note, the path to unlink should be the target (`to`) used when\n     * linking the paths.\n     *\n     * @param {string | !Array<string|number>} path Target path to unlink.\n     * @return {void}\n     * @public\n     */\n    unlinkPaths(path) {\n      path = normalize(path);\n      if (this.__dataLinkedPaths) {\n        delete this.__dataLinkedPaths[path];\n      }\n    }\n\n    /**\n     * Notify that an array has changed.\n     *\n     * Example:\n     *\n     *     this.items = [ {name: 'Jim'}, {name: 'Todd'}, {name: 'Bill'} ];\n     *     ...\n     *     this.items.splice(1, 1, {name: 'Sam'});\n     *     this.items.push({name: 'Bob'});\n     *     this.notifySplices('items', [\n     *       { index: 1, removed: [{name: 'Todd'}], addedCount: 1, object: this.items, type: 'splice' },\n     *       { index: 3, removed: [], addedCount: 1, object: this.items, type: 'splice'}\n     *     ]);\n     *\n     * @param {string} path Path that should be notified.\n     * @param {Array} splices Array of splice records indicating ordered\n     *   changes that occurred to the array. Each record should have the\n     *   following fields:\n     *    * index: index at which the change occurred\n     *    * removed: array of items that were removed from this index\n     *    * addedCount: number of new items added at this index\n     *    * object: a reference to the array in question\n     *    * type: the string literal 'splice'\n     *\n     *   Note that splice records _must_ be normalized such that they are\n     *   reported in index order (raw results from `Object.observe` are not\n     *   ordered and must be normalized/merged before notifying).\n     * @return {void}\n     * @public\n    */\n    notifySplices(path, splices) {\n      let info = {path: ''};\n      let array = /** @type {Array} */(get$0(this, path, info));\n      notifySplices(this, array, info.path, splices);\n    }\n\n    /**\n     * Convenience method for reading a value from a path.\n     *\n     * Note, if any part in the path is undefined, this method returns\n     * `undefined` (this method does not throw when dereferencing undefined\n     * paths).\n     *\n     * @param {(string|!Array<(string|number)>)} path Path to the value\n     *   to read.  The path may be specified as a string (e.g. `foo.bar.baz`)\n     *   or an array of path parts (e.g. `['foo.bar', 'baz']`).  Note that\n     *   bracketed expressions are not supported; string-based path parts\n     *   *must* be separated by dots.  Note that when dereferencing array\n     *   indices, the index may be used as a dotted part directly\n     *   (e.g. `users.12.name` or `['users', 12, 'name']`).\n     * @param {Object=} root Root object from which the path is evaluated.\n     * @return {*} Value at the path, or `undefined` if any part of the path\n     *   is undefined.\n     * @public\n     */\n    get(path, root) {\n      return get$0(root || this, path);\n    }\n\n    /**\n     * Convenience method for setting a value to a path and notifying any\n     * elements bound to the same path.\n     *\n     * Note, if any part in the path except for the last is undefined,\n     * this method does nothing (this method does not throw when\n     * dereferencing undefined paths).\n     *\n     * @param {(string|!Array<(string|number)>)} path Path to the value\n     *   to write.  The path may be specified as a string (e.g. `'foo.bar.baz'`)\n     *   or an array of path parts (e.g. `['foo.bar', 'baz']`).  Note that\n     *   bracketed expressions are not supported; string-based path parts\n     *   *must* be separated by dots.  Note that when dereferencing array\n     *   indices, the index may be used as a dotted part directly\n     *   (e.g. `'users.12.name'` or `['users', 12, 'name']`).\n     * @param {*} value Value to set at the specified path.\n     * @param {Object=} root Root object from which the path is evaluated.\n     *   When specified, no notification will occur.\n     * @return {void}\n     * @public\n    */\n    set(path, value, root) {\n      if (root) {\n        set$0(root, path, value);\n      } else {\n        if (!this[TYPES.READ_ONLY] || !this[TYPES.READ_ONLY][/** @type {string} */(path)]) {\n          if (this._setPendingPropertyOrPath(path, value, true)) {\n            this._invalidateProperties();\n          }\n        }\n      }\n    }\n\n    /**\n     * Adds items onto the end of the array at the path specified.\n     *\n     * The arguments after `path` and return value match that of\n     * `Array.prototype.push`.\n     *\n     * This method notifies other paths to the same array that a\n     * splice occurred to the array.\n     *\n     * @param {string | !Array<string|number>} path Path to array.\n     * @param {...*} items Items to push onto array\n     * @return {number} New length of the array.\n     * @public\n     */\n    push(path, ...items) {\n      let info = {path: ''};\n      let array = /** @type {Array}*/(get$0(this, path, info));\n      let len = array.length;\n      let ret = array.push(...items);\n      if (items.length) {\n        notifySplice(this, array, info.path, len, items.length, []);\n      }\n      return ret;\n    }\n\n    /**\n     * Removes an item from the end of array at the path specified.\n     *\n     * The arguments after `path` and return value match that of\n     * `Array.prototype.pop`.\n     *\n     * This method notifies other paths to the same array that a\n     * splice occurred to the array.\n     *\n     * @param {string | !Array<string|number>} path Path to array.\n     * @return {*} Item that was removed.\n     * @public\n     */\n    pop(path) {\n      let info = {path: ''};\n      let array = /** @type {Array} */(get$0(this, path, info));\n      let hadLength = Boolean(array.length);\n      let ret = array.pop();\n      if (hadLength) {\n        notifySplice(this, array, info.path, array.length, 0, [ret]);\n      }\n      return ret;\n    }\n\n    /**\n     * Starting from the start index specified, removes 0 or more items\n     * from the array and inserts 0 or more new items in their place.\n     *\n     * The arguments after `path` and return value match that of\n     * `Array.prototype.splice`.\n     *\n     * This method notifies other paths to the same array that a\n     * splice occurred to the array.\n     *\n     * @param {string | !Array<string|number>} path Path to array.\n     * @param {number} start Index from which to start removing/inserting.\n     * @param {number} deleteCount Number of items to remove.\n     * @param {...*} items Items to insert into array.\n     * @return {Array} Array of removed items.\n     * @public\n     */\n    splice(path, start, deleteCount, ...items) {\n      let info = {path : ''};\n      let array = /** @type {Array} */(get$0(this, path, info));\n      // Normalize fancy native splice handling of crazy start values\n      if (start < 0) {\n        start = array.length - Math.floor(-start);\n      } else if (start) {\n        start = Math.floor(start);\n      }\n      // array.splice does different things based on the number of arguments\n      // you pass in. Therefore, array.splice(0) and array.splice(0, undefined)\n      // do different things. In the former, the whole array is cleared. In the\n      // latter, no items are removed.\n      // This means that we need to detect whether 1. one of the arguments\n      // is actually passed in and then 2. determine how many arguments\n      // we should pass on to the native array.splice\n      //\n      let ret;\n      // Omit any additional arguments if they were not passed in\n      if (arguments.length === 2) {\n        ret = array.splice(start);\n      // Either start was undefined and the others were defined, but in this\n      // case we can safely pass on all arguments\n      //\n      // Note: this includes the case where none of the arguments were passed in,\n      // e.g. this.splice('array'). However, if both start and deleteCount\n      // are undefined, array.splice will not modify the array (as expected)\n      } else {\n        ret = array.splice(start, deleteCount, ...items);\n      }\n      // At the end, check whether any items were passed in (e.g. insertions)\n      // or if the return array contains items (e.g. deletions).\n      // Only notify if items were added or deleted.\n      if (items.length || ret.length) {\n        notifySplice(this, array, info.path, start, items.length, ret);\n      }\n      return ret;\n    }\n\n    /**\n     * Removes an item from the beginning of array at the path specified.\n     *\n     * The arguments after `path` and return value match that of\n     * `Array.prototype.pop`.\n     *\n     * This method notifies other paths to the same array that a\n     * splice occurred to the array.\n     *\n     * @param {string | !Array<string|number>} path Path to array.\n     * @return {*} Item that was removed.\n     * @public\n     */\n    shift(path) {\n      let info = {path: ''};\n      let array = /** @type {Array} */(get$0(this, path, info));\n      let hadLength = Boolean(array.length);\n      let ret = array.shift();\n      if (hadLength) {\n        notifySplice(this, array, info.path, 0, 0, [ret]);\n      }\n      return ret;\n    }\n\n    /**\n     * Adds items onto the beginning of the array at the path specified.\n     *\n     * The arguments after `path` and return value match that of\n     * `Array.prototype.push`.\n     *\n     * This method notifies other paths to the same array that a\n     * splice occurred to the array.\n     *\n     * @param {string | !Array<string|number>} path Path to array.\n     * @param {...*} items Items to insert info array\n     * @return {number} New length of the array.\n     * @public\n     */\n    unshift(path, ...items) {\n      let info = {path: ''};\n      let array = /** @type {Array} */(get$0(this, path, info));\n      let ret = array.unshift(...items);\n      if (items.length) {\n        notifySplice(this, array, info.path, 0, items.length, []);\n      }\n      return ret;\n    }\n\n    /**\n     * Notify that a path has changed.\n     *\n     * Example:\n     *\n     *     this.item.user.name = 'Bob';\n     *     this.notifyPath('item.user.name');\n     *\n     * @param {string} path Path that should be notified.\n     * @param {*=} value Value at the path (optional).\n     * @return {void}\n     * @public\n    */\n    notifyPath(path, value) {\n      /** @type {string} */\n      let propPath;\n      if (arguments.length == 1) {\n        // Get value if not supplied\n        let info = {path: ''};\n        value = get$0(this, path, info);\n        propPath = info.path;\n      } else if (Array.isArray(path)) {\n        // Normalize path if needed\n        propPath = normalize(path);\n      } else {\n        propPath = /** @type{string} */(path);\n      }\n      if (this._setPendingPropertyOrPath(propPath, value, true, true)) {\n        this._invalidateProperties();\n      }\n    }\n\n    /**\n     * Equivalent to static `createReadOnlyProperty` API but can be called on\n     * an instance to add effects at runtime.  See that method for\n     * full API docs.\n     *\n     * @param {string} property Property name\n     * @param {boolean=} protectedSetter Creates a custom protected setter\n     *   when `true`.\n     * @return {void}\n     * @protected\n     */\n    _createReadOnlyProperty(property, protectedSetter) {\n      this._addPropertyEffect(property, TYPES.READ_ONLY);\n      if (protectedSetter) {\n        this['_set' + upper(property)] = /** @this {PropertyEffects} */function(value) {\n          this._setProperty(property, value);\n        };\n      }\n    }\n\n    /**\n     * Equivalent to static `createPropertyObserver` API but can be called on\n     * an instance to add effects at runtime.  See that method for\n     * full API docs.\n     *\n     * @param {string} property Property name\n     * @param {string|function(*,*)} method Function or name of observer method to call\n     * @param {boolean=} dynamicFn Whether the method name should be included as\n     *   a dependency to the effect.\n     * @return {void}\n     * @protected\n     */\n    _createPropertyObserver(property, method, dynamicFn) {\n      let info = { property, method, dynamicFn: Boolean(dynamicFn) };\n      this._addPropertyEffect(property, TYPES.OBSERVE, {\n        fn: runObserverEffect, info, trigger: {name: property}\n      });\n      if (dynamicFn) {\n        this._addPropertyEffect(/** @type {string} */(method), TYPES.OBSERVE, {\n          fn: runObserverEffect, info, trigger: {name: method}\n        });\n      }\n    }\n\n    /**\n     * Equivalent to static `createMethodObserver` API but can be called on\n     * an instance to add effects at runtime.  See that method for\n     * full API docs.\n     *\n     * @param {string} expression Method expression\n     * @param {boolean|Object=} dynamicFn Boolean or object map indicating\n     *   whether method names should be included as a dependency to the effect.\n     * @return {void}\n     * @protected\n     */\n    _createMethodObserver(expression, dynamicFn) {\n      let sig = parseMethod(expression);\n      if (!sig) {\n        throw new Error(\"Malformed observer expression '\" + expression + \"'\");\n      }\n      createMethodEffect(this, sig, TYPES.OBSERVE, runMethodEffect, null, dynamicFn);\n    }\n\n    /**\n     * Equivalent to static `createNotifyingProperty` API but can be called on\n     * an instance to add effects at runtime.  See that method for\n     * full API docs.\n     *\n     * @param {string} property Property name\n     * @return {void}\n     * @protected\n     */\n    _createNotifyingProperty(property) {\n      this._addPropertyEffect(property, TYPES.NOTIFY, {\n        fn: runNotifyEffect,\n        info: {\n          eventName: CaseMap.camelToDashCase(property) + '-changed',\n          property: property\n        }\n      });\n    }\n\n    /**\n     * Equivalent to static `createReflectedProperty` API but can be called on\n     * an instance to add effects at runtime.  See that method for\n     * full API docs.\n     *\n     * @param {string} property Property name\n     * @return {void}\n     * @protected\n     */\n    _createReflectedProperty(property) {\n      let attr = this.constructor.attributeNameForProperty(property);\n      if (attr[0] === '-') {\n        console.warn('Property ' + property + ' cannot be reflected to attribute ' +\n          attr + ' because \"-\" is not a valid starting attribute name. Use a lowercase first letter for the property instead.');\n      } else {\n        this._addPropertyEffect(property, TYPES.REFLECT, {\n          fn: runReflectEffect,\n          info: {\n            attrName: attr\n          }\n        });\n      }\n    }\n\n    /**\n     * Equivalent to static `createComputedProperty` API but can be called on\n     * an instance to add effects at runtime.  See that method for\n     * full API docs.\n     *\n     * @param {string} property Name of computed property to set\n     * @param {string} expression Method expression\n     * @param {boolean|Object=} dynamicFn Boolean or object map indicating\n     *   whether method names should be included as a dependency to the effect.\n     * @return {void}\n     * @protected\n     */\n    _createComputedProperty(property, expression, dynamicFn) {\n      let sig = parseMethod(expression);\n      if (!sig) {\n        throw new Error(\"Malformed computed expression '\" + expression + \"'\");\n      }\n      createMethodEffect(this, sig, TYPES.COMPUTE, runComputedEffect, property, dynamicFn);\n    }\n\n    // -- static class methods ------------\n\n    /**\n     * Ensures an accessor exists for the specified property, and adds\n     * to a list of \"property effects\" that will run when the accessor for\n     * the specified property is set.  Effects are grouped by \"type\", which\n     * roughly corresponds to a phase in effect processing.  The effect\n     * metadata should be in the following form:\n     *\n     *     {\n     *       fn: effectFunction, // Reference to function to call to perform effect\n     *       info: { ... }       // Effect metadata passed to function\n     *       trigger: {          // Optional triggering metadata; if not provided\n     *         name: string      // the property is treated as a wildcard\n     *         structured: boolean\n     *         wildcard: boolean\n     *       }\n     *     }\n     *\n     * Effects are called from `_propertiesChanged` in the following order by\n     * type:\n     *\n     * 1. COMPUTE\n     * 2. PROPAGATE\n     * 3. REFLECT\n     * 4. OBSERVE\n     * 5. NOTIFY\n     *\n     * Effect functions are called with the following signature:\n     *\n     *     effectFunction(inst, path, props, oldProps, info, hasPaths)\n     *\n     * @param {string} property Property that should trigger the effect\n     * @param {string} type Effect type, from this.PROPERTY_EFFECT_TYPES\n     * @param {Object=} effect Effect metadata object\n     * @return {void}\n     * @protected\n     */\n    static addPropertyEffect(property, type, effect) {\n      this.prototype._addPropertyEffect(property, type, effect);\n    }\n\n    /**\n     * Creates a single-property observer for the given property.\n     *\n     * @param {string} property Property name\n     * @param {string|function(*,*)} method Function or name of observer method to call\n     * @param {boolean=} dynamicFn Whether the method name should be included as\n     *   a dependency to the effect.\n     * @return {void}\n     * @protected\n     */\n    static createPropertyObserver(property, method, dynamicFn) {\n      this.prototype._createPropertyObserver(property, method, dynamicFn);\n    }\n\n    /**\n     * Creates a multi-property \"method observer\" based on the provided\n     * expression, which should be a string in the form of a normal JavaScript\n     * function signature: `'methodName(arg1, [..., argn])'`.  Each argument\n     * should correspond to a property or path in the context of this\n     * prototype (or instance), or may be a literal string or number.\n     *\n     * @param {string} expression Method expression\n     * @param {boolean|Object=} dynamicFn Boolean or object map indicating\n     * @return {void}\n     *   whether method names should be included as a dependency to the effect.\n     * @protected\n     */\n    static createMethodObserver(expression, dynamicFn) {\n      this.prototype._createMethodObserver(expression, dynamicFn);\n    }\n\n    /**\n     * Causes the setter for the given property to dispatch `<property>-changed`\n     * events to notify of changes to the property.\n     *\n     * @param {string} property Property name\n     * @return {void}\n     * @protected\n     */\n    static createNotifyingProperty(property) {\n      this.prototype._createNotifyingProperty(property);\n    }\n\n    /**\n     * Creates a read-only accessor for the given property.\n     *\n     * To set the property, use the protected `_setProperty` API.\n     * To create a custom protected setter (e.g. `_setMyProp()` for\n     * property `myProp`), pass `true` for `protectedSetter`.\n     *\n     * Note, if the property will have other property effects, this method\n     * should be called first, before adding other effects.\n     *\n     * @param {string} property Property name\n     * @param {boolean=} protectedSetter Creates a custom protected setter\n     *   when `true`.\n     * @return {void}\n     * @protected\n     */\n    static createReadOnlyProperty(property, protectedSetter) {\n      this.prototype._createReadOnlyProperty(property, protectedSetter);\n    }\n\n    /**\n     * Causes the setter for the given property to reflect the property value\n     * to a (dash-cased) attribute of the same name.\n     *\n     * @param {string} property Property name\n     * @return {void}\n     * @protected\n     */\n    static createReflectedProperty(property) {\n      this.prototype._createReflectedProperty(property);\n    }\n\n    /**\n     * Creates a computed property whose value is set to the result of the\n     * method described by the given `expression` each time one or more\n     * arguments to the method changes.  The expression should be a string\n     * in the form of a normal JavaScript function signature:\n     * `'methodName(arg1, [..., argn])'`\n     *\n     * @param {string} property Name of computed property to set\n     * @param {string} expression Method expression\n     * @param {boolean|Object=} dynamicFn Boolean or object map indicating whether\n     *   method names should be included as a dependency to the effect.\n     * @return {void}\n     * @protected\n     */\n    static createComputedProperty(property, expression, dynamicFn) {\n      this.prototype._createComputedProperty(property, expression, dynamicFn);\n    }\n\n    /**\n     * Parses the provided template to ensure binding effects are created\n     * for them, and then ensures property accessors are created for any\n     * dependent properties in the template.  Binding effects for bound\n     * templates are stored in a linked list on the instance so that\n     * templates can be efficiently stamped and unstamped.\n     *\n     * @param {!HTMLTemplateElement} template Template containing binding\n     *   bindings\n     * @return {!TemplateInfo} Template metadata object\n     * @protected\n     */\n    static bindTemplate(template) {\n      return this.prototype._bindTemplate(template);\n    }\n\n    // -- binding ----------------------------------------------\n\n    /**\n     * Equivalent to static `bindTemplate` API but can be called on\n     * an instance to add effects at runtime.  See that method for\n     * full API docs.\n     *\n     * This method may be called on the prototype (for prototypical template\n     * binding, to avoid creating accessors every instance) once per prototype,\n     * and will be called with `runtimeBinding: true` by `_stampTemplate` to\n     * create and link an instance of the template metadata associated with a\n     * particular stamping.\n     *\n     * @param {!HTMLTemplateElement} template Template containing binding\n     *   bindings\n     * @param {boolean=} instanceBinding When false (default), performs\n     *   \"prototypical\" binding of the template and overwrites any previously\n     *   bound template for the class. When true (as passed from\n     *   `_stampTemplate`), the template info is instanced and linked into\n     *   the list of bound templates.\n     * @return {!TemplateInfo} Template metadata object; for `runtimeBinding`,\n     *   this is an instance of the prototypical template info\n     * @protected\n     */\n    _bindTemplate(template, instanceBinding) {\n      let templateInfo = this.constructor._parseTemplate(template);\n      let wasPreBound = this.__templateInfo == templateInfo;\n      // Optimization: since this is called twice for proto-bound templates,\n      // don't attempt to recreate accessors if this template was pre-bound\n      if (!wasPreBound) {\n        for (let prop in templateInfo.propertyEffects) {\n          this._createPropertyAccessor(prop);\n        }\n      }\n      if (instanceBinding) {\n        // For instance-time binding, create instance of template metadata\n        // and link into list of templates if necessary\n        templateInfo = /** @type {!TemplateInfo} */(Object.create(templateInfo));\n        templateInfo.wasPreBound = wasPreBound;\n        if (!wasPreBound && this.__templateInfo) {\n          let last = this.__templateInfoLast || this.__templateInfo;\n          this.__templateInfoLast = last.nextTemplateInfo = templateInfo;\n          templateInfo.previousTemplateInfo = last;\n          return templateInfo;\n        }\n      }\n      return this.__templateInfo = templateInfo;\n    }\n\n    /**\n     * Adds a property effect to the given template metadata, which is run\n     * at the \"propagate\" stage of `_propertiesChanged` when the template\n     * has been bound to the element via `_bindTemplate`.\n     *\n     * The `effect` object should match the format in `_addPropertyEffect`.\n     *\n     * @param {Object} templateInfo Template metadata to add effect to\n     * @param {string} prop Property that should trigger the effect\n     * @param {Object=} effect Effect metadata object\n     * @return {void}\n     * @protected\n     */\n    static _addTemplatePropertyEffect(templateInfo, prop, effect) {\n      let hostProps = templateInfo.hostProps = templateInfo.hostProps || {};\n      hostProps[prop] = true;\n      let effects = templateInfo.propertyEffects = templateInfo.propertyEffects || {};\n      let propEffects = effects[prop] = effects[prop] || [];\n      propEffects.push(effect);\n    }\n\n    /**\n     * Stamps the provided template and performs instance-time setup for\n     * Polymer template features, including data bindings, declarative event\n     * listeners, and the `this.$` map of `id`'s to nodes.  A document fragment\n     * is returned containing the stamped DOM, ready for insertion into the\n     * DOM.\n     *\n     * This method may be called more than once; however note that due to\n     * `shadycss` polyfill limitations, only styles from templates prepared\n     * using `ShadyCSS.prepareTemplate` will be correctly polyfilled (scoped\n     * to the shadow root and support CSS custom properties), and note that\n     * `ShadyCSS.prepareTemplate` may only be called once per element. As such,\n     * any styles required by in runtime-stamped templates must be included\n     * in the main element template.\n     *\n     * @param {!HTMLTemplateElement} template Template to stamp\n     * @return {!StampedTemplate} Cloned template content\n     * @override\n     * @protected\n     */\n    _stampTemplate(template) {\n      // Ensures that created dom is `_enqueueClient`'d to this element so\n      // that it can be flushed on next call to `_flushProperties`\n      hostStack.beginHosting(this);\n      let dom = super._stampTemplate(template);\n      hostStack.endHosting(this);\n      let templateInfo = /** @type {!TemplateInfo} */(this._bindTemplate(template, true));\n      // Add template-instance-specific data to instanced templateInfo\n      templateInfo.nodeList = dom.nodeList;\n      // Capture child nodes to allow unstamping of non-prototypical templates\n      if (!templateInfo.wasPreBound) {\n        let nodes = templateInfo.childNodes = [];\n        for (let n=dom.firstChild; n; n=n.nextSibling) {\n          nodes.push(n);\n        }\n      }\n      dom.templateInfo = templateInfo;\n      // Setup compound storage, 2-way listeners, and dataHost for bindings\n      setupBindings(this, templateInfo);\n      // Flush properties into template nodes if already booted\n      if (this.__dataReady) {\n        runEffects(this, templateInfo.propertyEffects, this.__data, null,\n          false, templateInfo.nodeList);\n      }\n      return dom;\n    }\n\n    /**\n     * Removes and unbinds the nodes previously contained in the provided\n     * DocumentFragment returned from `_stampTemplate`.\n     *\n     * @param {!StampedTemplate} dom DocumentFragment previously returned\n     *   from `_stampTemplate` associated with the nodes to be removed\n     * @return {void}\n     * @protected\n     */\n    _removeBoundDom(dom) {\n      // Unlink template info\n      let templateInfo = dom.templateInfo;\n      if (templateInfo.previousTemplateInfo) {\n        templateInfo.previousTemplateInfo.nextTemplateInfo =\n          templateInfo.nextTemplateInfo;\n      }\n      if (templateInfo.nextTemplateInfo) {\n        templateInfo.nextTemplateInfo.previousTemplateInfo =\n          templateInfo.previousTemplateInfo;\n      }\n      if (this.__templateInfoLast == templateInfo) {\n        this.__templateInfoLast = templateInfo.previousTemplateInfo;\n      }\n      templateInfo.previousTemplateInfo = templateInfo.nextTemplateInfo = null;\n      // Remove stamped nodes\n      let nodes = templateInfo.childNodes;\n      for (let i=0; i<nodes.length; i++) {\n        let node = nodes[i];\n        node.parentNode.removeChild(node);\n      }\n    }\n\n    /**\n     * Overrides default `TemplateStamp` implementation to add support for\n     * parsing bindings from `TextNode`'s' `textContent`.  A `bindings`\n     * array is added to `nodeInfo` and populated with binding metadata\n     * with information capturing the binding target, and a `parts` array\n     * with one or more metadata objects capturing the source(s) of the\n     * binding.\n     *\n     * @override\n     * @param {Node} node Node to parse\n     * @param {TemplateInfo} templateInfo Template metadata for current template\n     * @param {NodeInfo} nodeInfo Node metadata for current template node\n     * @return {boolean} `true` if the visited node added node-specific\n     *   metadata to `nodeInfo`\n     * @protected\n     * @suppress {missingProperties} Interfaces in closure do not inherit statics, but classes do\n     */\n    static _parseTemplateNode(node, templateInfo, nodeInfo) {\n      let noted = super._parseTemplateNode(node, templateInfo, nodeInfo);\n      if (node.nodeType === Node.TEXT_NODE) {\n        let parts = this._parseBindings(node.textContent, templateInfo);\n        if (parts) {\n          // Initialize the textContent with any literal parts\n          // NOTE: default to a space here so the textNode remains; some browsers\n          // (IE) omit an empty textNode following cloneNode/importNode.\n          node.textContent = literalFromParts(parts) || ' ';\n          addBinding(this, templateInfo, nodeInfo, 'text', 'textContent', parts);\n          noted = true;\n        }\n      }\n      return noted;\n    }\n\n    /**\n     * Overrides default `TemplateStamp` implementation to add support for\n     * parsing bindings from attributes.  A `bindings`\n     * array is added to `nodeInfo` and populated with binding metadata\n     * with information capturing the binding target, and a `parts` array\n     * with one or more metadata objects capturing the source(s) of the\n     * binding.\n     *\n     * @override\n     * @param {Element} node Node to parse\n     * @param {TemplateInfo} templateInfo Template metadata for current template\n     * @param {NodeInfo} nodeInfo Node metadata for current template node\n     * @param {string} name Attribute name\n     * @param {string} value Attribute value\n     * @return {boolean} `true` if the visited node added node-specific\n     *   metadata to `nodeInfo`\n     * @protected\n     * @suppress {missingProperties} Interfaces in closure do not inherit statics, but classes do\n     */\n    static _parseTemplateNodeAttribute(node, templateInfo, nodeInfo, name, value) {\n      let parts = this._parseBindings(value, templateInfo);\n      if (parts) {\n        // Attribute or property\n        let origName = name;\n        let kind = 'property';\n        // The only way we see a capital letter here is if the attr has\n        // a capital letter in it per spec. In this case, to make sure\n        // this binding works, we go ahead and make the binding to the attribute.\n        if (capitalAttributeRegex.test(name)) {\n          kind = 'attribute';\n        } else if (name[name.length-1] == '$') {\n          name = name.slice(0, -1);\n          kind = 'attribute';\n        }\n        // Initialize attribute bindings with any literal parts\n        let literal = literalFromParts(parts);\n        if (literal && kind == 'attribute') {\n          node.setAttribute(name, literal);\n        }\n        // Clear attribute before removing, since IE won't allow removing\n        // `value` attribute if it previously had a value (can't\n        // unconditionally set '' before removing since attributes with `$`\n        // can't be set using setAttribute)\n        if (node.localName === 'input' && origName === 'value') {\n          node.setAttribute(origName, '');\n        }\n        // Remove annotation\n        node.removeAttribute(origName);\n        // Case hackery: attributes are lower-case, but bind targets\n        // (properties) are case sensitive. Gambit is to map dash-case to\n        // camel-case: `foo-bar` becomes `fooBar`.\n        // Attribute bindings are excepted.\n        if (kind === 'property') {\n          name = dashToCamelCase(name);\n        }\n        addBinding(this, templateInfo, nodeInfo, kind, name, parts, literal);\n        return true;\n      } else {\n        return super._parseTemplateNodeAttribute(node, templateInfo, nodeInfo, name, value);\n      }\n    }\n\n    /**\n     * Overrides default `TemplateStamp` implementation to add support for\n     * binding the properties that a nested template depends on to the template\n     * as `_host_<property>`.\n     *\n     * @override\n     * @param {Node} node Node to parse\n     * @param {TemplateInfo} templateInfo Template metadata for current template\n     * @param {NodeInfo} nodeInfo Node metadata for current template node\n     * @return {boolean} `true` if the visited node added node-specific\n     *   metadata to `nodeInfo`\n     * @protected\n     * @suppress {missingProperties} Interfaces in closure do not inherit statics, but classes do\n     */\n    static _parseTemplateNestedTemplate(node, templateInfo, nodeInfo) {\n      let noted = super._parseTemplateNestedTemplate(node, templateInfo, nodeInfo);\n      // Merge host props into outer template and add bindings\n      let hostProps = nodeInfo.templateInfo.hostProps;\n      let mode = '{';\n      for (let source in hostProps) {\n        let parts = [{ mode, source, dependencies: [source] }];\n        addBinding(this, templateInfo, nodeInfo, 'property', '_host_' + source, parts);\n      }\n      return noted;\n    }\n\n    /**\n     * Called to parse text in a template (either attribute values or\n     * textContent) into binding metadata.\n     *\n     * Any overrides of this method should return an array of binding part\n     * metadata  representing one or more bindings found in the provided text\n     * and any \"literal\" text in between.  Any non-literal parts will be passed\n     * to `_evaluateBinding` when any dependencies change.  The only required\n     * fields of each \"part\" in the returned array are as follows:\n     *\n     * - `dependencies` - Array containing trigger metadata for each property\n     *   that should trigger the binding to update\n     * - `literal` - String containing text if the part represents a literal;\n     *   in this case no `dependencies` are needed\n     *\n     * Additional metadata for use by `_evaluateBinding` may be provided in\n     * each part object as needed.\n     *\n     * The default implementation handles the following types of bindings\n     * (one or more may be intermixed with literal strings):\n     * - Property binding: `[[prop]]`\n     * - Path binding: `[[object.prop]]`\n     * - Negated property or path bindings: `[[!prop]]` or `[[!object.prop]]`\n     * - Two-way property or path bindings (supports negation):\n     *   `{{prop}}`, `{{object.prop}}`, `{{!prop}}` or `{{!object.prop}}`\n     * - Inline computed method (supports negation):\n     *   `[[compute(a, 'literal', b)]]`, `[[!compute(a, 'literal', b)]]`\n     *\n     * The default implementation uses a regular expression for best\n     * performance. However, the regular expression uses a white-list of\n     * allowed characters in a data-binding, which causes problems for\n     * data-bindings that do use characters not in this white-list.\n     *\n     * Instead of updating the white-list with all allowed characters,\n     * there is a StrictBindingParser (see lib/mixins/strict-binding-parser)\n     * that uses a state machine instead. This state machine is able to handle\n     * all characters. However, it is slightly less performant, therefore we\n     * extracted it into a separate optional mixin.\n     *\n     * @param {string} text Text to parse from attribute or textContent\n     * @param {Object} templateInfo Current template metadata\n     * @return {Array<!BindingPart>} Array of binding part metadata\n     * @protected\n     */\n    static _parseBindings(text, templateInfo) {\n      let parts = [];\n      let lastIndex = 0;\n      let m;\n      // Example: \"literal1{{prop}}literal2[[!compute(foo,bar)]]final\"\n      // Regex matches:\n      //        Iteration 1:  Iteration 2:\n      // m[1]: '{{'          '[['\n      // m[2]: ''            '!'\n      // m[3]: 'prop'        'compute(foo,bar)'\n      while ((m = bindingRegex.exec(text)) !== null) {\n        // Add literal part\n        if (m.index > lastIndex) {\n          parts.push({literal: text.slice(lastIndex, m.index)});\n        }\n        // Add binding part\n        let mode = m[1][0];\n        let negate = Boolean(m[2]);\n        let source = m[3].trim();\n        let customEvent = false, notifyEvent = '', colon = -1;\n        if (mode == '{' && (colon = source.indexOf('::')) > 0) {\n          notifyEvent = source.substring(colon + 2);\n          source = source.substring(0, colon);\n          customEvent = true;\n        }\n        let signature = parseMethod(source);\n        let dependencies = [];\n        if (signature) {\n          // Inline computed function\n          let {args, methodName} = signature;\n          for (let i=0; i<args.length; i++) {\n            let arg = args[i];\n            if (!arg.literal) {\n              dependencies.push(arg);\n            }\n          }\n          let dynamicFns = templateInfo.dynamicFns;\n          if (dynamicFns && dynamicFns[methodName] || signature.static) {\n            dependencies.push(methodName);\n            signature.dynamicFn = true;\n          }\n        } else {\n          // Property or path\n          dependencies.push(source);\n        }\n        parts.push({\n          source, mode, negate, customEvent, signature, dependencies,\n          event: notifyEvent\n        });\n        lastIndex = bindingRegex.lastIndex;\n      }\n      // Add a final literal part\n      if (lastIndex && lastIndex < text.length) {\n        let literal = text.substring(lastIndex);\n        if (literal) {\n          parts.push({\n            literal: literal\n          });\n        }\n      }\n      if (parts.length) {\n        return parts;\n      } else {\n        return null;\n      }\n    }\n\n    /**\n     * Called to evaluate a previously parsed binding part based on a set of\n     * one or more changed dependencies.\n     *\n     * @param {this} inst Element that should be used as scope for\n     *   binding dependencies\n     * @param {BindingPart} part Binding part metadata\n     * @param {string} path Property/path that triggered this effect\n     * @param {Object} props Bag of current property changes\n     * @param {Object} oldProps Bag of previous values for changed properties\n     * @param {boolean} hasPaths True with `props` contains one or more paths\n     * @return {*} Value the binding part evaluated to\n     * @protected\n     */\n    static _evaluateBinding(inst, part, path, props, oldProps, hasPaths) {\n      let value;\n      if (part.signature) {\n        value = runMethodEffect(inst, path, props, oldProps, part.signature);\n      } else if (path != part.source) {\n        value = get$0(inst, part.source);\n      } else {\n        if (hasPaths && isPath$0(path)) {\n          value = get$0(inst, path);\n        } else {\n          value = inst.__data[path];\n        }\n      }\n      if (part.negate) {\n        value = !value;\n      }\n      return value;\n    }\n\n  }\n\n  // make a typing for closure :P\n  PropertyEffectsType = PropertyEffects;\n\n  return PropertyEffects;\n});\n\n/**\n * Helper api for enqueuing client dom created by a host element.\n *\n * By default elements are flushed via `_flushProperties` when\n * `connectedCallback` is called. Elements attach their client dom to\n * themselves at `ready` time which results from this first flush.\n * This provides an ordering guarantee that the client dom an element\n * creates is flushed before the element itself (i.e. client `ready`\n * fires before host `ready`).\n *\n * However, if `_flushProperties` is called *before* an element is connected,\n * as for example `Templatize` does, this ordering guarantee cannot be\n * satisfied because no elements are connected. (Note: Bound elements that\n * receive data do become enqueued clients and are properly ordered but\n * unbound elements are not.)\n *\n * To maintain the desired \"client before host\" ordering guarantee for this\n * case we rely on the \"host stack. Client nodes registers themselves with\n * the creating host element when created. This ensures that all client dom\n * is readied in the proper order, maintaining the desired guarantee.\n *\n * @private\n */\nlet hostStack = {\n\n  stack: [],\n\n  /**\n   * @param {*} inst Instance to add to hostStack\n   * @return {void}\n   * @this {hostStack}\n   */\n  registerHost(inst) {\n    if (this.stack.length) {\n      let host = this.stack[this.stack.length-1];\n      host._enqueueClient(inst);\n    }\n  },\n\n  /**\n   * @param {*} inst Instance to begin hosting\n   * @return {void}\n   * @this {hostStack}\n   */\n  beginHosting(inst) {\n    this.stack.push(inst);\n  },\n\n  /**\n   * @param {*} inst Instance to end hosting\n   * @return {void}\n   * @this {hostStack}\n   */\n  endHosting(inst) {\n    let stackLen = this.stack.length;\n    if (stackLen && this.stack[stackLen-1] == inst) {\n      this.stack.pop();\n    }\n  }\n\n};\n","/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\nimport '../utils/boot.js';\n\nimport { dedupingMixin } from '../utils/mixin.js';\nimport * as caseMap$0 from '../utils/case-map.js';\nimport { PropertiesChanged } from './properties-changed.js';\n\nlet caseMap = caseMap$0;\n\n// Save map of native properties; this forms a blacklist or properties\n// that won't have their values \"saved\" by `saveAccessorValue`, since\n// reading from an HTMLElement accessor from the context of a prototype throws\nconst nativeProperties = {};\nlet proto = HTMLElement.prototype;\nwhile (proto) {\n  let props = Object.getOwnPropertyNames(proto);\n  for (let i=0; i<props.length; i++) {\n    nativeProperties[props[i]] = true;\n  }\n  proto = Object.getPrototypeOf(proto);\n}\n\n/**\n * Used to save the value of a property that will be overridden with\n * an accessor. If the `model` is a prototype, the values will be saved\n * in `__dataProto`, and it's up to the user (or downstream mixin) to\n * decide how/when to set these values back into the accessors.\n * If `model` is already an instance (it has a `__data` property), then\n * the value will be set as a pending property, meaning the user should\n * call `_invalidateProperties` or `_flushProperties` to take effect\n *\n * @param {Object} model Prototype or instance\n * @param {string} property Name of property\n * @return {void}\n * @private\n */\nfunction saveAccessorValue(model, property) {\n  // Don't read/store value for any native properties since they could throw\n  if (!nativeProperties[property]) {\n    let value = model[property];\n    if (value !== undefined) {\n      if (model.__data) {\n        // Adding accessor to instance; update the property\n        // It is the user's responsibility to call _flushProperties\n        model._setPendingProperty(property, value);\n      } else {\n        // Adding accessor to proto; save proto's value for instance-time use\n        if (!model.__dataProto) {\n          model.__dataProto = {};\n        } else if (!model.hasOwnProperty(JSCompiler_renameProperty('__dataProto', model))) {\n          model.__dataProto = Object.create(model.__dataProto);\n        }\n        model.__dataProto[property] = value;\n      }\n    }\n  }\n}\n\n/**\n * Element class mixin that provides basic meta-programming for creating one\n * or more property accessors (getter/setter pair) that enqueue an async\n * (batched) `_propertiesChanged` callback.\n *\n * For basic usage of this mixin:\n *\n * -   Declare attributes to observe via the standard `static get observedAttributes()`. Use\n *     `dash-case` attribute names to represent `camelCase` property names.\n * -   Implement the `_propertiesChanged` callback on the class.\n * -   Call `MyClass.createPropertiesForAttributes()` **once** on the class to generate\n *     property accessors for each observed attribute. This must be called before the first\n *     instance is created, for example, by calling it before calling `customElements.define`.\n *     It can also be called lazily from the element's `constructor`, as long as it's guarded so\n *     that the call is only made once, when the first instance is created.\n * -   Call `this._enableProperties()` in the element's `connectedCallback` to enable\n *     the accessors.\n *\n * Any `observedAttributes` will automatically be\n * deserialized via `attributeChangedCallback` and set to the associated\n * property using `dash-case`-to-`camelCase` convention.\n *\n * @mixinFunction\n * @polymer\n * @appliesMixin PropertiesChanged\n * @summary Element class mixin for reacting to property changes from\n *   generated property accessors.\n */\nexport const PropertyAccessors = dedupingMixin(superClass => {\n\n  /**\n   * @constructor\n   * @extends {superClass}\n   * @implements {Polymer_PropertiesChanged}\n   * @unrestricted\n   */\n   const base = PropertiesChanged(superClass);\n\n  /**\n   * @polymer\n   * @mixinClass\n   * @implements {Polymer_PropertyAccessors}\n   * @extends {base}\n   * @unrestricted\n   */\n  class PropertyAccessors extends base {\n\n    /**\n     * Generates property accessors for all attributes in the standard\n     * static `observedAttributes` array.\n     *\n     * Attribute names are mapped to property names using the `dash-case` to\n     * `camelCase` convention\n     *\n     * @return {void}\n     */\n    static createPropertiesForAttributes() {\n      let a$ = this.observedAttributes;\n      for (let i=0; i < a$.length; i++) {\n        this.prototype._createPropertyAccessor(caseMap.dashToCamelCase(a$[i]));\n      }\n    }\n\n    /**\n     * Returns an attribute name that corresponds to the given property.\n     * By default, converts camel to dash case, e.g. `fooBar` to `foo-bar`.\n     * @param {string} property Property to convert\n     * @return {string} Attribute name corresponding to the given property.\n     *\n     * @protected\n     */\n    static attributeNameForProperty(property) {\n      return caseMap.camelToDashCase(property);\n    }\n\n    /**\n     * Overrides PropertiesChanged implementation to initialize values for\n     * accessors created for values that already existed on the element\n     * prototype.\n     *\n     * @return {void}\n     * @protected\n     */\n    _initializeProperties() {\n      if (this.__dataProto) {\n        this._initializeProtoProperties(this.__dataProto);\n        this.__dataProto = null;\n      }\n      super._initializeProperties();\n    }\n\n    /**\n     * Called at instance time with bag of properties that were overwritten\n     * by accessors on the prototype when accessors were created.\n     *\n     * The default implementation sets these properties back into the\n     * setter at instance time.  This method is provided as an override\n     * point for customizing or providing more efficient initialization.\n     *\n     * @param {Object} props Bag of property values that were overwritten\n     *   when creating property accessors.\n     * @return {void}\n     * @protected\n     */\n    _initializeProtoProperties(props) {\n      for (let p in props) {\n        this._setProperty(p, props[p]);\n      }\n    }\n\n    /**\n     * Ensures the element has the given attribute. If it does not,\n     * assigns the given value to the attribute.\n     *\n     * @suppress {invalidCasts} Closure can't figure out `this` is infact an element\n     *\n     * @param {string} attribute Name of attribute to ensure is set.\n     * @param {string} value of the attribute.\n     * @return {void}\n     */\n    _ensureAttribute(attribute, value) {\n      const el = /** @type {!HTMLElement} */(this);\n      if (!el.hasAttribute(attribute)) {\n        this._valueToNodeAttribute(el, value, attribute);\n      }\n    }\n\n    /**\n     * Overrides PropertiesChanged implemention to serialize objects as JSON.\n     *\n     * @param {*} value Property value to serialize.\n     * @return {string | undefined} String serialized from the provided property value.\n     */\n    _serializeValue(value) {\n      /* eslint-disable no-fallthrough */\n      switch (typeof value) {\n        case 'object':\n          if (value instanceof Date) {\n            return value.toString();\n          } else if (value) {\n            try {\n              return JSON.stringify(value);\n            } catch(x) {\n              return '';\n            }\n          }\n\n        default:\n          return super._serializeValue(value);\n      }\n    }\n\n    /**\n     * Converts a string to a typed JavaScript value.\n     *\n     * This method is called by Polymer when reading HTML attribute values to\n     * JS properties.  Users may override this method on Polymer element\n     * prototypes to provide deserialization for custom `type`s.  Note,\n     * the `type` argument is the value of the `type` field provided in the\n     * `properties` configuration object for a given property, and is\n     * by convention the constructor for the type to deserialize.\n     *\n     *\n     * @param {?string} value Attribute value to deserialize.\n     * @param {*=} type Type to deserialize the string to.\n     * @return {*} Typed value deserialized from the provided string.\n     */\n    _deserializeValue(value, type) {\n      /**\n       * @type {*}\n       */\n      let outValue;\n      switch (type) {\n        case Object:\n          try {\n            outValue = JSON.parse(/** @type {string} */(value));\n          } catch(x) {\n            // allow non-JSON literals like Strings and Numbers\n            outValue = value;\n          }\n          break;\n        case Array:\n          try {\n            outValue = JSON.parse(/** @type {string} */(value));\n          } catch(x) {\n            outValue = null;\n            console.warn(`Polymer::Attributes: couldn't decode Array as JSON: ${value}`);\n          }\n          break;\n        case Date:\n          outValue = isNaN(value) ? String(value) : Number(value);\n          outValue = new Date(outValue);\n          break;\n        default:\n          outValue = super._deserializeValue(value, type);\n          break;\n      }\n      return outValue;\n    }\n    /* eslint-enable no-fallthrough */\n\n    /**\n     * Overrides PropertiesChanged implementation to save existing prototype\n     * property value so that it can be reset.\n     * @param {string} property Name of the property\n     * @param {boolean=} readOnly When true, no setter is created\n     *\n     * When calling on a prototype, any overwritten values are saved in\n     * `__dataProto`, and it is up to the subclasser to decide how/when\n     * to set those properties back into the accessor.  When calling on an\n     * instance, the overwritten value is set via `_setPendingProperty`,\n     * and the user should call `_invalidateProperties` or `_flushProperties`\n     * for the values to take effect.\n     * @protected\n     * @return {void}\n     */\n    _definePropertyAccessor(property, readOnly) {\n      saveAccessorValue(this, property);\n      super._definePropertyAccessor(property, readOnly);\n    }\n\n    /**\n     * Returns true if this library created an accessor for the given property.\n     *\n     * @param {string} property Property name\n     * @return {boolean} True if an accessor was created\n     */\n    _hasAccessor(property) {\n      return this.__dataHasAccessor && this.__dataHasAccessor[property];\n    }\n\n    /**\n     * Returns true if the specified property has a pending change.\n     *\n     * @param {string} prop Property name\n     * @return {boolean} True if property has a pending change\n     * @protected\n     */\n    _isPropertyPending(prop) {\n      return Boolean(this.__dataPending && (prop in this.__dataPending));\n    }\n\n  }\n\n  return PropertyAccessors;\n\n});\n","exports.f = {}.propertyIsEnumerable;\n","// 19.1.2.14 / 15.2.3.14 Object.keys(O)\nvar $keys = require('./_object-keys-internal');\nvar enumBugKeys = require('./_enum-bug-keys');\n\nmodule.exports = Object.keys || function keys(O) {\n  return $keys(O, enumBugKeys);\n};\n","var id = 0;\nvar px = Math.random();\nmodule.exports = function (key) {\n  return 'Symbol('.concat(key === undefined ? '' : key, ')_', (++id + px).toString(36));\n};\n","module.exports = true;\n","module.exports = function (bitmap, value) {\n  return {\n    enumerable: !(bitmap & 1),\n    configurable: !(bitmap & 2),\n    writable: !(bitmap & 4),\n    value: value\n  };\n};\n","/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\nimport './boot.js';\n\nimport './mixin.js';\nimport './async.js';\n\n/**\n * @summary Collapse multiple callbacks into one invocation after a timer.\n */\nexport const Debouncer = class Debouncer {\n  constructor() {\n    this._asyncModule = null;\n    this._callback = null;\n    this._timer = null;\n  }\n  /**\n   * Sets the scheduler; that is, a module with the Async interface,\n   * a callback and optional arguments to be passed to the run function\n   * from the async module.\n   *\n   * @param {!AsyncInterface} asyncModule Object with Async interface.\n   * @param {function()} callback Callback to run.\n   * @return {void}\n   */\n  setConfig(asyncModule, callback) {\n    this._asyncModule = asyncModule;\n    this._callback = callback;\n    this._timer = this._asyncModule.run(() => {\n      this._timer = null;\n      this._callback();\n    });\n  }\n  /**\n   * Cancels an active debouncer and returns a reference to itself.\n   *\n   * @return {void}\n   */\n  cancel() {\n    if (this.isActive()) {\n      this._asyncModule.cancel(this._timer);\n      this._timer = null;\n    }\n  }\n  /**\n   * Flushes an active debouncer and returns a reference to itself.\n   *\n   * @return {void}\n   */\n  flush() {\n    if (this.isActive()) {\n      this.cancel();\n      this._callback();\n    }\n  }\n  /**\n   * Returns true if the debouncer is active.\n   *\n   * @return {boolean} True if active.\n   */\n  isActive() {\n    return this._timer != null;\n  }\n  /**\n   * Creates a debouncer if no debouncer is passed as a parameter\n   * or it cancels an active debouncer otherwise. The following\n   * example shows how a debouncer can be called multiple times within a\n   * microtask and \"debounced\" such that the provided callback function is\n   * called once. Add this method to a custom element:\n   *\n   * ```js\n   * import {microtask} from '@polymer/polymer/lib/utils/async.js';\n   * import {Debouncer} from '@polymer/polymer/lib/utils/debounce.js';\n   * // ...\n   *\n   * _debounceWork() {\n   *   this._debounceJob = Debouncer.debounce(this._debounceJob,\n   *       microTask, () => this._doWork());\n   * }\n   * ```\n   *\n   * If the `_debounceWork` method is called multiple times within the same\n   * microtask, the `_doWork` function will be called only once at the next\n   * microtask checkpoint.\n   *\n   * Note: In testing it is often convenient to avoid asynchrony. To accomplish\n   * this with a debouncer, you can use `enqueueDebouncer` and\n   * `flush`. For example, extend the above example by adding\n   * `enqueueDebouncer(this._debounceJob)` at the end of the\n   * `_debounceWork` method. Then in a test, call `flush` to ensure\n   * the debouncer has completed.\n   *\n   * @param {Debouncer?} debouncer Debouncer object.\n   * @param {!AsyncInterface} asyncModule Object with Async interface\n   * @param {function()} callback Callback to run.\n   * @return {!Debouncer} Returns a debouncer object.\n   */\n  static debounce(debouncer, asyncModule, callback) {\n    if (debouncer instanceof Debouncer) {\n      debouncer.cancel();\n    } else {\n      debouncer = new Debouncer();\n    }\n    debouncer.setConfig(asyncModule, callback);\n    return debouncer;\n  }\n};\n","/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\nimport '../utils/boot.js';\n\nimport { dedupingMixin } from '../utils/mixin.js';\nimport { microTask } from '../utils/async.js';\n\n/** @const {!AsyncInterface} */\nconst microtask = microTask;\n\n/**\n * Element class mixin that provides basic meta-programming for creating one\n * or more property accessors (getter/setter pair) that enqueue an async\n * (batched) `_propertiesChanged` callback.\n *\n * For basic usage of this mixin, call `MyClass.createProperties(props)`\n * once at class definition time to create property accessors for properties\n * named in props, implement `_propertiesChanged` to react as desired to\n * property changes, and implement `static get observedAttributes()` and\n * include lowercase versions of any property names that should be set from\n * attributes. Last, call `this._enableProperties()` in the element's\n * `connectedCallback` to enable the accessors.\n *\n * @mixinFunction\n * @polymer\n * @summary Element class mixin for reacting to property changes from\n *   generated property accessors.\n */\nexport const PropertiesChanged = dedupingMixin(superClass => {\n\n  /**\n   * @polymer\n   * @mixinClass\n   * @extends {superClass}\n   * @implements {Polymer_PropertiesChanged}\n   * @unrestricted\n   */\n  class PropertiesChanged extends superClass {\n\n    /**\n     * Creates property accessors for the given property names.\n     * @param {!Object} props Object whose keys are names of accessors.\n     * @return {void}\n     * @protected\n     */\n    static createProperties(props) {\n      const proto = this.prototype;\n      for (let prop in props) {\n        // don't stomp an existing accessor\n        if (!(prop in proto)) {\n          proto._createPropertyAccessor(prop);\n        }\n      }\n    }\n\n    /**\n     * Returns an attribute name that corresponds to the given property.\n     * The attribute name is the lowercased property name. Override to\n     * customize this mapping.\n     * @param {string} property Property to convert\n     * @return {string} Attribute name corresponding to the given property.\n     *\n     * @protected\n     */\n    static attributeNameForProperty(property) {\n      return property.toLowerCase();\n    }\n\n    /**\n     * Override point to provide a type to which to deserialize a value to\n     * a given property.\n     * @param {string} name Name of property\n     *\n     * @protected\n     */\n    static typeForProperty(name) { } //eslint-disable-line no-unused-vars\n\n    /**\n     * Creates a setter/getter pair for the named property with its own\n     * local storage.  The getter returns the value in the local storage,\n     * and the setter calls `_setProperty`, which updates the local storage\n     * for the property and enqueues a `_propertiesChanged` callback.\n     *\n     * This method may be called on a prototype or an instance.  Calling\n     * this method may overwrite a property value that already exists on\n     * the prototype/instance by creating the accessor.\n     *\n     * @param {string} property Name of the property\n     * @param {boolean=} readOnly When true, no setter is created; the\n     *   protected `_setProperty` function must be used to set the property\n     * @return {void}\n     * @protected\n     */\n    _createPropertyAccessor(property, readOnly) {\n      this._addPropertyToAttributeMap(property);\n      if (!this.hasOwnProperty('__dataHasAccessor')) {\n        this.__dataHasAccessor = Object.assign({}, this.__dataHasAccessor);\n      }\n      if (!this.__dataHasAccessor[property]) {\n        this.__dataHasAccessor[property] = true;\n        this._definePropertyAccessor(property, readOnly);\n      }\n    }\n\n    /**\n     * Adds the given `property` to a map matching attribute names\n     * to property names, using `attributeNameForProperty`. This map is\n     * used when deserializing attribute values to properties.\n     *\n     * @param {string} property Name of the property\n     */\n    _addPropertyToAttributeMap(property) {\n      if (!this.hasOwnProperty('__dataAttributes')) {\n        this.__dataAttributes = Object.assign({}, this.__dataAttributes);\n      }\n      if (!this.__dataAttributes[property]) {\n        const attr = this.constructor.attributeNameForProperty(property);\n        this.__dataAttributes[attr] = property;\n      }\n    }\n\n    /**\n     * Defines a property accessor for the given property.\n     * @param {string} property Name of the property\n     * @param {boolean=} readOnly When true, no setter is created\n     * @return {void}\n     */\n     _definePropertyAccessor(property, readOnly) {\n      Object.defineProperty(this, property, {\n        /* eslint-disable valid-jsdoc */\n        /** @this {PropertiesChanged} */\n        get() {\n          return this._getProperty(property);\n        },\n        /** @this {PropertiesChanged} */\n        set: readOnly ? function () {} : function (value) {\n          this._setProperty(property, value);\n        }\n        /* eslint-enable */\n      });\n    }\n\n    constructor() {\n      super();\n      this.__dataEnabled = false;\n      this.__dataReady = false;\n      this.__dataInvalid = false;\n      this.__data = {};\n      this.__dataPending = null;\n      this.__dataOld = null;\n      this.__dataInstanceProps = null;\n      this.__serializing = false;\n      this._initializeProperties();\n    }\n\n    /**\n     * Lifecycle callback called when properties are enabled via\n     * `_enableProperties`.\n     *\n     * Users may override this function to implement behavior that is\n     * dependent on the element having its property data initialized, e.g.\n     * from defaults (initialized from `constructor`, `_initializeProperties`),\n     * `attributeChangedCallback`, or values propagated from host e.g. via\n     * bindings.  `super.ready()` must be called to ensure the data system\n     * becomes enabled.\n     *\n     * @return {void}\n     * @public\n     */\n    ready() {\n      this.__dataReady = true;\n      this._flushProperties();\n    }\n\n    /**\n     * Initializes the local storage for property accessors.\n     *\n     * Provided as an override point for performing any setup work prior\n     * to initializing the property accessor system.\n     *\n     * @return {void}\n     * @protected\n     */\n    _initializeProperties() {\n      // Capture instance properties; these will be set into accessors\n      // during first flush. Don't set them here, since we want\n      // these to overwrite defaults/constructor assignments\n      for (let p in this.__dataHasAccessor) {\n        if (this.hasOwnProperty(p)) {\n          this.__dataInstanceProps = this.__dataInstanceProps || {};\n          this.__dataInstanceProps[p] = this[p];\n          delete this[p];\n        }\n      }\n    }\n\n    /**\n     * Called at ready time with bag of instance properties that overwrote\n     * accessors when the element upgraded.\n     *\n     * The default implementation sets these properties back into the\n     * setter at ready time.  This method is provided as an override\n     * point for customizing or providing more efficient initialization.\n     *\n     * @param {Object} props Bag of property values that were overwritten\n     *   when creating property accessors.\n     * @return {void}\n     * @protected\n     */\n    _initializeInstanceProperties(props) {\n      Object.assign(this, props);\n    }\n\n    /**\n     * Updates the local storage for a property (via `_setPendingProperty`)\n     * and enqueues a `_proeprtiesChanged` callback.\n     *\n     * @param {string} property Name of the property\n     * @param {*} value Value to set\n     * @return {void}\n     * @protected\n     */\n    _setProperty(property, value) {\n      if (this._setPendingProperty(property, value)) {\n        this._invalidateProperties();\n      }\n    }\n\n    /**\n     * Returns the value for the given property.\n     * @param {string} property Name of property\n     * @return {*} Value for the given property\n     * @protected\n     */\n    _getProperty(property) {\n      return this.__data[property];\n    }\n\n    /* eslint-disable no-unused-vars */\n    /**\n     * Updates the local storage for a property, records the previous value,\n     * and adds it to the set of \"pending changes\" that will be passed to the\n     * `_propertiesChanged` callback.  This method does not enqueue the\n     * `_propertiesChanged` callback.\n     *\n     * @param {string} property Name of the property\n     * @param {*} value Value to set\n     * @param {boolean=} ext Not used here; affordance for closure\n     * @return {boolean} Returns true if the property changed\n     * @protected\n     */\n    _setPendingProperty(property, value, ext) {\n      let old = this.__data[property];\n      let changed = this._shouldPropertyChange(property, value, old);\n      if (changed) {\n        if (!this.__dataPending) {\n          this.__dataPending = {};\n          this.__dataOld = {};\n        }\n        // Ensure old is captured from the last turn\n        if (this.__dataOld && !(property in this.__dataOld)) {\n          this.__dataOld[property] = old;\n        }\n        this.__data[property] = value;\n        this.__dataPending[property] = value;\n      }\n      return changed;\n    }\n    /* eslint-enable */\n\n    /**\n     * Marks the properties as invalid, and enqueues an async\n     * `_propertiesChanged` callback.\n     *\n     * @return {void}\n     * @protected\n     */\n    _invalidateProperties() {\n      if (!this.__dataInvalid && this.__dataReady) {\n        this.__dataInvalid = true;\n        microtask.run(() => {\n          if (this.__dataInvalid) {\n            this.__dataInvalid = false;\n            this._flushProperties();\n          }\n        });\n      }\n    }\n\n    /**\n     * Call to enable property accessor processing. Before this method is\n     * called accessor values will be set but side effects are\n     * queued. When called, any pending side effects occur immediately.\n     * For elements, generally `connectedCallback` is a normal spot to do so.\n     * It is safe to call this method multiple times as it only turns on\n     * property accessors once.\n     *\n     * @return {void}\n     * @protected\n     */\n    _enableProperties() {\n      if (!this.__dataEnabled) {\n        this.__dataEnabled = true;\n        if (this.__dataInstanceProps) {\n          this._initializeInstanceProperties(this.__dataInstanceProps);\n          this.__dataInstanceProps = null;\n        }\n        this.ready();\n      }\n    }\n\n    /**\n     * Calls the `_propertiesChanged` callback with the current set of\n     * pending changes (and old values recorded when pending changes were\n     * set), and resets the pending set of changes. Generally, this method\n     * should not be called in user code.\n     *\n     * @return {void}\n     * @protected\n     */\n    _flushProperties() {\n      const props = this.__data;\n      const changedProps = this.__dataPending;\n      const old = this.__dataOld;\n      if (this._shouldPropertiesChange(props, changedProps, old)) {\n        this.__dataPending = null;\n        this.__dataOld = null;\n        this._propertiesChanged(props, changedProps, old);\n      }\n    }\n\n    /**\n     * Called in `_flushProperties` to determine if `_propertiesChanged`\n     * should be called. The default implementation returns true if\n     * properties are pending. Override to customize when\n     * `_propertiesChanged` is called.\n     * @param {!Object} currentProps Bag of all current accessor values\n     * @param {!Object} changedProps Bag of properties changed since the last\n     *   call to `_propertiesChanged`\n     * @param {!Object} oldProps Bag of previous values for each property\n     *   in `changedProps`\n     * @return {boolean} true if changedProps is truthy\n     */\n    _shouldPropertiesChange(currentProps, changedProps, oldProps) { // eslint-disable-line no-unused-vars\n      return Boolean(changedProps);\n    }\n\n    /**\n     * Callback called when any properties with accessors created via\n     * `_createPropertyAccessor` have been set.\n     *\n     * @param {!Object} currentProps Bag of all current accessor values\n     * @param {!Object} changedProps Bag of properties changed since the last\n     *   call to `_propertiesChanged`\n     * @param {!Object} oldProps Bag of previous values for each property\n     *   in `changedProps`\n     * @return {void}\n     * @protected\n     */\n    _propertiesChanged(currentProps, changedProps, oldProps) { // eslint-disable-line no-unused-vars\n    }\n\n    /**\n     * Method called to determine whether a property value should be\n     * considered as a change and cause the `_propertiesChanged` callback\n     * to be enqueued.\n     *\n     * The default implementation returns `true` if a strict equality\n     * check fails. The method always returns false for `NaN`.\n     *\n     * Override this method to e.g. provide stricter checking for\n     * Objects/Arrays when using immutable patterns.\n     *\n     * @param {string} property Property name\n     * @param {*} value New property value\n     * @param {*} old Previous property value\n     * @return {boolean} Whether the property should be considered a change\n     *   and enqueue a `_proeprtiesChanged` callback\n     * @protected\n     */\n    _shouldPropertyChange(property, value, old) {\n      return (\n        // Strict equality check\n        (old !== value &&\n          // This ensures (old==NaN, value==NaN) always returns false\n          (old === old || value === value))\n      );\n    }\n\n    /**\n     * Implements native Custom Elements `attributeChangedCallback` to\n     * set an attribute value to a property via `_attributeToProperty`.\n     *\n     * @param {string} name Name of attribute that changed\n     * @param {?string} old Old attribute value\n     * @param {?string} value New attribute value\n     * @param {?string} namespace Attribute namespace.\n     * @return {void}\n     * @suppress {missingProperties} Super may or may not implement the callback\n     */\n    attributeChangedCallback(name, old, value, namespace) {\n      if (old !== value) {\n        this._attributeToProperty(name, value);\n      }\n      if (super.attributeChangedCallback) {\n        super.attributeChangedCallback(name, old, value, namespace);\n      }\n    }\n\n    /**\n     * Deserializes an attribute to its associated property.\n     *\n     * This method calls the `_deserializeValue` method to convert the string to\n     * a typed value.\n     *\n     * @param {string} attribute Name of attribute to deserialize.\n     * @param {?string} value of the attribute.\n     * @param {*=} type type to deserialize to, defaults to the value\n     * returned from `typeForProperty`\n     * @return {void}\n     */\n    _attributeToProperty(attribute, value, type) {\n      if (!this.__serializing) {\n        const map = this.__dataAttributes;\n        const property = map && map[attribute] || attribute;\n        this[property] = this._deserializeValue(value, type ||\n          this.constructor.typeForProperty(property));\n      }\n    }\n\n    /**\n     * Serializes a property to its associated attribute.\n     *\n     * @suppress {invalidCasts} Closure can't figure out `this` is an element.\n     *\n     * @param {string} property Property name to reflect.\n     * @param {string=} attribute Attribute name to reflect to.\n     * @param {*=} value Property value to refect.\n     * @return {void}\n     */\n    _propertyToAttribute(property, attribute, value) {\n      this.__serializing = true;\n      value = (arguments.length < 3) ? this[property] : value;\n      this._valueToNodeAttribute(/** @type {!HTMLElement} */(this), value,\n        attribute || this.constructor.attributeNameForProperty(property));\n      this.__serializing = false;\n    }\n\n    /**\n     * Sets a typed value to an HTML attribute on a node.\n     *\n     * This method calls the `_serializeValue` method to convert the typed\n     * value to a string.  If the `_serializeValue` method returns `undefined`,\n     * the attribute will be removed (this is the default for boolean\n     * type `false`).\n     *\n     * @param {Element} node Element to set attribute to.\n     * @param {*} value Value to serialize.\n     * @param {string} attribute Attribute name to serialize to.\n     * @return {void}\n     */\n    _valueToNodeAttribute(node, value, attribute) {\n      const str = this._serializeValue(value);\n      if (str === undefined) {\n        node.removeAttribute(attribute);\n      } else {\n        node.setAttribute(attribute, str);\n      }\n    }\n\n    /**\n     * Converts a typed JavaScript value to a string.\n     *\n     * This method is called when setting JS property values to\n     * HTML attributes.  Users may override this method to provide\n     * serialization for custom types.\n     *\n     * @param {*} value Property value to serialize.\n     * @return {string | undefined} String serialized from the provided\n     * property  value.\n     */\n    _serializeValue(value) {\n      switch (typeof value) {\n        case 'boolean':\n          return value ? '' : undefined;\n        default:\n          return value != null ? value.toString() : undefined;\n      }\n    }\n\n    /**\n     * Converts a string to a typed JavaScript value.\n     *\n     * This method is called when reading HTML attribute values to\n     * JS properties.  Users may override this method to provide\n     * deserialization for custom `type`s. Types for `Boolean`, `String`,\n     * and `Number` convert attributes to the expected types.\n     *\n     * @param {?string} value Value to deserialize.\n     * @param {*=} type Type to deserialize the string to.\n     * @return {*} Typed value deserialized from the provided string.\n     */\n    _deserializeValue(value, type) {\n      switch (type) {\n        case Boolean:\n          return (value !== null);\n        case Number:\n          return Number(value);\n        default:\n          return value;\n      }\n    }\n\n  }\n\n  return PropertiesChanged;\n});\n","/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\nimport './boot.js';\n\n/**\n * Class representing a static string value which can be used to filter\n * strings by asseting that they have been created via this class. The\n * `value` property returns the string passed to the constructor.\n */\nclass LiteralString {\n  constructor(string) {\n    /** @type {string} */\n    this.value = string.toString();\n  }\n  /**\n   * @return {string} LiteralString string value\n   */\n  toString() {\n    return this.value;\n  }\n}\n\n/**\n * @param {*} value Object to stringify into HTML\n * @return {string} HTML stringified form of `obj`\n */\nfunction literalValue(value) {\n  if (value instanceof LiteralString) {\n    return /** @type {!LiteralString} */(value).value;\n  } else {\n    throw new Error(\n        `non-literal value passed to Polymer's htmlLiteral function: ${value}`\n    );\n  }\n}\n\n/**\n * @param {*} value Object to stringify into HTML\n * @return {string} HTML stringified form of `obj`\n */\nfunction htmlValue(value) {\n  if (value instanceof HTMLTemplateElement) {\n    return /** @type {!HTMLTemplateElement } */(value).innerHTML;\n  } else if (value instanceof LiteralString) {\n    return literalValue(value);\n  } else {\n    throw new Error(\n        `non-template value passed to Polymer's html function: ${value}`);\n  }\n}\n\n/**\n * A template literal tag that creates an HTML <template> element from the\n * contents of the string.\n *\n * This allows you to write a Polymer Template in JavaScript.\n *\n * Templates can be composed by interpolating `HTMLTemplateElement`s in\n * expressions in the JavaScript template literal. The nested template's\n * `innerHTML` is included in the containing template.  The only other\n * values allowed in expressions are those returned from `htmlLiteral`\n * which ensures only literal values from JS source ever reach the HTML, to\n * guard against XSS risks.\n *\n * All other values are disallowed in expressions to help prevent XSS\n * attacks; however, `htmlLiteral` can be used to compose static\n * string values into templates. This is useful to compose strings into\n * places that do not accept html, like the css text of a `style`\n * element.\n *\n * Example:\n *\n *     static get template() {\n *       return html`\n *         <style>:host{ content:\"...\" }</style>\n *         <div class=\"shadowed\">${this.partialTemplate}</div>\n *         ${super.template}\n *       `;\n *     }\n *     static get partialTemplate() { return html`<span>Partial!</span>`; }\n *\n * @param {!ITemplateArray} strings Constant parts of tagged template literal\n * @param {...*} values Variable parts of tagged template literal\n * @return {!HTMLTemplateElement} Constructed HTMLTemplateElement\n */\nexport const html = function html(strings, ...values) {\n  const template = /** @type {!HTMLTemplateElement} */(document.createElement('template'));\n  template.innerHTML = values.reduce((acc, v, idx) =>\n      acc + htmlValue(v) + strings[idx + 1], strings[0]);\n  return template;\n};\n\n/**\n * An html literal tag that can be used with `html` to compose.\n * a literal string.\n *\n * Example:\n *\n *     static get template() {\n *       return html`\n *         <style>\n *           :host { display: block; }\n *           ${this.styleTemplate()}\n *         </style>\n *         <div class=\"shadowed\">${staticValue}</div>\n *         ${super.template}\n *       `;\n *     }\n *     static get styleTemplate() {\n *        return htmlLiteral`.shadowed { background: gray; }`;\n *     }\n *\n * @param {!ITemplateArray} strings Constant parts of tagged template literal\n * @param {...*} values Variable parts of tagged template literal\n * @return {!LiteralString} Constructed literal string\n */\nexport const htmlLiteral = function(strings, ...values) {\n  return new LiteralString(values.reduce((acc, v, idx) =>\n      acc + literalValue(v) + strings[idx + 1], strings[0]));\n};\n","exports.f = Object.getOwnPropertySymbols;\n","var global = require('./_global');\nvar core = require('./_core');\nvar LIBRARY = require('./_library');\nvar wksExt = require('./_wks-ext');\nvar defineProperty = require('./_object-dp').f;\nmodule.exports = function (name) {\n  var $Symbol = core.Symbol || (core.Symbol = LIBRARY ? {} : global.Symbol || {});\n  if (name.charAt(0) != '_' && !(name in $Symbol)) defineProperty($Symbol, name, { value: wksExt.f(name) });\n};\n","exports.f = require('./_wks');\n","var def = require('./_object-dp').f;\nvar has = require('./_has');\nvar TAG = require('./_wks')('toStringTag');\n\nmodule.exports = function (it, tag, stat) {\n  if (it && !has(it = stat ? it : it.prototype, TAG)) def(it, TAG, { configurable: true, value: tag });\n};\n","// 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])\nvar anObject = require('./_an-object');\nvar dPs = require('./_object-dps');\nvar enumBugKeys = require('./_enum-bug-keys');\nvar IE_PROTO = require('./_shared-key')('IE_PROTO');\nvar Empty = function () { /* empty */ };\nvar PROTOTYPE = 'prototype';\n\n// Create object with fake `null` prototype: use iframe Object with cleared prototype\nvar createDict = function () {\n  // Thrash, waste and sodomy: IE GC bug\n  var iframe = require('./_dom-create')('iframe');\n  var i = enumBugKeys.length;\n  var lt = '<';\n  var gt = '>';\n  var iframeDocument;\n  iframe.style.display = 'none';\n  require('./_html').appendChild(iframe);\n  iframe.src = 'javascript:'; // eslint-disable-line no-script-url\n  // createDict = iframe.contentWindow.Object;\n  // html.removeChild(iframe);\n  iframeDocument = iframe.contentWindow.document;\n  iframeDocument.open();\n  iframeDocument.write(lt + 'script' + gt + 'document.F=Object' + lt + '/script' + gt);\n  iframeDocument.close();\n  createDict = iframeDocument.F;\n  while (i--) delete createDict[PROTOTYPE][enumBugKeys[i]];\n  return createDict();\n};\n\nmodule.exports = Object.create || function create(O, Properties) {\n  var result;\n  if (O !== null) {\n    Empty[PROTOTYPE] = anObject(O);\n    result = new Empty();\n    Empty[PROTOTYPE] = null;\n    // add \"__proto__\" for Object.getPrototypeOf polyfill\n    result[IE_PROTO] = O;\n  } else result = createDict();\n  return Properties === undefined ? result : dPs(result, Properties);\n};\n","module.exports = {};\n","// IE 8- don't enum bug keys\nmodule.exports = (\n  'constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf'\n).split(',');\n","// 7.1.4 ToInteger\nvar ceil = Math.ceil;\nvar floor = Math.floor;\nmodule.exports = function (it) {\n  return isNaN(it = +it) ? 0 : (it > 0 ? floor : ceil)(it);\n};\n","var core = require('./_core');\nvar global = require('./_global');\nvar SHARED = '__core-js_shared__';\nvar store = global[SHARED] || (global[SHARED] = {});\n\n(module.exports = function (key, value) {\n  return store[key] || (store[key] = value !== undefined ? value : {});\n})('versions', []).push({\n  version: core.version,\n  mode: require('./_library') ? 'pure' : 'global',\n  copyright: '© 2018 Denis Pushkarev (zloirock.ru)'\n});\n","var shared = require('./_shared')('keys');\nvar uid = require('./_uid');\nmodule.exports = function (key) {\n  return shared[key] || (shared[key] = uid(key));\n};\n","// 7.2.1 RequireObjectCoercible(argument)\nmodule.exports = function (it) {\n  if (it == undefined) throw TypeError(\"Can't call method on  \" + it);\n  return it;\n};\n","// 7.1.13 ToObject(argument)\nvar defined = require('./_defined');\nmodule.exports = function (it) {\n  return Object(defined(it));\n};\n","// 7.1.1 ToPrimitive(input [, PreferredType])\nvar isObject = require('./_is-object');\n// instead of the ES6 spec version, we didn't implement @@toPrimitive case\n// and the second argument - flag - preferred type is a string\nmodule.exports = function (it, S) {\n  if (!isObject(it)) return it;\n  var fn, val;\n  if (S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it))) return val;\n  if (typeof (fn = it.valueOf) == 'function' && !isObject(val = fn.call(it))) return val;\n  if (!S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it))) return val;\n  throw TypeError(\"Can't convert object to primitive value\");\n};\n","/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\nimport { resolveCss } from './resolve-url.js';\n\nconst MODULE_STYLE_LINK_SELECTOR = 'link[rel=import][type~=css]';\nconst INCLUDE_ATTR = 'include';\nconst SHADY_UNSCOPED_ATTR = 'shady-unscoped';\n\nfunction importModule(moduleId) {\n  const /** DomModule */ PolymerDomModule = customElements.get('dom-module');\n  if (!PolymerDomModule) {\n    return null;\n  }\n  return PolymerDomModule.import(moduleId);\n}\n\nfunction styleForImport(importDoc) {\n  // NOTE: polyfill affordance.\n  // under the HTMLImports polyfill, there will be no 'body',\n  // but the import pseudo-doc can be used directly.\n  let container = importDoc.body ? importDoc.body : importDoc;\n  const importCss = resolveCss(container.textContent,\n    importDoc.baseURI);\n  const style = document.createElement('style');\n  style.textContent = importCss;\n  return style;\n}\n\n/** @typedef {{assetpath: string}} */\nlet templateWithAssetPath; // eslint-disable-line no-unused-vars\n\n/**\n * Module with utilities for collection CSS text from `<templates>`, external\n * stylesheets, and `dom-module`s.\n *\n * @summary Module with utilities for collection CSS text from various sources.\n */\n`TODO(modulizer): A namespace named Polymer.StyleGather was\ndeclared here. The surrounding comments should be reviewed,\nand this string can then be deleted`;\n\n/**\n * Returns a list of <style> elements in a space-separated list of `dom-module`s.\n *\n * @function\n * @param {string} moduleIds List of dom-module id's within which to\n * search for css.\n * @return {!Array<!HTMLStyleElement>} Array of contained <style> elements\n * @this {StyleGather}\n */\nexport function stylesFromModules(moduleIds) {\n const modules = moduleIds.trim().split(/\\s+/);\n const styles = [];\n for (let i=0; i < modules.length; i++) {\n   styles.push(...stylesFromModule(modules[i]));\n }\n return styles;\n}\n\n/**\n * Returns a list of <style> elements in a given `dom-module`.\n * Styles in a `dom-module` can come either from `<style>`s within the\n * first `<template>`, or else from one or more\n * `<link rel=\"import\" type=\"css\">` links outside the template.\n *\n * @param {string} moduleId dom-module id to gather styles from\n * @return {!Array<!HTMLStyleElement>} Array of contained styles.\n * @this {StyleGather}\n */\nexport function stylesFromModule(moduleId) {\n  const m = importModule(moduleId);\n\n  if (!m) {\n    console.warn('Could not find style data in module named', moduleId);\n    return [];\n  }\n\n  if (m._styles === undefined) {\n    const styles = [];\n    // module imports: <link rel=\"import\" type=\"css\">\n    styles.push(..._stylesFromModuleImports(m));\n    // include css from the first template in the module\n    const template = m.querySelector('template');\n    if (template) {\n      styles.push(...stylesFromTemplate(template,\n        /** @type {templateWithAssetPath} */(m).assetpath));\n    }\n\n    m._styles = styles;\n  }\n\n  return m._styles;\n}\n\n/**\n * Returns the `<style>` elements within a given template.\n *\n * @param {!HTMLTemplateElement} template Template to gather styles from\n * @param {string} baseURI baseURI for style content\n * @return {!Array<!HTMLStyleElement>} Array of styles\n * @this {StyleGather}\n */\nexport function stylesFromTemplate(template, baseURI) {\n  if (!template._styles) {\n    const styles = [];\n    // if element is a template, get content from its .content\n    const e$ = template.content.querySelectorAll('style');\n    for (let i=0; i < e$.length; i++) {\n      let e = e$[i];\n      // support style sharing by allowing styles to \"include\"\n      // other dom-modules that contain styling\n      let include = e.getAttribute(INCLUDE_ATTR);\n      if (include) {\n        styles.push(...stylesFromModules(include).filter(function(item, index, self) {\n          return self.indexOf(item) === index;\n        }));\n      }\n      if (baseURI) {\n        e.textContent = resolveCss(e.textContent, baseURI);\n      }\n      styles.push(e);\n    }\n    template._styles = styles;\n  }\n  return template._styles;\n}\n\n/**\n * Returns a list of <style> elements  from stylesheets loaded via `<link rel=\"import\" type=\"css\">` links within the specified `dom-module`.\n *\n * @param {string} moduleId Id of `dom-module` to gather CSS from\n * @return {!Array<!HTMLStyleElement>} Array of contained styles.\n * @this {StyleGather}\n */\nexport function stylesFromModuleImports(moduleId) {\n let m = importModule(moduleId);\n return m ? _stylesFromModuleImports(m) : [];\n}\n\n/**\n * @this {StyleGather}\n * @param {!HTMLElement} module dom-module element that could contain `<link rel=\"import\" type=\"css\">` styles\n * @return {!Array<!HTMLStyleElement>} Array of contained styles\n */\nfunction _stylesFromModuleImports(module) {\n  const styles = [];\n  const p$ = module.querySelectorAll(MODULE_STYLE_LINK_SELECTOR);\n  for (let i=0; i < p$.length; i++) {\n    let p = p$[i];\n    if (p.import) {\n      const importDoc = p.import;\n      const unscoped = p.hasAttribute(SHADY_UNSCOPED_ATTR);\n      if (unscoped && !importDoc._unscopedStyle) {\n        const style = styleForImport(importDoc);\n        style.setAttribute(SHADY_UNSCOPED_ATTR, '');\n        importDoc._unscopedStyle = style;\n      } else if (!importDoc._style) {\n        importDoc._style = styleForImport(importDoc);\n      }\n      styles.push(unscoped ? importDoc._unscopedStyle : importDoc._style);\n    }\n  }\n  return styles;\n}\n\n/**\n *\n * Returns CSS text of styles in a space-separated list of `dom-module`s.\n * Note: This method is deprecated, use `stylesFromModules` instead.\n *\n * @deprecated\n * @param {string} moduleIds List of dom-module id's within which to\n * search for css.\n * @return {string} Concatenated CSS content from specified `dom-module`s\n * @this {StyleGather}\n */\nexport function cssFromModules(moduleIds) {\n let modules = moduleIds.trim().split(/\\s+/);\n let cssText = '';\n for (let i=0; i < modules.length; i++) {\n   cssText += cssFromModule(modules[i]);\n }\n return cssText;\n}\n\n/**\n * Returns CSS text of styles in a given `dom-module`.  CSS in a `dom-module`\n * can come either from `<style>`s within the first `<template>`, or else\n * from one or more `<link rel=\"import\" type=\"css\">` links outside the\n * template.\n *\n * Any `<styles>` processed are removed from their original location.\n * Note: This method is deprecated, use `styleFromModule` instead.\n *\n * @deprecated\n * @param {string} moduleId dom-module id to gather styles from\n * @return {string} Concatenated CSS content from specified `dom-module`\n * @this {StyleGather}\n */\nexport function cssFromModule(moduleId) {\n  let m = importModule(moduleId);\n  if (m && m._cssText === undefined) {\n    // module imports: <link rel=\"import\" type=\"css\">\n    let cssText = _cssFromModuleImports(m);\n    // include css from the first template in the module\n    let t = m.querySelector('template');\n    if (t) {\n      cssText += cssFromTemplate(t,\n        /** @type {templateWithAssetPath} */(m).assetpath);\n    }\n    m._cssText = cssText || null;\n  }\n  if (!m) {\n    console.warn('Could not find style data in module named', moduleId);\n  }\n  return m && m._cssText || '';\n}\n\n/**\n * Returns CSS text of `<styles>` within a given template.\n *\n * Any `<styles>` processed are removed from their original location.\n * Note: This method is deprecated, use `styleFromTemplate` instead.\n *\n * @deprecated\n * @param {!HTMLTemplateElement} template Template to gather styles from\n * @param {string} baseURI Base URI to resolve the URL against\n * @return {string} Concatenated CSS content from specified template\n * @this {StyleGather}\n */\nexport function cssFromTemplate(template, baseURI) {\n  let cssText = '';\n  const e$ = stylesFromTemplate(template, baseURI);\n  // if element is a template, get content from its .content\n  for (let i=0; i < e$.length; i++) {\n    let e = e$[i];\n    if (e.parentNode) {\n      e.parentNode.removeChild(e);\n    }\n    cssText += e.textContent;\n  }\n  return cssText;\n}\n\n/**\n * Returns CSS text from stylesheets loaded via `<link rel=\"import\" type=\"css\">`\n * links within the specified `dom-module`.\n *\n * Note: This method is deprecated, use `stylesFromModuleImports` instead.\n *\n * @deprecated\n *\n * @param {string} moduleId Id of `dom-module` to gather CSS from\n * @return {string} Concatenated CSS content from links in specified `dom-module`\n * @this {StyleGather}\n */\nexport function cssFromModuleImports(moduleId) {\n  let m = importModule(moduleId);\n  return m ? _cssFromModuleImports(m) : '';\n}\n\n/**\n * @deprecated\n * @this {StyleGather}\n * @param {!HTMLElement} module dom-module element that could contain `<link rel=\"import\" type=\"css\">` styles\n * @return {string} Concatenated CSS content from links in the dom-module\n */\nfunction _cssFromModuleImports(module) {\n let cssText = '';\n let styles = _stylesFromModuleImports(module);\n for (let i=0; i < styles.length; i++) {\n   cssText += styles[i].textContent;\n }\n return cssText;\n}\n","/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\nimport '../utils/boot.js';\n\nimport { resolveUrl, pathFromUrl } from '../utils/resolve-url.js';\n\nlet modules = {};\nlet lcModules = {};\nfunction findModule(id) {\n  return modules[id] || lcModules[id.toLowerCase()];\n}\n\nfunction styleOutsideTemplateCheck(inst) {\n  if (inst.querySelector('style')) {\n    console.warn('dom-module %s has style outside template', inst.id);\n  }\n}\n\n/**\n * The `dom-module` element registers the dom it contains to the name given\n * by the module's id attribute. It provides a unified database of dom\n * accessible via its static `import` API.\n *\n * A key use case of `dom-module` is for providing custom element `<template>`s\n * via HTML imports that are parsed by the native HTML parser, that can be\n * relocated during a bundling pass and still looked up by `id`.\n *\n * Example:\n *\n *     <dom-module id=\"foo\">\n *       <img src=\"stuff.png\">\n *     </dom-module>\n *\n * Then in code in some other location that cannot access the dom-module above\n *\n *     let img = customElements.get('dom-module').import('foo', 'img');\n *\n * @customElement\n * @extends HTMLElement\n * @summary Custom element that provides a registry of relocatable DOM content\n *   by `id` that is agnostic to bundling.\n * @unrestricted\n */\nexport class DomModule extends HTMLElement {\n\n  static get observedAttributes() { return ['id']; }\n\n  /**\n   * Retrieves the element specified by the css `selector` in the module\n   * registered by `id`. For example, this.import('foo', 'img');\n   * @param {string} id The id of the dom-module in which to search.\n   * @param {string=} selector The css selector by which to find the element.\n   * @return {Element} Returns the element which matches `selector` in the\n   * module registered at the specified `id`.\n   */\n  static import(id, selector) {\n    if (id) {\n      let m = findModule(id);\n      if (m && selector) {\n        return m.querySelector(selector);\n      }\n      return m;\n    }\n    return null;\n  }\n\n  /* eslint-disable no-unused-vars */\n  /**\n   * @param {string} name Name of attribute.\n   * @param {?string} old Old value of attribute.\n   * @param {?string} value Current value of attribute.\n   * @param {?string} namespace Attribute namespace.\n   * @return {void}\n   */\n  attributeChangedCallback(name, old, value, namespace) {\n    if (old !== value) {\n      this.register();\n    }\n  }\n  /* eslint-enable no-unused-args */\n\n  /**\n   * The absolute URL of the original location of this `dom-module`.\n   *\n   * This value will differ from this element's `ownerDocument` in the\n   * following ways:\n   * - Takes into account any `assetpath` attribute added during bundling\n   *   to indicate the original location relative to the bundled location\n   * - Uses the HTMLImports polyfill's `importForElement` API to ensure\n   *   the path is relative to the import document's location since\n   *   `ownerDocument` is not currently polyfilled\n   */\n  get assetpath() {\n    // Don't override existing assetpath.\n    if (!this.__assetpath) {\n      // note: assetpath set via an attribute must be relative to this\n      // element's location; accomodate polyfilled HTMLImports\n      const owner = window.HTMLImports && HTMLImports.importForElement ?\n        HTMLImports.importForElement(this) || document : this.ownerDocument;\n      const url = resolveUrl(\n        this.getAttribute('assetpath') || '', owner.baseURI);\n      this.__assetpath = pathFromUrl(url);\n    }\n    return this.__assetpath;\n  }\n\n  /**\n   * Registers the dom-module at a given id. This method should only be called\n   * when a dom-module is imperatively created. For\n   * example, `document.createElement('dom-module').register('foo')`.\n   * @param {string=} id The id at which to register the dom-module.\n   * @return {void}\n   */\n  register(id) {\n    id = id || this.id;\n    if (id) {\n      this.id = id;\n      // store id separate from lowercased id so that\n      // in all cases mixedCase id will stored distinctly\n      // and lowercase version is a fallback\n      modules[id] = this;\n      lcModules[id.toLowerCase()] = this;\n      styleOutsideTemplateCheck(this);\n    }\n  }\n}\n\nDomModule.prototype['modules'] = modules;\n\ncustomElements.define('dom-module', DomModule);\n","/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\nimport '../utils/boot.js';\n\nimport { dedupingMixin } from '../utils/mixin.js';\nimport { PropertiesChanged } from './properties-changed.js';\n\n/**\n * Creates a copy of `props` with each property normalized such that\n * upgraded it is an object with at least a type property { type: Type}.\n *\n * @param {Object} props Properties to normalize\n * @return {Object} Copy of input `props` with normalized properties that\n * are in the form {type: Type}\n * @private\n */\nfunction normalizeProperties(props) {\n  const output = {};\n  for (let p in props) {\n    const o = props[p];\n    output[p] = (typeof o === 'function') ? {type: o} : o;\n  }\n  return output;\n}\n\n/**\n * Mixin that provides a minimal starting point to using the PropertiesChanged\n * mixin by providing a mechanism to declare properties in a static\n * getter (e.g. static get properties() { return { foo: String } }). Changes\n * are reported via the `_propertiesChanged` method.\n *\n * This mixin provides no specific support for rendering. Users are expected\n * to create a ShadowRoot and put content into it and update it in whatever\n * way makes sense. This can be done in reaction to properties changing by\n * implementing `_propertiesChanged`.\n *\n * @mixinFunction\n * @polymer\n * @appliesMixin PropertiesChanged\n * @summary Mixin that provides a minimal starting point for using\n * the PropertiesChanged mixin by providing a declarative `properties` object.\n */\nexport const PropertiesMixin = dedupingMixin(superClass => {\n\n /**\n  * @constructor\n  * @extends {superClass}\n  * @implements {Polymer_PropertiesChanged}\n  */\n const base = PropertiesChanged(superClass);\n\n /**\n  * Returns the super class constructor for the given class, if it is an\n  * instance of the PropertiesMixin.\n  *\n  * @param {!PropertiesMixinConstructor} constructor PropertiesMixin constructor\n  * @return {PropertiesMixinConstructor} Super class constructor\n  */\n function superPropertiesClass(constructor) {\n   const superCtor = Object.getPrototypeOf(constructor);\n\n   // Note, the `PropertiesMixin` class below only refers to the class\n   // generated by this call to the mixin; the instanceof test only works\n   // because the mixin is deduped and guaranteed only to apply once, hence\n   // all constructors in a proto chain will see the same `PropertiesMixin`\n   return (superCtor.prototype instanceof PropertiesMixin) ?\n     /** @type {PropertiesMixinConstructor} */ (superCtor) : null;\n }\n\n /**\n  * Returns a memoized version of the `properties` object for the\n  * given class. Properties not in object format are converted to at\n  * least {type}.\n  *\n  * @param {PropertiesMixinConstructor} constructor PropertiesMixin constructor\n  * @return {Object} Memoized properties object\n  */\n function ownProperties(constructor) {\n   if (!constructor.hasOwnProperty(JSCompiler_renameProperty('__ownProperties', constructor))) {\n     let props = null;\n\n     if (constructor.hasOwnProperty(JSCompiler_renameProperty('properties', constructor)) && constructor.properties) {\n       props = normalizeProperties(constructor.properties);\n     }\n\n     constructor.__ownProperties = props;\n   }\n   return constructor.__ownProperties;\n }\n\n /**\n  * @polymer\n  * @mixinClass\n  * @extends {base}\n  * @implements {Polymer_PropertiesMixin}\n  * @unrestricted\n  */\n class PropertiesMixin extends base {\n\n   /**\n    * Implements standard custom elements getter to observes the attributes\n    * listed in `properties`.\n    * @suppress {missingProperties} Interfaces in closure do not inherit statics, but classes do\n    */\n   static get observedAttributes() {\n     const props = this._properties;\n     return props ? Object.keys(props).map(p => this.attributeNameForProperty(p)) : [];\n   }\n\n   /**\n    * Finalizes an element definition, including ensuring any super classes\n    * are also finalized. This includes ensuring property\n    * accessors exist on the element prototype. This method calls\n    * `_finalizeClass` to finalize each constructor in the prototype chain.\n    * @return {void}\n    */\n   static finalize() {\n     if (!this.hasOwnProperty(JSCompiler_renameProperty('__finalized', this))) {\n       const superCtor = superPropertiesClass(/** @type {PropertiesMixinConstructor} */(this));\n       if (superCtor) {\n         superCtor.finalize();\n       }\n       this.__finalized = true;\n       this._finalizeClass();\n     }\n   }\n\n   /**\n    * Finalize an element class. This includes ensuring property\n    * accessors exist on the element prototype. This method is called by\n    * `finalize` and finalizes the class constructor.\n    *\n    * @protected\n    */\n   static _finalizeClass() {\n     const props = ownProperties(/** @type {PropertiesMixinConstructor} */(this));\n     if (props) {\n       this.createProperties(props);\n     }\n   }\n\n   /**\n    * Returns a memoized version of all properties, including those inherited\n    * from super classes. Properties not in object format are converted to\n    * at least {type}.\n    *\n    * @return {Object} Object containing properties for this class\n    * @protected\n    */\n   static get _properties() {\n     if (!this.hasOwnProperty(\n       JSCompiler_renameProperty('__properties', this))) {\n       const superCtor = superPropertiesClass(/** @type {PropertiesMixinConstructor} */(this));\n       this.__properties = Object.assign({},\n         superCtor && superCtor._properties,\n         ownProperties(/** @type {PropertiesMixinConstructor} */(this)));\n     }\n     return this.__properties;\n   }\n\n   /**\n    * Overrides `PropertiesChanged` method to return type specified in the\n    * static `properties` object for the given property.\n    * @param {string} name Name of property\n    * @return {*} Type to which to deserialize attribute\n    *\n    * @protected\n    */\n   static typeForProperty(name) {\n     const info = this._properties[name];\n     return info && info.type;\n   }\n\n   /**\n    * Overrides `PropertiesChanged` method and adds a call to\n    * `finalize` which lazily configures the element's property accessors.\n    * @override\n    * @return {void}\n    */\n   _initializeProperties() {\n     this.constructor.finalize();\n     super._initializeProperties();\n   }\n\n   /**\n    * Called when the element is added to a document.\n    * Calls `_enableProperties` to turn on property system from\n    * `PropertiesChanged`.\n    * @suppress {missingProperties} Super may or may not implement the callback\n    * @return {void}\n    */\n   connectedCallback() {\n     if (super.connectedCallback) {\n       super.connectedCallback();\n     }\n     this._enableProperties();\n   }\n\n   /**\n    * Called when the element is removed from a document\n    * @suppress {missingProperties} Super may or may not implement the callback\n    * @return {void}\n    */\n   disconnectedCallback() {\n     if (super.disconnectedCallback) {\n       super.disconnectedCallback();\n     }\n   }\n\n }\n\n return PropertiesMixin;\n\n});\n","/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\nimport '../utils/boot.js';\n\nimport { rootPath as rootPath$0 } from '../utils/settings.js';\nimport { dedupingMixin } from '../utils/mixin.js';\nimport { stylesFromTemplate, stylesFromModuleImports } from '../utils/style-gather.js';\nimport { pathFromUrl, resolveCss, resolveUrl as resolveUrl$0 } from '../utils/resolve-url.js';\nimport { DomModule } from '../elements/dom-module.js';\nimport { PropertyEffects } from './property-effects.js';\nimport { PropertiesMixin } from './properties-mixin.js';\n\n/**\n * Element class mixin that provides the core API for Polymer's meta-programming\n * features including template stamping, data-binding, attribute deserialization,\n * and property change observation.\n *\n * Subclassers may provide the following static getters to return metadata\n * used to configure Polymer's features for the class:\n *\n * - `static get is()`: When the template is provided via a `dom-module`,\n *   users should return the `dom-module` id from a static `is` getter.  If\n *   no template is needed or the template is provided directly via the\n *   `template` getter, there is no need to define `is` for the element.\n *\n * - `static get template()`: Users may provide the template directly (as\n *   opposed to via `dom-module`) by implementing a static `template` getter.\n *   The getter may return an `HTMLTemplateElement` or a string, which will\n *   automatically be parsed into a template.\n *\n * - `static get properties()`: Should return an object describing\n *   property-related metadata used by Polymer features (key: property name\n *   value: object containing property metadata). Valid keys in per-property\n *   metadata include:\n *   - `type` (String|Number|Object|Array|...): Used by\n *     `attributeChangedCallback` to determine how string-based attributes\n *     are deserialized to JavaScript property values.\n *   - `notify` (boolean): Causes a change in the property to fire a\n *     non-bubbling event called `<property>-changed`. Elements that have\n *     enabled two-way binding to the property use this event to observe changes.\n *   - `readOnly` (boolean): Creates a getter for the property, but no setter.\n *     To set a read-only property, use the private setter method\n *     `_setProperty(property, value)`.\n *   - `observer` (string): Observer method name that will be called when\n *     the property changes. The arguments of the method are\n *     `(value, previousValue)`.\n *   - `computed` (string): String describing method and dependent properties\n *     for computing the value of this property (e.g. `'computeFoo(bar, zot)'`).\n *     Computed properties are read-only by default and can only be changed\n *     via the return value of the computing method.\n *\n * - `static get observers()`: Array of strings describing multi-property\n *   observer methods and their dependent properties (e.g.\n *   `'observeABC(a, b, c)'`).\n *\n * The base class provides default implementations for the following standard\n * custom element lifecycle callbacks; users may override these, but should\n * call the super method to ensure\n * - `constructor`: Run when the element is created or upgraded\n * - `connectedCallback`: Run each time the element is connected to the\n *   document\n * - `disconnectedCallback`: Run each time the element is disconnected from\n *   the document\n * - `attributeChangedCallback`: Run each time an attribute in\n *   `observedAttributes` is set or removed (note: this element's default\n *   `observedAttributes` implementation will automatically return an array\n *   of dash-cased attributes based on `properties`)\n *\n * @mixinFunction\n * @polymer\n * @appliesMixin PropertyEffects\n * @appliesMixin PropertiesMixin\n * @property rootPath {string} Set to the value of `rootPath`,\n *   which defaults to the main document path\n * @property importPath {string} Set to the value of the class's static\n *   `importPath` property, which defaults to the path of this element's\n *   `dom-module` (when `is` is used), but can be overridden for other\n *   import strategies.\n * @summary Element class mixin that provides the core API for Polymer's\n * meta-programming features.\n */\nexport const ElementMixin = dedupingMixin(base => {\n\n  /**\n   * @constructor\n   * @extends {base}\n   * @implements {Polymer_PropertyEffects}\n   * @implements {Polymer_PropertiesMixin}\n   */\n  const polymerElementBase = PropertiesMixin(PropertyEffects(base));\n\n  /**\n   * Returns a list of properties with default values.\n   * This list is created as an optimization since it is a subset of\n   * the list returned from `_properties`.\n   * This list is used in `_initializeProperties` to set property defaults.\n   *\n   * @param {PolymerElementConstructor} constructor Element class\n   * @return {PolymerElementProperties} Flattened properties for this class\n   *   that have default values\n   * @private\n   */\n  function propertyDefaults(constructor) {\n    if (!constructor.hasOwnProperty(\n      JSCompiler_renameProperty('__propertyDefaults', constructor))) {\n      constructor.__propertyDefaults = null;\n      let props = constructor._properties;\n      for (let p in props) {\n        let info = props[p];\n        if ('value' in info) {\n          constructor.__propertyDefaults = constructor.__propertyDefaults || {};\n          constructor.__propertyDefaults[p] = info;\n        }\n      }\n    }\n    return constructor.__propertyDefaults;\n  }\n\n  /**\n   * Returns a memoized version of the the `observers` array.\n   * @param {PolymerElementConstructor} constructor Element class\n   * @return {Array} Array containing own observers for the given class\n   * @protected\n   */\n  function ownObservers(constructor) {\n    if (!constructor.hasOwnProperty(\n      JSCompiler_renameProperty('__ownObservers', constructor))) {\n        constructor.__ownObservers =\n        constructor.hasOwnProperty(JSCompiler_renameProperty('observers', constructor)) ?\n        /** @type {PolymerElementConstructor} */ (constructor).observers : null;\n    }\n    return constructor.__ownObservers;\n  }\n\n  /**\n   * Creates effects for a property.\n   *\n   * Note, once a property has been set to\n   * `readOnly`, `computed`, `reflectToAttribute`, or `notify`\n   * these values may not be changed. For example, a subclass cannot\n   * alter these settings. However, additional `observers` may be added\n   * by subclasses.\n   *\n   * The info object should may contain property metadata as follows:\n   *\n   * * `type`: {function} type to which an attribute matching the property\n   * is deserialized. Note the property is camel-cased from a dash-cased\n   * attribute. For example, 'foo-bar' attribute is deserialized to a\n   * property named 'fooBar'.\n   *\n   * * `readOnly`: {boolean} creates a readOnly property and\n   * makes a private setter for the private of the form '_setFoo' for a\n   * property 'foo',\n   *\n   * * `computed`: {string} creates a computed property. A computed property\n   * also automatically is set to `readOnly: true`. The value is calculated\n   * by running a method and arguments parsed from the given string. For\n   * example 'compute(foo)' will compute a given property when the\n   * 'foo' property changes by executing the 'compute' method. This method\n   * must return the computed value.\n   *\n   * * `reflectToAttribute`: {boolean} If true, the property value is reflected\n   * to an attribute of the same name. Note, the attribute is dash-cased\n   * so a property named 'fooBar' is reflected as 'foo-bar'.\n   *\n   * * `notify`: {boolean} sends a non-bubbling notification event when\n   * the property changes. For example, a property named 'foo' sends an\n   * event named 'foo-changed' with `event.detail` set to the value of\n   * the property.\n   *\n   * * observer: {string} name of a method that runs when the property\n   * changes. The arguments of the method are (value, previousValue).\n   *\n   * Note: Users may want control over modifying property\n   * effects via subclassing. For example, a user might want to make a\n   * reflectToAttribute property not do so in a subclass. We've chosen to\n   * disable this because it leads to additional complication.\n   * For example, a readOnly effect generates a special setter. If a subclass\n   * disables the effect, the setter would fail unexpectedly.\n   * Based on feedback, we may want to try to make effects more malleable\n   * and/or provide an advanced api for manipulating them.\n   * Also consider adding warnings when an effect cannot be changed.\n   *\n   * @param {!PolymerElement} proto Element class prototype to add accessors\n   *   and effects to\n   * @param {string} name Name of the property.\n   * @param {Object} info Info object from which to create property effects.\n   * Supported keys:\n   * @param {Object} allProps Flattened map of all properties defined in this\n   *   element (including inherited properties)\n   * @return {void}\n   * @private\n   */\n  function createPropertyFromConfig(proto, name, info, allProps) {\n    // computed forces readOnly...\n    if (info.computed) {\n      info.readOnly = true;\n    }\n    // Note, since all computed properties are readOnly, this prevents\n    // adding additional computed property effects (which leads to a confusing\n    // setup where multiple triggers for setting a property)\n    // While we do have `hasComputedEffect` this is set on the property's\n    // dependencies rather than itself.\n    if (info.computed && !proto._hasReadOnlyEffect(name)) {\n      proto._createComputedProperty(name, info.computed, allProps);\n    }\n    if (info.readOnly && !proto._hasReadOnlyEffect(name)) {\n      proto._createReadOnlyProperty(name, !info.computed);\n    }\n    if (info.reflectToAttribute && !proto._hasReflectEffect(name)) {\n      proto._createReflectedProperty(name);\n    }\n    if (info.notify && !proto._hasNotifyEffect(name)) {\n      proto._createNotifyingProperty(name);\n    }\n    // always add observer\n    if (info.observer) {\n      proto._createPropertyObserver(name, info.observer, allProps[info.observer]);\n    }\n    // always create the mapping from attribute back to property for deserialization.\n    proto._addPropertyToAttributeMap(name);\n  }\n\n  /**\n   * Process all style elements in the element template. Styles with the\n   * `include` attribute are processed such that any styles in\n   * the associated \"style modules\" are included in the element template.\n   * @param {PolymerElementConstructor} klass Element class\n   * @param {!HTMLTemplateElement} template Template to process\n   * @param {string} is Name of element\n   * @param {string} baseURI Base URI for element\n   * @private\n   */\n  function processElementStyles(klass, template, is, baseURI) {\n    const templateStyles = template.content.querySelectorAll('style');\n    const stylesWithImports = stylesFromTemplate(template);\n    // insert styles from <link rel=\"import\" type=\"css\"> at the top of the template\n    const linkedStyles = stylesFromModuleImports(is);\n    const firstTemplateChild = template.content.firstElementChild;\n    for (let idx = 0; idx < linkedStyles.length; idx++) {\n      let s = linkedStyles[idx];\n      s.textContent = klass._processStyleText(s.textContent, baseURI);\n      template.content.insertBefore(s, firstTemplateChild);\n    }\n    // keep track of the last \"concrete\" style in the template we have encountered\n    let templateStyleIndex = 0;\n    // ensure all gathered styles are actually in this template.\n    for (let i = 0; i < stylesWithImports.length; i++) {\n      let s = stylesWithImports[i];\n      let templateStyle = templateStyles[templateStyleIndex];\n      // if the style is not in this template, it's been \"included\" and\n      // we put a clone of it in the template before the style that included it\n      if (templateStyle !== s) {\n        s = s.cloneNode(true);\n        templateStyle.parentNode.insertBefore(s, templateStyle);\n      } else {\n        templateStyleIndex++;\n      }\n      s.textContent = klass._processStyleText(s.textContent, baseURI);\n    }\n    if (window.ShadyCSS) {\n      window.ShadyCSS.prepareTemplate(template, is);\n    }\n  }\n\n  /**\n   * @polymer\n   * @mixinClass\n   * @unrestricted\n   * @implements {Polymer_ElementMixin}\n   */\n  class PolymerElement extends polymerElementBase {\n\n    /**\n     * Override of PropertiesMixin _finalizeClass to create observers and\n     * find the template.\n     * @return {void}\n     * @protected\n     * @override\n     * @suppress {missingProperties} Interfaces in closure do not inherit statics, but classes do\n     */\n   static _finalizeClass() {\n      super._finalizeClass();\n      if (this.hasOwnProperty(\n        JSCompiler_renameProperty('is', this)) &&  this.is) {\n        register(this.prototype);\n      }\n      const observers = ownObservers(this);\n      if (observers) {\n        this.createObservers(observers, this._properties);\n      }\n      // note: create \"working\" template that is finalized at instance time\n      let template = /** @type {PolymerElementConstructor} */ (this).template;\n      if (template) {\n        if (typeof template === 'string') {\n          console.error('template getter must return HTMLTemplateElement');\n          template = null;\n        } else {\n          template = template.cloneNode(true);\n        }\n      }\n\n      this.prototype._template = template;\n    }\n\n    /**\n     * Override of PropertiesChanged createProperties to create accessors\n     * and property effects for all of the properties.\n     * @return {void}\n     * @protected\n     * @override\n     */\n     static createProperties(props) {\n      for (let p in props) {\n        createPropertyFromConfig(this.prototype, p, props[p], props);\n      }\n    }\n\n    /**\n     * Creates observers for the given `observers` array.\n     * Leverages `PropertyEffects` to create observers.\n     * @param {Object} observers Array of observer descriptors for\n     *   this class\n     * @param {Object} dynamicFns Object containing keys for any properties\n     *   that are functions and should trigger the effect when the function\n     *   reference is changed\n     * @return {void}\n     * @protected\n     */\n    static createObservers(observers, dynamicFns) {\n      const proto = this.prototype;\n      for (let i=0; i < observers.length; i++) {\n        proto._createMethodObserver(observers[i], dynamicFns);\n      }\n    }\n\n    /**\n     * Returns the template that will be stamped into this element's shadow root.\n     *\n     * If a `static get is()` getter is defined, the default implementation\n     * will return the first `<template>` in a `dom-module` whose `id`\n     * matches this element's `is`.\n     *\n     * Users may override this getter to return an arbitrary template\n     * (in which case the `is` getter is unnecessary). The template returned\n     * may be either an `HTMLTemplateElement` or a string that will be\n     * automatically parsed into a template.\n     *\n     * Note that when subclassing, if the super class overrode the default\n     * implementation and the subclass would like to provide an alternate\n     * template via a `dom-module`, it should override this getter and\n     * return `DomModule.import(this.is, 'template')`.\n     *\n     * If a subclass would like to modify the super class template, it should\n     * clone it rather than modify it in place.  If the getter does expensive\n     * work such as cloning/modifying a template, it should memoize the\n     * template for maximum performance:\n     *\n     *   let memoizedTemplate;\n     *   class MySubClass extends MySuperClass {\n     *     static get template() {\n     *       if (!memoizedTemplate) {\n     *         memoizedTemplate = super.template.cloneNode(true);\n     *         let subContent = document.createElement('div');\n     *         subContent.textContent = 'This came from MySubClass';\n     *         memoizedTemplate.content.appendChild(subContent);\n     *       }\n     *       return memoizedTemplate;\n     *     }\n     *   }\n     *\n     * @return {HTMLTemplateElement|string} Template to be stamped\n     */\n    static get template() {\n      if (!this.hasOwnProperty(JSCompiler_renameProperty('_template', this))) {\n        this._template = DomModule && DomModule.import(\n          /** @type {PolymerElementConstructor}*/ (this).is, 'template') ||\n          // note: implemented so a subclass can retrieve the super\n          // template; call the super impl this way so that `this` points\n          // to the superclass.\n          Object.getPrototypeOf(/** @type {PolymerElementConstructor}*/ (this).prototype).constructor.template;\n      }\n      return this._template;\n    }\n\n    /**\n     * Path matching the url from which the element was imported.\n     *\n     * This path is used to resolve url's in template style cssText.\n     * The `importPath` property is also set on element instances and can be\n     * used to create bindings relative to the import path.\n     *\n     * For elements defined in ES modules, users should implement\n     * `static get importMeta() { return import.meta; }`, and the default\n     * implementation of `importPath` will  return `import.meta.url`'s path.\n     * For elements defined in HTML imports, this getter will return the path\n     * to the document containing a `dom-module` element matching this\n     * element's static `is` property.\n     *\n     * Note, this path should contain a trailing `/`.\n     *\n     * @return {string} The import path for this element class\n     * @suppress {missingProperties}\n     */\n    static get importPath() {\n      if (!this.hasOwnProperty(JSCompiler_renameProperty('_importPath', this))) {\n        const meta = this.importMeta;\n        if (meta) {\n          this._importPath = pathFromUrl(meta.url);\n        } else {\n          const module = DomModule && DomModule.import(/** @type {PolymerElementConstructor} */ (this).is);\n          this._importPath = (module && module.assetpath) ||\n            Object.getPrototypeOf(/** @type {PolymerElementConstructor}*/ (this).prototype).constructor.importPath;\n        }\n      }\n      return this._importPath;\n    }\n\n    constructor() {\n      super();\n      /** @type {HTMLTemplateElement} */\n      this._template;\n      /** @type {string} */\n      this._importPath;\n      /** @type {string} */\n      this.rootPath;\n      /** @type {string} */\n      this.importPath;\n      /** @type {StampedTemplate | HTMLElement | ShadowRoot} */\n      this.root;\n      /** @type {!Object<string, !Element>} */\n      this.$;\n    }\n\n    /**\n     * Overrides the default `PropertyAccessors` to ensure class\n     * metaprogramming related to property accessors and effects has\n     * completed (calls `finalize`).\n     *\n     * It also initializes any property defaults provided via `value` in\n     * `properties` metadata.\n     *\n     * @return {void}\n     * @override\n     * @suppress {invalidCasts}\n     */\n    _initializeProperties() {\n      instanceCount++;\n      this.constructor.finalize();\n      // note: finalize template when we have access to `localName` to\n      // avoid dependence on `is` for polyfilling styling.\n      this.constructor._finalizeTemplate(/** @type {!HTMLElement} */(this).localName);\n      super._initializeProperties();\n      // set path defaults\n      this.rootPath = rootPath$0;\n      this.importPath = this.constructor.importPath;\n      // apply property defaults...\n      let p$ = propertyDefaults(this.constructor);\n      if (!p$) {\n        return;\n      }\n      for (let p in p$) {\n        let info = p$[p];\n        // Don't set default value if there is already an own property, which\n        // happens when a `properties` property with default but no effects had\n        // a property set (e.g. bound) by its host before upgrade\n        if (!this.hasOwnProperty(p)) {\n          let value = typeof info.value == 'function' ?\n            info.value.call(this) :\n            info.value;\n          // Set via `_setProperty` if there is an accessor, to enable\n          // initializing readOnly property defaults\n          if (this._hasAccessor(p)) {\n            this._setPendingProperty(p, value, true);\n          } else {\n            this[p] = value;\n          }\n        }\n      }\n    }\n\n    /**\n     * Gather style text for a style element in the template.\n     *\n     * @param {string} cssText Text containing styling to process\n     * @param {string} baseURI Base URI to rebase CSS paths against\n     * @return {string} The processed CSS text\n     * @protected\n     */\n    static _processStyleText(cssText, baseURI) {\n      return resolveCss(cssText, baseURI);\n    }\n\n    /**\n    * Configures an element `proto` to function with a given `template`.\n    * The element name `is` and extends `ext` must be specified for ShadyCSS\n    * style scoping.\n    *\n    * @param {string} is Tag name (or type extension name) for this element\n    * @return {void}\n    * @protected\n    */\n    static _finalizeTemplate(is) {\n      /** @const {HTMLTemplateElement} */\n      const template = this.prototype._template;\n      if (template && !template.__polymerFinalized) {\n        template.__polymerFinalized = true;\n        const importPath = this.importPath;\n        const baseURI = importPath ? resolveUrl$0(importPath) : '';\n        // e.g. support `include=\"module-name\"`, and ShadyCSS\n        processElementStyles(this, template, is, baseURI);\n        this.prototype._bindTemplate(template);\n      }\n    }\n\n    /**\n     * Provides a default implementation of the standard Custom Elements\n     * `connectedCallback`.\n     *\n     * The default implementation enables the property effects system and\n     * flushes any pending properties, and updates shimmed CSS properties\n     * when using the ShadyCSS scoping/custom properties polyfill.\n     *\n     * @suppress {missingProperties, invalidCasts} Super may or may not implement the callback\n     * @return {void}\n     */\n    connectedCallback() {\n      if (window.ShadyCSS && this._template) {\n        window.ShadyCSS.styleElement(/** @type {!HTMLElement} */(this));\n      }\n      super.connectedCallback();\n    }\n\n    /**\n     * Stamps the element template.\n     *\n     * @return {void}\n     * @override\n     */\n    ready() {\n      if (this._template) {\n        this.root = this._stampTemplate(this._template);\n        this.$ = this.root.$;\n      }\n      super.ready();\n    }\n\n    /**\n     * Implements `PropertyEffects`'s `_readyClients` call. Attaches\n     * element dom by calling `_attachDom` with the dom stamped from the\n     * element's template via `_stampTemplate`. Note that this allows\n     * client dom to be attached to the element prior to any observers\n     * running.\n     *\n     * @return {void}\n     * @override\n     */\n    _readyClients() {\n      if (this._template) {\n        this.root = this._attachDom(/** @type {StampedTemplate} */(this.root));\n      }\n      // The super._readyClients here sets the clients initialized flag.\n      // We must wait to do this until after client dom is created/attached\n      // so that this flag can be checked to prevent notifications fired\n      // during this process from being handled before clients are ready.\n      super._readyClients();\n    }\n\n\n    /**\n     * Attaches an element's stamped dom to itself. By default,\n     * this method creates a `shadowRoot` and adds the dom to it.\n     * However, this method may be overridden to allow an element\n     * to put its dom in another location.\n     *\n     * @throws {Error}\n     * @suppress {missingReturn}\n     * @param {StampedTemplate} dom to attach to the element.\n     * @return {ShadowRoot} node to which the dom has been attached.\n     */\n    _attachDom(dom) {\n      if (this.attachShadow) {\n        if (dom) {\n          if (!this.shadowRoot) {\n            this.attachShadow({mode: 'open'});\n          }\n          this.shadowRoot.appendChild(dom);\n          return this.shadowRoot;\n        }\n        return null;\n      } else {\n        throw new Error('ShadowDOM not available. ' +\n          // TODO(sorvell): move to compile-time conditional when supported\n        'PolymerElement can create dom as children instead of in ' +\n        'ShadowDOM by setting `this.root = this;\\` before \\`ready\\`.');\n      }\n    }\n\n    /**\n     * When using the ShadyCSS scoping and custom property shim, causes all\n     * shimmed styles in this element (and its subtree) to be updated\n     * based on current custom property values.\n     *\n     * The optional parameter overrides inline custom property styles with an\n     * object of properties where the keys are CSS properties, and the values\n     * are strings.\n     *\n     * Example: `this.updateStyles({'--color': 'blue'})`\n     *\n     * These properties are retained unless a value of `null` is set.\n     *\n     * Note: This function does not support updating CSS mixins.\n     * You can not dynamically change the value of an `@apply`.\n     *\n     * @param {Object=} properties Bag of custom property key/values to\n     *   apply to this element.\n     * @return {void}\n     * @suppress {invalidCasts}\n     */\n    updateStyles(properties) {\n      if (window.ShadyCSS) {\n        window.ShadyCSS.styleSubtree(/** @type {!HTMLElement} */(this), properties);\n      }\n    }\n\n    /**\n     * Rewrites a given URL relative to a base URL. The base URL defaults to\n     * the original location of the document containing the `dom-module` for\n     * this element. This method will return the same URL before and after\n     * bundling.\n     *\n     * Note that this function performs no resolution for URLs that start\n     * with `/` (absolute URLs) or `#` (hash identifiers).  For general purpose\n     * URL resolution, use `window.URL`.\n     *\n     * @param {string} url URL to resolve.\n     * @param {string=} base Optional base URL to resolve against, defaults\n     * to the element's `importPath`\n     * @return {string} Rewritten URL relative to base\n     */\n    resolveUrl(url, base) {\n      if (!base && this.importPath) {\n        base = resolveUrl$0(this.importPath);\n      }\n      return resolveUrl$0(url, base);\n    }\n\n    /**\n     * Overrides `PropertyAccessors` to add map of dynamic functions on\n     * template info, for consumption by `PropertyEffects` template binding\n     * code. This map determines which method templates should have accessors\n     * created for them.\n     *\n     * @override\n     * @suppress {missingProperties} Interfaces in closure do not inherit statics, but classes do\n     */\n    static _parseTemplateContent(template, templateInfo, nodeInfo) {\n      templateInfo.dynamicFns = templateInfo.dynamicFns || this._properties;\n      return super._parseTemplateContent(template, templateInfo, nodeInfo);\n    }\n\n  }\n\n  return PolymerElement;\n});\n\n/**\n * Provides basic tracking of element definitions (registrations) and\n * instance counts.\n *\n * @summary Provides basic tracking of element definitions (registrations) and\n * instance counts.\n */\n`TODO(modulizer): A namespace named Polymer.telemetry was\ndeclared here. The surrounding comments should be reviewed,\nand this string can then be deleted`;\n\n/**\n * Total number of Polymer element instances created.\n * @type {number}\n */\nexport let instanceCount = 0;\n\n/**\n * Array of Polymer element classes that have been finalized.\n * @type {Array<PolymerElement>}\n */\nexport const registrations = [];\n\n/**\n * @param {!PolymerElementConstructor} prototype Element prototype to log\n * @this {this}\n * @private\n */\nfunction _regLog(prototype) {\n  console.log('[' + prototype.is + ']: registered');\n}\n\n/**\n * Registers a class prototype for telemetry purposes.\n * @param {HTMLElement} prototype Element prototype to register\n * @this {this}\n * @protected\n */\nexport function register(prototype) {\n  registrations.push(prototype);\n  undefined && _regLog(prototype);\n}\n\n/**\n * Logs all elements registered with an `is` to the console.\n * @public\n * @this {this}\n */\nexport function dumpRegistrations() {\n  registrations.forEach(_regLog);\n}\n\n/**\n * When using the ShadyCSS scoping and custom property shim, causes all\n * shimmed `styles` (via `custom-style`) in the document (and its subtree)\n * to be updated based on current custom property values.\n *\n * The optional parameter overrides inline custom property styles with an\n * object of properties where the keys are CSS properties, and the values\n * are strings.\n *\n * Example: `updateStyles({'--color': 'blue'})`\n *\n * These properties are retained unless a value of `null` is set.\n *\n * @param {Object=} props Bag of custom property key/values to\n *   apply to the document.\n * @return {void}\n */\nexport const updateStyles = function(props) {\n  if (window.ShadyCSS) {\n    window.ShadyCSS.styleDocument(props);\n  }\n};\n","/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\n\nimport { ElementMixin } from './lib/mixins/element-mixin.js';\nexport { html } from './lib/utils/html-tag.js';\n\n/**\n * Base class that provides the core API for Polymer's meta-programming\n * features including template stamping, data-binding, attribute deserialization,\n * and property change observation.\n *\n * @customElement\n * @polymer\n * @constructor\n * @implements {Polymer_ElementMixin}\n * @extends HTMLElement\n * @appliesMixin ElementMixin\n * @summary Custom element base class that provides the core API for Polymer's\n *   key meta-programming features including template stamping, data-binding,\n *   attribute deserialization, and property change observation\n */\nexport const PolymerElement = ElementMixin(HTMLElement);\n\n","\"use strict\";\n\nexports.__esModule = true;\n\nvar _defineProperty = require(\"../core-js/object/define-property\");\n\nvar _defineProperty2 = _interopRequireDefault(_defineProperty);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nexports.default = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      (0, _defineProperty2.default)(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();","var pIE = require('./_object-pie');\nvar createDesc = require('./_property-desc');\nvar toIObject = require('./_to-iobject');\nvar toPrimitive = require('./_to-primitive');\nvar has = require('./_has');\nvar IE8_DOM_DEFINE = require('./_ie8-dom-define');\nvar gOPD = Object.getOwnPropertyDescriptor;\n\nexports.f = require('./_descriptors') ? gOPD : function getOwnPropertyDescriptor(O, P) {\n  O = toIObject(O);\n  P = toPrimitive(P, true);\n  if (IE8_DOM_DEFINE) try {\n    return gOPD(O, P);\n  } catch (e) { /* empty */ }\n  if (has(O, P)) return createDesc(!pIE.f.call(O, P), O[P]);\n};\n","// 19.1.2.7 / 15.2.3.4 Object.getOwnPropertyNames(O)\nvar $keys = require('./_object-keys-internal');\nvar hiddenKeys = require('./_enum-bug-keys').concat('length', 'prototype');\n\nexports.f = Object.getOwnPropertyNames || function getOwnPropertyNames(O) {\n  return $keys(O, hiddenKeys);\n};\n","module.exports = require('./_hide');\n","'use strict';\nvar LIBRARY = require('./_library');\nvar $export = require('./_export');\nvar redefine = require('./_redefine');\nvar hide = require('./_hide');\nvar Iterators = require('./_iterators');\nvar $iterCreate = require('./_iter-create');\nvar setToStringTag = require('./_set-to-string-tag');\nvar getPrototypeOf = require('./_object-gpo');\nvar ITERATOR = require('./_wks')('iterator');\nvar BUGGY = !([].keys && 'next' in [].keys()); // Safari has buggy iterators w/o `next`\nvar FF_ITERATOR = '@@iterator';\nvar KEYS = 'keys';\nvar VALUES = 'values';\n\nvar returnThis = function () { return this; };\n\nmodule.exports = function (Base, NAME, Constructor, next, DEFAULT, IS_SET, FORCED) {\n  $iterCreate(Constructor, NAME, next);\n  var getMethod = function (kind) {\n    if (!BUGGY && kind in proto) return proto[kind];\n    switch (kind) {\n      case KEYS: return function keys() { return new Constructor(this, kind); };\n      case VALUES: return function values() { return new Constructor(this, kind); };\n    } return function entries() { return new Constructor(this, kind); };\n  };\n  var TAG = NAME + ' Iterator';\n  var DEF_VALUES = DEFAULT == VALUES;\n  var VALUES_BUG = false;\n  var proto = Base.prototype;\n  var $native = proto[ITERATOR] || proto[FF_ITERATOR] || DEFAULT && proto[DEFAULT];\n  var $default = $native || getMethod(DEFAULT);\n  var $entries = DEFAULT ? !DEF_VALUES ? $default : getMethod('entries') : undefined;\n  var $anyNative = NAME == 'Array' ? proto.entries || $native : $native;\n  var methods, key, IteratorPrototype;\n  // Fix native\n  if ($anyNative) {\n    IteratorPrototype = getPrototypeOf($anyNative.call(new Base()));\n    if (IteratorPrototype !== Object.prototype && IteratorPrototype.next) {\n      // Set @@toStringTag to native iterators\n      setToStringTag(IteratorPrototype, TAG, true);\n      // fix for some old engines\n      if (!LIBRARY && typeof IteratorPrototype[ITERATOR] != 'function') hide(IteratorPrototype, ITERATOR, returnThis);\n    }\n  }\n  // fix Array#{values, @@iterator}.name in V8 / FF\n  if (DEF_VALUES && $native && $native.name !== VALUES) {\n    VALUES_BUG = true;\n    $default = function values() { return $native.call(this); };\n  }\n  // Define iterator\n  if ((!LIBRARY || FORCED) && (BUGGY || VALUES_BUG || !proto[ITERATOR])) {\n    hide(proto, ITERATOR, $default);\n  }\n  // Plug for library\n  Iterators[NAME] = $default;\n  Iterators[TAG] = returnThis;\n  if (DEFAULT) {\n    methods = {\n      values: DEF_VALUES ? $default : getMethod(VALUES),\n      keys: IS_SET ? $default : getMethod(KEYS),\n      entries: $entries\n    };\n    if (FORCED) for (key in methods) {\n      if (!(key in proto)) redefine(proto, key, methods[key]);\n    } else $export($export.P + $export.F * (BUGGY || VALUES_BUG), NAME, methods);\n  }\n  return methods;\n};\n","\"use strict\";\n\nexports.__esModule = true;\n\nvar _iterator = require(\"../core-js/symbol/iterator\");\n\nvar _iterator2 = _interopRequireDefault(_iterator);\n\nvar _symbol = require(\"../core-js/symbol\");\n\nvar _symbol2 = _interopRequireDefault(_symbol);\n\nvar _typeof = typeof _symbol2.default === \"function\" && typeof _iterator2.default === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof _symbol2.default === \"function\" && obj.constructor === _symbol2.default && obj !== _symbol2.default.prototype ? \"symbol\" : typeof obj; };\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nexports.default = typeof _symbol2.default === \"function\" && _typeof(_iterator2.default) === \"symbol\" ? function (obj) {\n  return typeof obj === \"undefined\" ? \"undefined\" : _typeof(obj);\n} : function (obj) {\n  return obj && typeof _symbol2.default === \"function\" && obj.constructor === _symbol2.default && obj !== _symbol2.default.prototype ? \"symbol\" : typeof obj === \"undefined\" ? \"undefined\" : _typeof(obj);\n};","\"use strict\";\n\nexports.__esModule = true;\n\nexports.default = function (instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n};","var META = require('./_uid')('meta');\nvar isObject = require('./_is-object');\nvar has = require('./_has');\nvar setDesc = require('./_object-dp').f;\nvar id = 0;\nvar isExtensible = Object.isExtensible || function () {\n  return true;\n};\nvar FREEZE = !require('./_fails')(function () {\n  return isExtensible(Object.preventExtensions({}));\n});\nvar setMeta = function (it) {\n  setDesc(it, META, { value: {\n    i: 'O' + ++id, // object ID\n    w: {}          // weak collections IDs\n  } });\n};\nvar fastKey = function (it, create) {\n  // return primitive with prefix\n  if (!isObject(it)) return typeof it == 'symbol' ? it : (typeof it == 'string' ? 'S' : 'P') + it;\n  if (!has(it, META)) {\n    // can't set metadata to uncaught frozen object\n    if (!isExtensible(it)) return 'F';\n    // not necessary to add metadata\n    if (!create) return 'E';\n    // add missing metadata\n    setMeta(it);\n  // return object ID\n  } return it[META].i;\n};\nvar getWeak = function (it, create) {\n  if (!has(it, META)) {\n    // can't set metadata to uncaught frozen object\n    if (!isExtensible(it)) return true;\n    // not necessary to add metadata\n    if (!create) return false;\n    // add missing metadata\n    setMeta(it);\n  // return hash weak collections IDs\n  } return it[META].w;\n};\n// add metadata on freeze-family methods calling\nvar onFreeze = function (it) {\n  if (FREEZE && meta.NEED && isExtensible(it) && !has(it, META)) setMeta(it);\n  return it;\n};\nvar meta = module.exports = {\n  KEY: META,\n  NEED: false,\n  fastKey: fastKey,\n  getWeak: getWeak,\n  onFreeze: onFreeze\n};\n","var toString = {}.toString;\n\nmodule.exports = function (it) {\n  return toString.call(it).slice(8, -1);\n};\n","// fallback for non-array-like ES3 and non-enumerable old V8 strings\nvar cof = require('./_cof');\n// eslint-disable-next-line no-prototype-builtins\nmodule.exports = Object('z').propertyIsEnumerable(0) ? Object : function (it) {\n  return cof(it) == 'String' ? it.split('') : Object(it);\n};\n","var has = require('./_has');\nvar toIObject = require('./_to-iobject');\nvar arrayIndexOf = require('./_array-includes')(false);\nvar IE_PROTO = require('./_shared-key')('IE_PROTO');\n\nmodule.exports = function (object, names) {\n  var O = toIObject(object);\n  var i = 0;\n  var result = [];\n  var key;\n  for (key in O) if (key != IE_PROTO) has(O, key) && result.push(key);\n  // Don't enum bug & hidden keys\n  while (names.length > i) if (has(O, key = names[i++])) {\n    ~arrayIndexOf(result, key) || result.push(key);\n  }\n  return result;\n};\n","var dP = require('./_object-dp');\nvar anObject = require('./_an-object');\nvar getKeys = require('./_object-keys');\n\nmodule.exports = require('./_descriptors') ? Object.defineProperties : function defineProperties(O, Properties) {\n  anObject(O);\n  var keys = getKeys(Properties);\n  var length = keys.length;\n  var i = 0;\n  var P;\n  while (length > i) dP.f(O, P = keys[i++], Properties[P]);\n  return O;\n};\n","// most Object methods by ES6 should accept primitives\nvar $export = require('./_export');\nvar core = require('./_core');\nvar fails = require('./_fails');\nmodule.exports = function (KEY, exec) {\n  var fn = (core.Object || {})[KEY] || Object[KEY];\n  var exp = {};\n  exp[KEY] = exec(fn);\n  $export($export.S + $export.F * fails(function () { fn(1); }), 'Object', exp);\n};\n","// 19.1.2.9 / 15.2.3.2 Object.getPrototypeOf(O)\nvar has = require('./_has');\nvar toObject = require('./_to-object');\nvar IE_PROTO = require('./_shared-key')('IE_PROTO');\nvar ObjectProto = Object.prototype;\n\nmodule.exports = Object.getPrototypeOf || function (O) {\n  O = toObject(O);\n  if (has(O, IE_PROTO)) return O[IE_PROTO];\n  if (typeof O.constructor == 'function' && O instanceof O.constructor) {\n    return O.constructor.prototype;\n  } return O instanceof Object ? ObjectProto : null;\n};\n","var isObject = require('./_is-object');\nvar document = require('./_global').document;\n// typeof document.createElement is 'object' in old IE\nvar is = isObject(document) && isObject(document.createElement);\nmodule.exports = function (it) {\n  return is ? document.createElement(it) : {};\n};\n","module.exports = !require('./_descriptors') && !require('./_fails')(function () {\n  return Object.defineProperty(require('./_dom-create')('div'), 'a', { get: function () { return 7; } }).a != 7;\n});\n","// optional / simple context binding\nvar aFunction = require('./_a-function');\nmodule.exports = function (fn, that, length) {\n  aFunction(fn);\n  if (that === undefined) return fn;\n  switch (length) {\n    case 1: return function (a) {\n      return fn.call(that, a);\n    };\n    case 2: return function (a, b) {\n      return fn.call(that, a, b);\n    };\n    case 3: return function (a, b, c) {\n      return fn.call(that, a, b, c);\n    };\n  }\n  return function (/* ...args */) {\n    return fn.apply(that, arguments);\n  };\n};\n","/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\nimport './boot.js';\n\nimport { timeOut, microTask } from './async.js';\nimport { Debouncer } from './debounce.js';\nimport { passiveTouchGestures } from './settings.js';\n\n// detect native touch action support\nlet HAS_NATIVE_TA = typeof document.head.style.touchAction === 'string';\nlet GESTURE_KEY = '__polymerGestures';\nlet HANDLED_OBJ = '__polymerGesturesHandled';\nlet TOUCH_ACTION = '__polymerGesturesTouchAction';\n// radius for tap and track\nlet TAP_DISTANCE = 25;\nlet TRACK_DISTANCE = 5;\n// number of last N track positions to keep\nlet TRACK_LENGTH = 2;\n\n// Disabling \"mouse\" handlers for 2500ms is enough\nlet MOUSE_TIMEOUT = 2500;\nlet MOUSE_EVENTS = ['mousedown', 'mousemove', 'mouseup', 'click'];\n// an array of bitmask values for mapping MouseEvent.which to MouseEvent.buttons\nlet MOUSE_WHICH_TO_BUTTONS = [0, 1, 4, 2];\nlet MOUSE_HAS_BUTTONS = (function() {\n  try {\n    return new MouseEvent('test', {buttons: 1}).buttons === 1;\n  } catch (e) {\n    return false;\n  }\n})();\n\n/**\n * @param {string} name Possible mouse event name\n * @return {boolean} true if mouse event, false if not\n */\nfunction isMouseEvent(name) {\n  return MOUSE_EVENTS.indexOf(name) > -1;\n}\n\n/* eslint no-empty: [\"error\", { \"allowEmptyCatch\": true }] */\n// check for passive event listeners\nlet SUPPORTS_PASSIVE = false;\n(function() {\n  try {\n    let opts = Object.defineProperty({}, 'passive', {get() {SUPPORTS_PASSIVE = true;}});\n    window.addEventListener('test', null, opts);\n    window.removeEventListener('test', null, opts);\n  } catch(e) {}\n})();\n\n/**\n * Generate settings for event listeners, dependant on `passiveTouchGestures`\n *\n * @param {string} eventName Event name to determine if `{passive}` option is\n *   needed\n * @return {{passive: boolean} | undefined} Options to use for addEventListener\n *   and removeEventListener\n */\nfunction PASSIVE_TOUCH(eventName) {\n  if (isMouseEvent(eventName) || eventName === 'touchend') {\n    return;\n  }\n  if (HAS_NATIVE_TA && SUPPORTS_PASSIVE && passiveTouchGestures) {\n    return {passive: true};\n  } else {\n    return;\n  }\n}\n\n// Check for touch-only devices\nlet IS_TOUCH_ONLY = navigator.userAgent.match(/iP(?:[oa]d|hone)|Android/);\n\nlet GestureRecognizer = function(){}; // eslint-disable-line no-unused-vars\n/** @type {function(): void} */\nGestureRecognizer.prototype.reset;\n/** @type {function(MouseEvent): void | undefined} */\nGestureRecognizer.prototype.mousedown;\n/** @type {(function(MouseEvent): void | undefined)} */\nGestureRecognizer.prototype.mousemove;\n/** @type {(function(MouseEvent): void | undefined)} */\nGestureRecognizer.prototype.mouseup;\n/** @type {(function(TouchEvent): void | undefined)} */\nGestureRecognizer.prototype.touchstart;\n/** @type {(function(TouchEvent): void | undefined)} */\nGestureRecognizer.prototype.touchmove;\n/** @type {(function(TouchEvent): void | undefined)} */\nGestureRecognizer.prototype.touchend;\n/** @type {(function(MouseEvent): void | undefined)} */\nGestureRecognizer.prototype.click;\n\n// keep track of any labels hit by the mouseCanceller\n/** @type {!Array<!HTMLLabelElement>} */\nconst clickedLabels = [];\n\n/** @type {!Object<boolean>} */\nconst labellable = {\n  'button': true,\n  'input': true,\n  'keygen': true,\n  'meter': true,\n  'output': true,\n  'textarea': true,\n  'progress': true,\n  'select': true\n};\n\n/**\n * @param {HTMLElement} el Element to check labelling status\n * @return {boolean} element can have labels\n */\nfunction canBeLabelled(el) {\n  return labellable[el.localName] || false;\n}\n\n/**\n * @param {HTMLElement} el Element that may be labelled.\n * @return {!Array<!HTMLLabelElement>} Relevant label for `el`\n */\nfunction matchingLabels(el) {\n  let labels = Array.prototype.slice.call(/** @type {HTMLInputElement} */(el).labels || []);\n  // IE doesn't have `labels` and Safari doesn't populate `labels`\n  // if element is in a shadowroot.\n  // In this instance, finding the non-ancestor labels is enough,\n  // as the mouseCancellor code will handle ancstor labels\n  if (!labels.length) {\n    labels = [];\n    let root = el.getRootNode();\n    // if there is an id on `el`, check for all labels with a matching `for` attribute\n    if (el.id) {\n      let matching = root.querySelectorAll(`label[for = ${el.id}]`);\n      for (let i = 0; i < matching.length; i++) {\n        labels.push(/** @type {!HTMLLabelElement} */(matching[i]));\n      }\n    }\n  }\n  return labels;\n}\n\n// touch will make synthetic mouse events\n// `preventDefault` on touchend will cancel them,\n// but this breaks `<input>` focus and link clicks\n// disable mouse handlers for MOUSE_TIMEOUT ms after\n// a touchend to ignore synthetic mouse events\nlet mouseCanceller = function(mouseEvent) {\n  // Check for sourceCapabilities, used to distinguish synthetic events\n  // if mouseEvent did not come from a device that fires touch events,\n  // it was made by a real mouse and should be counted\n  // http://wicg.github.io/InputDeviceCapabilities/#dom-inputdevicecapabilities-firestouchevents\n  let sc = mouseEvent.sourceCapabilities;\n  if (sc && !sc.firesTouchEvents) {\n    return;\n  }\n  // skip synthetic mouse events\n  mouseEvent[HANDLED_OBJ] = {skip: true};\n  // disable \"ghost clicks\"\n  if (mouseEvent.type === 'click') {\n    let clickFromLabel = false;\n    let path = mouseEvent.composedPath && mouseEvent.composedPath();\n    if (path) {\n      for (let i = 0; i < path.length; i++) {\n        if (path[i].nodeType === Node.ELEMENT_NODE) {\n          if (path[i].localName === 'label') {\n            clickedLabels.push(path[i]);\n          } else if (canBeLabelled(path[i])) {\n            let ownerLabels = matchingLabels(path[i]);\n            // check if one of the clicked labels is labelling this element\n            for (let j = 0; j < ownerLabels.length; j++) {\n              clickFromLabel = clickFromLabel || clickedLabels.indexOf(ownerLabels[j]) > -1;\n            }\n          }\n        }\n        if (path[i] === POINTERSTATE.mouse.target) {\n          return;\n        }\n      }\n    }\n    // if one of the clicked labels was labelling the target element,\n    // this is not a ghost click\n    if (clickFromLabel) {\n      return;\n    }\n    mouseEvent.preventDefault();\n    mouseEvent.stopPropagation();\n  }\n};\n\n/**\n * @param {boolean=} setup True to add, false to remove.\n * @return {void}\n */\nfunction setupTeardownMouseCanceller(setup) {\n  let events = IS_TOUCH_ONLY ? ['click'] : MOUSE_EVENTS;\n  for (let i = 0, en; i < events.length; i++) {\n    en = events[i];\n    if (setup) {\n      // reset clickLabels array\n      clickedLabels.length = 0;\n      document.addEventListener(en, mouseCanceller, true);\n    } else {\n      document.removeEventListener(en, mouseCanceller, true);\n    }\n  }\n}\n\nfunction ignoreMouse(e) {\n  if (!POINTERSTATE.mouse.mouseIgnoreJob) {\n    setupTeardownMouseCanceller(true);\n  }\n  let unset = function() {\n    setupTeardownMouseCanceller();\n    POINTERSTATE.mouse.target = null;\n    POINTERSTATE.mouse.mouseIgnoreJob = null;\n  };\n  POINTERSTATE.mouse.target = e.composedPath()[0];\n  POINTERSTATE.mouse.mouseIgnoreJob = Debouncer.debounce(\n        POINTERSTATE.mouse.mouseIgnoreJob\n      , timeOut.after(MOUSE_TIMEOUT)\n      , unset);\n}\n\n/**\n * @param {MouseEvent} ev event to test for left mouse button down\n * @return {boolean} has left mouse button down\n */\nfunction hasLeftMouseButton(ev) {\n  let type = ev.type;\n  // exit early if the event is not a mouse event\n  if (!isMouseEvent(type)) {\n    return false;\n  }\n  // ev.button is not reliable for mousemove (0 is overloaded as both left button and no buttons)\n  // instead we use ev.buttons (bitmask of buttons) or fall back to ev.which (deprecated, 0 for no buttons, 1 for left button)\n  if (type === 'mousemove') {\n    // allow undefined for testing events\n    let buttons = ev.buttons === undefined ? 1 : ev.buttons;\n    if ((ev instanceof window.MouseEvent) && !MOUSE_HAS_BUTTONS) {\n      buttons = MOUSE_WHICH_TO_BUTTONS[ev.which] || 0;\n    }\n    // buttons is a bitmask, check that the left button bit is set (1)\n    return Boolean(buttons & 1);\n  } else {\n    // allow undefined for testing events\n    let button = ev.button === undefined ? 0 : ev.button;\n    // ev.button is 0 in mousedown/mouseup/click for left button activation\n    return button === 0;\n  }\n}\n\nfunction isSyntheticClick(ev) {\n  if (ev.type === 'click') {\n    // ev.detail is 0 for HTMLElement.click in most browsers\n    if (ev.detail === 0) {\n      return true;\n    }\n    // in the worst case, check that the x/y position of the click is within\n    // the bounding box of the target of the event\n    // Thanks IE 10 >:(\n    let t = _findOriginalTarget(ev);\n    // make sure the target of the event is an element so we can use getBoundingClientRect,\n    // if not, just assume it is a synthetic click\n    if (!t.nodeType || /** @type {Element} */(t).nodeType !== Node.ELEMENT_NODE) {\n      return true;\n    }\n    let bcr = /** @type {Element} */(t).getBoundingClientRect();\n    // use page x/y to account for scrolling\n    let x = ev.pageX, y = ev.pageY;\n    // ev is a synthetic click if the position is outside the bounding box of the target\n    return !((x >= bcr.left && x <= bcr.right) && (y >= bcr.top && y <= bcr.bottom));\n  }\n  return false;\n}\n\nlet POINTERSTATE = {\n  mouse: {\n    target: null,\n    mouseIgnoreJob: null\n  },\n  touch: {\n    x: 0,\n    y: 0,\n    id: -1,\n    scrollDecided: false\n  }\n};\n\nfunction firstTouchAction(ev) {\n  let ta = 'auto';\n  let path = ev.composedPath && ev.composedPath();\n  if (path) {\n    for (let i = 0, n; i < path.length; i++) {\n      n = path[i];\n      if (n[TOUCH_ACTION]) {\n        ta = n[TOUCH_ACTION];\n        break;\n      }\n    }\n  }\n  return ta;\n}\n\nfunction trackDocument(stateObj, movefn, upfn) {\n  stateObj.movefn = movefn;\n  stateObj.upfn = upfn;\n  document.addEventListener('mousemove', movefn);\n  document.addEventListener('mouseup', upfn);\n}\n\nfunction untrackDocument(stateObj) {\n  document.removeEventListener('mousemove', stateObj.movefn);\n  document.removeEventListener('mouseup', stateObj.upfn);\n  stateObj.movefn = null;\n  stateObj.upfn = null;\n}\n\n// use a document-wide touchend listener to start the ghost-click prevention mechanism\n// Use passive event listeners, if supported, to not affect scrolling performance\ndocument.addEventListener('touchend', ignoreMouse, SUPPORTS_PASSIVE ? {passive: true} : false);\n\n/**\n * Module for adding listeners to a node for the following normalized\n * cross-platform \"gesture\" events:\n * - `down` - mouse or touch went down\n * - `up` - mouse or touch went up\n * - `tap` - mouse click or finger tap\n * - `track` - mouse drag or touch move\n *\n * @summary Module for adding cross-platform gesture event listeners.\n */\n`TODO(modulizer): A namespace named Polymer.Gestures was\ndeclared here. The surrounding comments should be reviewed,\nand this string can then be deleted`;\n\nexport const gestures = {};\nexport const recognizers = [];\n\n/**\n * Finds the element rendered on the screen at the provided coordinates.\n *\n * Similar to `document.elementFromPoint`, but pierces through\n * shadow roots.\n *\n * @param {number} x Horizontal pixel coordinate\n * @param {number} y Vertical pixel coordinate\n * @return {Element} Returns the deepest shadowRoot inclusive element\n * found at the screen position given.\n */\nexport function deepTargetFind(x, y) {\n  let node = document.elementFromPoint(x, y);\n  let next = node;\n  // this code path is only taken when native ShadowDOM is used\n  // if there is a shadowroot, it may have a node at x/y\n  // if there is not a shadowroot, exit the loop\n  while (next && next.shadowRoot && !window.ShadyDOM) {\n    // if there is a node at x/y in the shadowroot, look deeper\n    let oldNext = next;\n    next = next.shadowRoot.elementFromPoint(x, y);\n    // on Safari, elementFromPoint may return the shadowRoot host\n    if (oldNext === next) {\n      break;\n    }\n    if (next) {\n      node = next;\n    }\n  }\n  return node;\n}\n\n/**\n * a cheaper check than ev.composedPath()[0];\n *\n * @private\n * @param {Event} ev Event.\n * @return {EventTarget} Returns the event target.\n */\nfunction _findOriginalTarget(ev) {\n  // shadowdom\n  if (ev.composedPath) {\n    const targets = /** @type {!Array<!EventTarget>} */(ev.composedPath());\n    // It shouldn't be, but sometimes targets is empty (window on Safari).\n    return targets.length > 0 ? targets[0] : ev.target;\n  }\n  // shadydom\n  return ev.target;\n}\n\n/**\n * @private\n * @param {Event} ev Event.\n * @return {void}\n */\nfunction _handleNative(ev) {\n  let handled;\n  let type = ev.type;\n  let node = ev.currentTarget;\n  let gobj = node[GESTURE_KEY];\n  if (!gobj) {\n    return;\n  }\n  let gs = gobj[type];\n  if (!gs) {\n    return;\n  }\n  if (!ev[HANDLED_OBJ]) {\n    ev[HANDLED_OBJ] = {};\n    if (type.slice(0, 5) === 'touch') {\n      ev = /** @type {TouchEvent} */(ev); // eslint-disable-line no-self-assign\n      let t = ev.changedTouches[0];\n      if (type === 'touchstart') {\n        // only handle the first finger\n        if (ev.touches.length === 1) {\n          POINTERSTATE.touch.id = t.identifier;\n        }\n      }\n      if (POINTERSTATE.touch.id !== t.identifier) {\n        return;\n      }\n      if (!HAS_NATIVE_TA) {\n        if (type === 'touchstart' || type === 'touchmove') {\n          _handleTouchAction(ev);\n        }\n      }\n    }\n  }\n  handled = ev[HANDLED_OBJ];\n  // used to ignore synthetic mouse events\n  if (handled.skip) {\n    return;\n  }\n  // reset recognizer state\n  for (let i = 0, r; i < recognizers.length; i++) {\n    r = recognizers[i];\n    if (gs[r.name] && !handled[r.name]) {\n      if (r.flow && r.flow.start.indexOf(ev.type) > -1 && r.reset) {\n        r.reset();\n      }\n    }\n  }\n  // enforce gesture recognizer order\n  for (let i = 0, r; i < recognizers.length; i++) {\n    r = recognizers[i];\n    if (gs[r.name] && !handled[r.name]) {\n      handled[r.name] = true;\n      r[type](ev);\n    }\n  }\n}\n\n/**\n * @private\n * @param {TouchEvent} ev Event.\n * @return {void}\n */\nfunction _handleTouchAction(ev) {\n  let t = ev.changedTouches[0];\n  let type = ev.type;\n  if (type === 'touchstart') {\n    POINTERSTATE.touch.x = t.clientX;\n    POINTERSTATE.touch.y = t.clientY;\n    POINTERSTATE.touch.scrollDecided = false;\n  } else if (type === 'touchmove') {\n    if (POINTERSTATE.touch.scrollDecided) {\n      return;\n    }\n    POINTERSTATE.touch.scrollDecided = true;\n    let ta = firstTouchAction(ev);\n    let prevent = false;\n    let dx = Math.abs(POINTERSTATE.touch.x - t.clientX);\n    let dy = Math.abs(POINTERSTATE.touch.y - t.clientY);\n    if (!ev.cancelable) {\n      // scrolling is happening\n    } else if (ta === 'none') {\n      prevent = true;\n    } else if (ta === 'pan-x') {\n      prevent = dy > dx;\n    } else if (ta === 'pan-y') {\n      prevent = dx > dy;\n    }\n    if (prevent) {\n      ev.preventDefault();\n    } else {\n      prevent('track');\n    }\n  }\n}\n\n/**\n * Adds an event listener to a node for the given gesture type.\n *\n * @param {!Node} node Node to add listener on\n * @param {string} evType Gesture type: `down`, `up`, `track`, or `tap`\n * @param {!function(!Event):void} handler Event listener function to call\n * @return {boolean} Returns true if a gesture event listener was added.\n * @this {Gestures}\n */\nexport function addListener(node, evType, handler) {\n  if (gestures[evType]) {\n    _add(node, evType, handler);\n    return true;\n  }\n  return false;\n}\n\n/**\n * Removes an event listener from a node for the given gesture type.\n *\n * @param {!Node} node Node to remove listener from\n * @param {string} evType Gesture type: `down`, `up`, `track`, or `tap`\n * @param {!function(!Event):void} handler Event listener function previously passed to\n *  `addListener`.\n * @return {boolean} Returns true if a gesture event listener was removed.\n * @this {Gestures}\n */\nexport function removeListener(node, evType, handler) {\n  if (gestures[evType]) {\n    _remove(node, evType, handler);\n    return true;\n  }\n  return false;\n}\n\n/**\n * automate the event listeners for the native events\n *\n * @private\n * @param {!HTMLElement} node Node on which to add the event.\n * @param {string} evType Event type to add.\n * @param {function(!Event)} handler Event handler function.\n * @return {void}\n * @this {Gestures}\n */\nfunction _add(node, evType, handler) {\n  let recognizer = gestures[evType];\n  let deps = recognizer.deps;\n  let name = recognizer.name;\n  let gobj = node[GESTURE_KEY];\n  if (!gobj) {\n    node[GESTURE_KEY] = gobj = {};\n  }\n  for (let i = 0, dep, gd; i < deps.length; i++) {\n    dep = deps[i];\n    // don't add mouse handlers on iOS because they cause gray selection overlays\n    if (IS_TOUCH_ONLY && isMouseEvent(dep) && dep !== 'click') {\n      continue;\n    }\n    gd = gobj[dep];\n    if (!gd) {\n      gobj[dep] = gd = {_count: 0};\n    }\n    if (gd._count === 0) {\n      node.addEventListener(dep, _handleNative, PASSIVE_TOUCH(dep));\n    }\n    gd[name] = (gd[name] || 0) + 1;\n    gd._count = (gd._count || 0) + 1;\n  }\n  node.addEventListener(evType, handler);\n  if (recognizer.touchAction) {\n    setTouchAction(node, recognizer.touchAction);\n  }\n}\n\n/**\n * automate event listener removal for native events\n *\n * @private\n * @param {!HTMLElement} node Node on which to remove the event.\n * @param {string} evType Event type to remove.\n * @param {function(Event?)} handler Event handler function.\n * @return {void}\n * @this {Gestures}\n */\nfunction _remove(node, evType, handler) {\n  let recognizer = gestures[evType];\n  let deps = recognizer.deps;\n  let name = recognizer.name;\n  let gobj = node[GESTURE_KEY];\n  if (gobj) {\n    for (let i = 0, dep, gd; i < deps.length; i++) {\n      dep = deps[i];\n      gd = gobj[dep];\n      if (gd && gd[name]) {\n        gd[name] = (gd[name] || 1) - 1;\n        gd._count = (gd._count || 1) - 1;\n        if (gd._count === 0) {\n          node.removeEventListener(dep, _handleNative, PASSIVE_TOUCH(dep));\n        }\n      }\n    }\n  }\n  node.removeEventListener(evType, handler);\n}\n\n/**\n * Registers a new gesture event recognizer for adding new custom\n * gesture event types.\n *\n * @param {!GestureRecognizer} recog Gesture recognizer descriptor\n * @return {void}\n * @this {Gestures}\n */\nexport function register(recog) {\n  recognizers.push(recog);\n  for (let i = 0; i < recog.emits.length; i++) {\n    gestures[recog.emits[i]] = recog;\n  }\n}\n\n/**\n * @private\n * @param {string} evName Event name.\n * @return {Object} Returns the gesture for the given event name.\n * @this {Gestures}\n */\nfunction _findRecognizerByEvent(evName) {\n  for (let i = 0, r; i < recognizers.length; i++) {\n    r = recognizers[i];\n    for (let j = 0, n; j < r.emits.length; j++) {\n      n = r.emits[j];\n      if (n === evName) {\n        return r;\n      }\n    }\n  }\n  return null;\n}\n\n/**\n * Sets scrolling direction on node.\n *\n * This value is checked on first move, thus it should be called prior to\n * adding event listeners.\n *\n * @param {!Element} node Node to set touch action setting on\n * @param {string} value Touch action value\n * @return {void}\n */\nexport function setTouchAction(node, value) {\n  if (HAS_NATIVE_TA) {\n    // NOTE: add touchAction async so that events can be added in\n    // custom element constructors. Otherwise we run afoul of custom\n    // elements restriction against settings attributes (style) in the\n    // constructor.\n    microTask.run(() => {\n      node.style.touchAction = value;\n    });\n  }\n  node[TOUCH_ACTION] = value;\n}\n\n/**\n * Dispatches an event on the `target` element of `type` with the given\n * `detail`.\n * @private\n * @param {!EventTarget} target The element on which to fire an event.\n * @param {string} type The type of event to fire.\n * @param {!Object=} detail The detail object to populate on the event.\n * @return {void}\n */\nfunction _fire(target, type, detail) {\n  let ev = new Event(type, { bubbles: true, cancelable: true, composed: true });\n  ev.detail = detail;\n  target.dispatchEvent(ev);\n  // forward `preventDefault` in a clean way\n  if (ev.defaultPrevented) {\n    let preventer = detail.preventer || detail.sourceEvent;\n    if (preventer && preventer.preventDefault) {\n      preventer.preventDefault();\n    }\n  }\n}\n\n/**\n * Prevents the dispatch and default action of the given event name.\n *\n * @param {string} evName Event name.\n * @return {void}\n * @this {Gestures}\n */\nexport function prevent(evName) {\n  let recognizer = _findRecognizerByEvent(evName);\n  if (recognizer.info) {\n    recognizer.info.prevent = true;\n  }\n}\n\n/**\n * Reset the 2500ms timeout on processing mouse input after detecting touch input.\n *\n * Touch inputs create synthesized mouse inputs anywhere from 0 to 2000ms after the touch.\n * This method should only be called during testing with simulated touch inputs.\n * Calling this method in production may cause duplicate taps or other Gestures.\n *\n * @return {void}\n */\nexport function resetMouseCanceller() {\n  if (POINTERSTATE.mouse.mouseIgnoreJob) {\n    POINTERSTATE.mouse.mouseIgnoreJob.flush();\n  }\n}\n\n/* eslint-disable valid-jsdoc */\n\nregister({\n  name: 'downup',\n  deps: ['mousedown', 'touchstart', 'touchend'],\n  flow: {\n    start: ['mousedown', 'touchstart'],\n    end: ['mouseup', 'touchend']\n  },\n  emits: ['down', 'up'],\n\n  info: {\n    movefn: null,\n    upfn: null\n  },\n\n  /**\n   * @this {GestureRecognizer}\n   * @return {void}\n   */\n  reset: function() {\n    untrackDocument(this.info);\n  },\n\n  /**\n   * @this {GestureRecognizer}\n   * @param {MouseEvent} e\n   * @return {void}\n   */\n  mousedown: function(e) {\n    if (!hasLeftMouseButton(e)) {\n      return;\n    }\n    let t = _findOriginalTarget(e);\n    let self = this;\n    let movefn = function movefn(e) {\n      if (!hasLeftMouseButton(e)) {\n        self._fire('up', t, e);\n        untrackDocument(self.info);\n      }\n    };\n    let upfn = function upfn(e) {\n      if (hasLeftMouseButton(e)) {\n        self._fire('up', t, e);\n      }\n      untrackDocument(self.info);\n    };\n    trackDocument(this.info, movefn, upfn);\n    this._fire('down', t, e);\n  },\n  /**\n   * @this {GestureRecognizer}\n   * @param {TouchEvent} e\n   * @return {void}\n   */\n  touchstart: function(e) {\n    this._fire('down', _findOriginalTarget(e), e.changedTouches[0], e);\n  },\n  /**\n   * @this {GestureRecognizer}\n   * @param {TouchEvent} e\n   * @return {void}\n   */\n  touchend: function(e) {\n    this._fire('up', _findOriginalTarget(e), e.changedTouches[0], e);\n  },\n  /**\n   * @param {string} type\n   * @param {!EventTarget} target\n   * @param {Event} event\n   * @param {Function} preventer\n   * @return {void}\n   */\n  _fire: function(type, target, event, preventer) {\n    _fire(target, type, {\n      x: event.clientX,\n      y: event.clientY,\n      sourceEvent: event,\n      preventer: preventer,\n      prevent: function(e) {\n        return prevent(e);\n      }\n    });\n  }\n});\n\nregister({\n  name: 'track',\n  touchAction: 'none',\n  deps: ['mousedown', 'touchstart', 'touchmove', 'touchend'],\n  flow: {\n    start: ['mousedown', 'touchstart'],\n    end: ['mouseup', 'touchend']\n  },\n  emits: ['track'],\n\n  info: {\n    x: 0,\n    y: 0,\n    state: 'start',\n    started: false,\n    moves: [],\n    /** @this {GestureRecognizer} */\n    addMove: function(move) {\n      if (this.moves.length > TRACK_LENGTH) {\n        this.moves.shift();\n      }\n      this.moves.push(move);\n    },\n    movefn: null,\n    upfn: null,\n    prevent: false\n  },\n\n  /**\n   * @this {GestureRecognizer}\n   * @return {void}\n   */\n  reset: function() {\n    this.info.state = 'start';\n    this.info.started = false;\n    this.info.moves = [];\n    this.info.x = 0;\n    this.info.y = 0;\n    this.info.prevent = false;\n    untrackDocument(this.info);\n  },\n\n  /**\n   * @this {GestureRecognizer}\n   * @param {number} x\n   * @param {number} y\n   * @return {boolean}\n   */\n  hasMovedEnough: function(x, y) {\n    if (this.info.prevent) {\n      return false;\n    }\n    if (this.info.started) {\n      return true;\n    }\n    let dx = Math.abs(this.info.x - x);\n    let dy = Math.abs(this.info.y - y);\n    return (dx >= TRACK_DISTANCE || dy >= TRACK_DISTANCE);\n  },\n  /**\n   * @this {GestureRecognizer}\n   * @param {MouseEvent} e\n   * @return {void}\n   */\n  mousedown: function(e) {\n    if (!hasLeftMouseButton(e)) {\n      return;\n    }\n    let t = _findOriginalTarget(e);\n    let self = this;\n    let movefn = function movefn(e) {\n      let x = e.clientX, y = e.clientY;\n      if (self.hasMovedEnough(x, y)) {\n        // first move is 'start', subsequent moves are 'move', mouseup is 'end'\n        self.info.state = self.info.started ? (e.type === 'mouseup' ? 'end' : 'track') : 'start';\n        if (self.info.state === 'start') {\n          // if and only if tracking, always prevent tap\n          prevent('tap');\n        }\n        self.info.addMove({x: x, y: y});\n        if (!hasLeftMouseButton(e)) {\n          // always _fire \"end\"\n          self.info.state = 'end';\n          untrackDocument(self.info);\n        }\n        self._fire(t, e);\n        self.info.started = true;\n      }\n    };\n    let upfn = function upfn(e) {\n      if (self.info.started) {\n        movefn(e);\n      }\n\n      // remove the temporary listeners\n      untrackDocument(self.info);\n    };\n    // add temporary document listeners as mouse retargets\n    trackDocument(this.info, movefn, upfn);\n    this.info.x = e.clientX;\n    this.info.y = e.clientY;\n  },\n  /**\n   * @this {GestureRecognizer}\n   * @param {TouchEvent} e\n   * @return {void}\n   */\n  touchstart: function(e) {\n    let ct = e.changedTouches[0];\n    this.info.x = ct.clientX;\n    this.info.y = ct.clientY;\n  },\n  /**\n   * @this {GestureRecognizer}\n   * @param {TouchEvent} e\n   * @return {void}\n   */\n  touchmove: function(e) {\n    let t = _findOriginalTarget(e);\n    let ct = e.changedTouches[0];\n    let x = ct.clientX, y = ct.clientY;\n    if (this.hasMovedEnough(x, y)) {\n      if (this.info.state === 'start') {\n        // if and only if tracking, always prevent tap\n        prevent('tap');\n      }\n      this.info.addMove({x: x, y: y});\n      this._fire(t, ct);\n      this.info.state = 'track';\n      this.info.started = true;\n    }\n  },\n  /**\n   * @this {GestureRecognizer}\n   * @param {TouchEvent} e\n   * @return {void}\n   */\n  touchend: function(e) {\n    let t = _findOriginalTarget(e);\n    let ct = e.changedTouches[0];\n    // only trackend if track was started and not aborted\n    if (this.info.started) {\n      // reset started state on up\n      this.info.state = 'end';\n      this.info.addMove({x: ct.clientX, y: ct.clientY});\n      this._fire(t, ct, e);\n    }\n  },\n\n  /**\n   * @this {GestureRecognizer}\n   * @param {!EventTarget} target\n   * @param {Touch} touch\n   * @return {void}\n   */\n  _fire: function(target, touch) {\n    let secondlast = this.info.moves[this.info.moves.length - 2];\n    let lastmove = this.info.moves[this.info.moves.length - 1];\n    let dx = lastmove.x - this.info.x;\n    let dy = lastmove.y - this.info.y;\n    let ddx, ddy = 0;\n    if (secondlast) {\n      ddx = lastmove.x - secondlast.x;\n      ddy = lastmove.y - secondlast.y;\n    }\n    _fire(target, 'track', {\n      state: this.info.state,\n      x: touch.clientX,\n      y: touch.clientY,\n      dx: dx,\n      dy: dy,\n      ddx: ddx,\n      ddy: ddy,\n      sourceEvent: touch,\n      hover: function() {\n        return deepTargetFind(touch.clientX, touch.clientY);\n      }\n    });\n  }\n\n});\n\nregister({\n  name: 'tap',\n  deps: ['mousedown', 'click', 'touchstart', 'touchend'],\n  flow: {\n    start: ['mousedown', 'touchstart'],\n    end: ['click', 'touchend']\n  },\n  emits: ['tap'],\n  info: {\n    x: NaN,\n    y: NaN,\n    prevent: false\n  },\n  /**\n   * @this {GestureRecognizer}\n   * @return {void}\n   */\n  reset: function() {\n    this.info.x = NaN;\n    this.info.y = NaN;\n    this.info.prevent = false;\n  },\n  /**\n   * @this {GestureRecognizer}\n   * @param {MouseEvent} e\n   * @return {void}\n   */\n  save: function(e) {\n    this.info.x = e.clientX;\n    this.info.y = e.clientY;\n  },\n  /**\n   * @this {GestureRecognizer}\n   * @param {MouseEvent} e\n   * @return {void}\n   */\n  mousedown: function(e) {\n    if (hasLeftMouseButton(e)) {\n      this.save(e);\n    }\n  },\n  /**\n   * @this {GestureRecognizer}\n   * @param {MouseEvent} e\n   * @return {void}\n   */\n  click: function(e) {\n    if (hasLeftMouseButton(e)) {\n      this.forward(e);\n    }\n  },\n  /**\n   * @this {GestureRecognizer}\n   * @param {TouchEvent} e\n   * @return {void}\n   */\n  touchstart: function(e) {\n    this.save(e.changedTouches[0], e);\n  },\n  /**\n   * @this {GestureRecognizer}\n   * @param {TouchEvent} e\n   * @return {void}\n   */\n  touchend: function(e) {\n    this.forward(e.changedTouches[0], e);\n  },\n  /**\n   * @this {GestureRecognizer}\n   * @param {Event | Touch} e\n   * @param {Event=} preventer\n   * @return {void}\n   */\n  forward: function(e, preventer) {\n    let dx = Math.abs(e.clientX - this.info.x);\n    let dy = Math.abs(e.clientY - this.info.y);\n    // find original target from `preventer` for TouchEvents, or `e` for MouseEvents\n    let t = _findOriginalTarget((preventer || e));\n    if (!t || t.disabled) {\n      return;\n    }\n    // dx,dy can be NaN if `click` has been simulated and there was no `down` for `start`\n    if (isNaN(dx) || isNaN(dy) || (dx <= TAP_DISTANCE && dy <= TAP_DISTANCE) || isSyntheticClick(e)) {\n      // prevent taps from being generated if an event has canceled them\n      if (!this.info.prevent) {\n        _fire(t, 'tap', {\n          x: e.clientX,\n          y: e.clientY,\n          sourceEvent: e,\n          preventer: preventer\n        });\n      }\n    }\n  }\n});\n\n/* eslint-enable valid-jsdoc */\n\n/** @deprecated */\nexport const findOriginalTarget = _findOriginalTarget;\n\n/** @deprecated */\nexport const add = addListener;\n\n/** @deprecated */\nexport const remove = removeListener;\n","/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\nimport '../utils/boot.js';\n\nimport { dedupingMixin } from '../utils/mixin.js';\nimport * as gestures$0 from '../utils/gestures.js';\n\nconst gestures = gestures$0;\n\n/**\n * Element class mixin that provides API for adding Polymer's cross-platform\n * gesture events to nodes.\n *\n * The API is designed to be compatible with override points implemented\n * in `TemplateStamp` such that declarative event listeners in\n * templates will support gesture events when this mixin is applied along with\n * `TemplateStamp`.\n *\n * @mixinFunction\n * @polymer\n * @summary Element class mixin that provides API for adding Polymer's\n *   cross-platform\n * gesture events to nodes\n */\nexport const GestureEventListeners = dedupingMixin(superClass => {\n\n  /**\n   * @polymer\n   * @mixinClass\n   * @implements {Polymer_GestureEventListeners}\n   */\n  class GestureEventListeners extends superClass {\n\n    /**\n     * Add the event listener to the node if it is a gestures event.\n     *\n     * @param {!Node} node Node to add event listener to\n     * @param {string} eventName Name of event\n     * @param {function(!Event):void} handler Listener function to add\n     * @return {void}\n     */\n    _addEventListenerToNode(node, eventName, handler) {\n      if (!gestures.addListener(node, eventName, handler)) {\n        super._addEventListenerToNode(node, eventName, handler);\n      }\n    }\n\n    /**\n     * Remove the event listener to the node if it is a gestures event.\n     *\n     * @param {!Node} node Node to remove event listener from\n     * @param {string} eventName Name of event\n     * @param {function(!Event):void} handler Listener function to remove\n     * @return {void}\n     */\n    _removeEventListenerFromNode(node, eventName, handler) {\n      if (!gestures.removeListener(node, eventName, handler)) {\n        super._removeEventListenerFromNode(node, eventName, handler);\n      }\n    }\n\n  }\n\n  return GestureEventListeners;\n\n});\n","/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\nimport { dedupingMixin } from '../utils/mixin.js';\n\n// Common implementation for mixin & behavior\nfunction mutablePropertyChange(inst, property, value, old, mutableData) {\n  let isObject;\n  if (mutableData) {\n    isObject = (typeof value === 'object' && value !== null);\n    // Pull `old` for Objects from temp cache, but treat `null` as a primitive\n    if (isObject) {\n      old = inst.__dataTemp[property];\n    }\n  }\n  // Strict equality check, but return false for NaN===NaN\n  let shouldChange = (old !== value && (old === old || value === value));\n  // Objects are stored in temporary cache (cleared at end of\n  // turn), which is used for dirty-checking\n  if (isObject && shouldChange) {\n    inst.__dataTemp[property] = value;\n  }\n  return shouldChange;\n}\n\n/**\n * Element class mixin to skip strict dirty-checking for objects and arrays\n * (always consider them to be \"dirty\"), for use on elements utilizing\n * `PropertyEffects`\n *\n * By default, `PropertyEffects` performs strict dirty checking on\n * objects, which means that any deep modifications to an object or array will\n * not be propagated unless \"immutable\" data patterns are used (i.e. all object\n * references from the root to the mutation were changed).\n *\n * Polymer also provides a proprietary data mutation and path notification API\n * (e.g. `notifyPath`, `set`, and array mutation API's) that allow efficient\n * mutation and notification of deep changes in an object graph to all elements\n * bound to the same object graph.\n *\n * In cases where neither immutable patterns nor the data mutation API can be\n * used, applying this mixin will cause Polymer to skip dirty checking for\n * objects and arrays (always consider them to be \"dirty\").  This allows a\n * user to make a deep modification to a bound object graph, and then either\n * simply re-set the object (e.g. `this.items = this.items`) or call `notifyPath`\n * (e.g. `this.notifyPath('items')`) to update the tree.  Note that all\n * elements that wish to be updated based on deep mutations must apply this\n * mixin or otherwise skip strict dirty checking for objects/arrays.\n * Specifically, any elements in the binding tree between the source of a\n * mutation and the consumption of it must apply this mixin or enable the\n * `OptionalMutableData` mixin.\n *\n * In order to make the dirty check strategy configurable, see\n * `OptionalMutableData`.\n *\n * Note, the performance characteristics of propagating large object graphs\n * will be worse as opposed to using strict dirty checking with immutable\n * patterns or Polymer's path notification API.\n *\n * @mixinFunction\n * @polymer\n * @summary Element class mixin to skip strict dirty-checking for objects\n *   and arrays\n */\nexport const MutableData = dedupingMixin(superClass => {\n\n  /**\n   * @polymer\n   * @mixinClass\n   * @implements {Polymer_MutableData}\n   */\n  class MutableData extends superClass {\n    /**\n     * Overrides `PropertyEffects` to provide option for skipping\n     * strict equality checking for Objects and Arrays.\n     *\n     * This method pulls the value to dirty check against from the `__dataTemp`\n     * cache (rather than the normal `__data` cache) for Objects.  Since the temp\n     * cache is cleared at the end of a turn, this implementation allows\n     * side-effects of deep object changes to be processed by re-setting the\n     * same object (using the temp cache as an in-turn backstop to prevent\n     * cycles due to 2-way notification).\n     *\n     * @param {string} property Property name\n     * @param {*} value New property value\n     * @param {*} old Previous property value\n     * @return {boolean} Whether the property should be considered a change\n     * @protected\n     */\n    _shouldPropertyChange(property, value, old) {\n      return mutablePropertyChange(this, property, value, old, true);\n    }\n\n  }\n\n  return MutableData;\n\n});\n\n/**\n * Element class mixin to add the optional ability to skip strict\n * dirty-checking for objects and arrays (always consider them to be\n * \"dirty\") by setting a `mutable-data` attribute on an element instance.\n *\n * By default, `PropertyEffects` performs strict dirty checking on\n * objects, which means that any deep modifications to an object or array will\n * not be propagated unless \"immutable\" data patterns are used (i.e. all object\n * references from the root to the mutation were changed).\n *\n * Polymer also provides a proprietary data mutation and path notification API\n * (e.g. `notifyPath`, `set`, and array mutation API's) that allow efficient\n * mutation and notification of deep changes in an object graph to all elements\n * bound to the same object graph.\n *\n * In cases where neither immutable patterns nor the data mutation API can be\n * used, applying this mixin will allow Polymer to skip dirty checking for\n * objects and arrays (always consider them to be \"dirty\").  This allows a\n * user to make a deep modification to a bound object graph, and then either\n * simply re-set the object (e.g. `this.items = this.items`) or call `notifyPath`\n * (e.g. `this.notifyPath('items')`) to update the tree.  Note that all\n * elements that wish to be updated based on deep mutations must apply this\n * mixin or otherwise skip strict dirty checking for objects/arrays.\n * Specifically, any elements in the binding tree between the source of a\n * mutation and the consumption of it must enable this mixin or apply the\n * `MutableData` mixin.\n *\n * While this mixin adds the ability to forgo Object/Array dirty checking,\n * the `mutableData` flag defaults to false and must be set on the instance.\n *\n * Note, the performance characteristics of propagating large object graphs\n * will be worse by relying on `mutableData: true` as opposed to using\n * strict dirty checking with immutable patterns or Polymer's path notification\n * API.\n *\n * @mixinFunction\n * @polymer\n * @summary Element class mixin to optionally skip strict dirty-checking\n *   for objects and arrays\n */\nexport const OptionalMutableData = dedupingMixin(superClass => {\n\n  /**\n   * @mixinClass\n   * @polymer\n   * @implements {Polymer_OptionalMutableData}\n   */\n  class OptionalMutableData extends superClass {\n\n    static get properties() {\n      return {\n        /**\n         * Instance-level flag for configuring the dirty-checking strategy\n         * for this element.  When true, Objects and Arrays will skip dirty\n         * checking, otherwise strict equality checking will be used.\n         */\n        mutableData: Boolean\n      };\n    }\n\n    /**\n     * Overrides `PropertyEffects` to provide option for skipping\n     * strict equality checking for Objects and Arrays.\n     *\n     * When `this.mutableData` is true on this instance, this method\n     * pulls the value to dirty check against from the `__dataTemp` cache\n     * (rather than the normal `__data` cache) for Objects.  Since the temp\n     * cache is cleared at the end of a turn, this implementation allows\n     * side-effects of deep object changes to be processed by re-setting the\n     * same object (using the temp cache as an in-turn backstop to prevent\n     * cycles due to 2-way notification).\n     *\n     * @param {string} property Property name\n     * @param {*} value New property value\n     * @param {*} old Previous property value\n     * @return {boolean} Whether the property should be considered a change\n     * @protected\n     */\n    _shouldPropertyChange(property, value, old) {\n      return mutablePropertyChange(this, property, value, old, this.mutableData);\n    }\n  }\n\n  return OptionalMutableData;\n\n});\n\n// Export for use by legacy behavior\nMutableData._mutablePropertyChange = mutablePropertyChange;\n","/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\nimport './boot.js';\n\nimport { PropertyEffects } from '../mixins/property-effects.js';\nimport { MutableData } from '../mixins/mutable-data.js';\n\n// Base class for HTMLTemplateElement extension that has property effects\n// machinery for propagating host properties to children. This is an ES5\n// class only because Babel (incorrectly) requires super() in the class\n// constructor even though no `this` is used and it returns an instance.\nlet newInstance = null;\n/**\n * @constructor\n * @extends {HTMLTemplateElement}\n */\nfunction HTMLTemplateElementExtension() { return newInstance; }\nHTMLTemplateElementExtension.prototype = Object.create(HTMLTemplateElement.prototype, {\n  constructor: {\n    value: HTMLTemplateElementExtension,\n    writable: true\n  }\n});\n/**\n * @constructor\n * @implements {Polymer_PropertyEffects}\n * @extends {HTMLTemplateElementExtension}\n */\nconst DataTemplate = PropertyEffects(HTMLTemplateElementExtension);\n/**\n * @constructor\n * @implements {Polymer_MutableData}\n * @extends {DataTemplate}\n */\nconst MutableDataTemplate = MutableData(DataTemplate);\n\n// Applies a DataTemplate subclass to a <template> instance\nfunction upgradeTemplate(template, constructor) {\n  newInstance = template;\n  Object.setPrototypeOf(template, constructor.prototype);\n  new constructor();\n  newInstance = null;\n}\n\n// Base class for TemplateInstance's\n/**\n * @constructor\n * @implements {Polymer_PropertyEffects}\n */\nconst base = PropertyEffects(class {});\n\n/**\n * @polymer\n * @customElement\n * @appliesMixin PropertyEffects\n * @unrestricted\n */\nclass TemplateInstanceBase extends base {\n  constructor(props) {\n    super();\n    this._configureProperties(props);\n    this.root = this._stampTemplate(this.__dataHost);\n    // Save list of stamped children\n    let children = this.children = [];\n    for (let n = this.root.firstChild; n; n=n.nextSibling) {\n      children.push(n);\n      n.__templatizeInstance = this;\n    }\n    if (this.__templatizeOwner &&\n      this.__templatizeOwner.__hideTemplateChildren__) {\n      this._showHideChildren(true);\n    }\n    // Flush props only when props are passed if instance props exist\n    // or when there isn't instance props.\n    let options = this.__templatizeOptions;\n    if ((props && options.instanceProps) || !options.instanceProps) {\n      this._enableProperties();\n    }\n  }\n  /**\n   * Configure the given `props` by calling `_setPendingProperty`. Also\n   * sets any properties stored in `__hostProps`.\n   * @private\n   * @param {Object} props Object of property name-value pairs to set.\n   * @return {void}\n   */\n  _configureProperties(props) {\n    let options = this.__templatizeOptions;\n    if (options.forwardHostProp) {\n      for (let hprop in this.__hostProps) {\n        this._setPendingProperty(hprop, this.__dataHost['_host_' + hprop]);\n      }\n    }\n    // Any instance props passed in the constructor will overwrite host props;\n    // normally this would be a user error but we don't specifically filter them\n    for (let iprop in props) {\n      this._setPendingProperty(iprop, props[iprop]);\n    }\n  }\n  /**\n   * Forwards a host property to this instance.  This method should be\n   * called on instances from the `options.forwardHostProp` callback\n   * to propagate changes of host properties to each instance.\n   *\n   * Note this method enqueues the change, which are flushed as a batch.\n   *\n   * @param {string} prop Property or path name\n   * @param {*} value Value of the property to forward\n   * @return {void}\n   */\n  forwardHostProp(prop, value) {\n    if (this._setPendingPropertyOrPath(prop, value, false, true)) {\n      this.__dataHost._enqueueClient(this);\n    }\n  }\n\n  /**\n   * Override point for adding custom or simulated event handling.\n   *\n   * @param {!Node} node Node to add event listener to\n   * @param {string} eventName Name of event\n   * @param {function(!Event):void} handler Listener function to add\n   * @return {void}\n   */\n  _addEventListenerToNode(node, eventName, handler) {\n    if (this._methodHost && this.__templatizeOptions.parentModel) {\n      // If this instance should be considered a parent model, decorate\n      // events this template instance as `model`\n      this._methodHost._addEventListenerToNode(node, eventName, (e) => {\n        e.model = this;\n        handler(e);\n      });\n    } else {\n      // Otherwise delegate to the template's host (which could be)\n      // another template instance\n      let templateHost = this.__dataHost.__dataHost;\n      if (templateHost) {\n        templateHost._addEventListenerToNode(node, eventName, handler);\n      }\n    }\n  }\n  /**\n   * Shows or hides the template instance top level child elements. For\n   * text nodes, `textContent` is removed while \"hidden\" and replaced when\n   * \"shown.\"\n   * @param {boolean} hide Set to true to hide the children;\n   * set to false to show them.\n   * @return {void}\n   * @protected\n   */\n  _showHideChildren(hide) {\n    let c = this.children;\n    for (let i=0; i<c.length; i++) {\n      let n = c[i];\n      // Ignore non-changes\n      if (Boolean(hide) != Boolean(n.__hideTemplateChildren__)) {\n        if (n.nodeType === Node.TEXT_NODE) {\n          if (hide) {\n            n.__polymerTextContent__ = n.textContent;\n            n.textContent = '';\n          } else {\n            n.textContent = n.__polymerTextContent__;\n          }\n        // remove and replace slot\n        } else if (n.localName === 'slot') {\n          if (hide) {\n            n.__polymerReplaced__ = document.createComment('hidden-slot');\n            n.parentNode.replaceChild(n.__polymerReplaced__, n);\n          } else {\n            const replace = n.__polymerReplaced__;\n            if (replace) {\n              replace.parentNode.replaceChild(n, replace);\n            }\n          }\n        }\n\n        else if (n.style) {\n          if (hide) {\n            n.__polymerDisplay__ = n.style.display;\n            n.style.display = 'none';\n          } else {\n            n.style.display = n.__polymerDisplay__;\n          }\n        }\n      }\n      n.__hideTemplateChildren__ = hide;\n      if (n._showHideChildren) {\n        n._showHideChildren(hide);\n      }\n    }\n  }\n  /**\n   * Overrides default property-effects implementation to intercept\n   * textContent bindings while children are \"hidden\" and cache in\n   * private storage for later retrieval.\n   *\n   * @param {!Node} node The node to set a property on\n   * @param {string} prop The property to set\n   * @param {*} value The value to set\n   * @return {void}\n   * @protected\n   */\n  _setUnmanagedPropertyToNode(node, prop, value) {\n    if (node.__hideTemplateChildren__ &&\n        node.nodeType == Node.TEXT_NODE && prop == 'textContent') {\n      node.__polymerTextContent__ = value;\n    } else {\n      super._setUnmanagedPropertyToNode(node, prop, value);\n    }\n  }\n  /**\n   * Find the parent model of this template instance.  The parent model\n   * is either another templatize instance that had option `parentModel: true`,\n   * or else the host element.\n   *\n   * @return {!Polymer_PropertyEffects} The parent model of this instance\n   */\n  get parentModel() {\n    let model = this.__parentModel;\n    if (!model) {\n      let options;\n      model = this;\n      do {\n        // A template instance's `__dataHost` is a <template>\n        // `model.__dataHost.__dataHost` is the template's host\n        model = model.__dataHost.__dataHost;\n      } while ((options = model.__templatizeOptions) && !options.parentModel);\n      this.__parentModel = model;\n    }\n    return model;\n  }\n\n  /**\n   * Stub of HTMLElement's `dispatchEvent`, so that effects that may\n   * dispatch events safely no-op.\n   *\n   * @param {Event} event Event to dispatch\n   * @return {boolean} Always true.\n   */\n   dispatchEvent(event) { // eslint-disable-line no-unused-vars\n     return true;\n  }\n}\n\n/** @type {!DataTemplate} */\nTemplateInstanceBase.prototype.__dataHost;\n/** @type {!TemplatizeOptions} */\nTemplateInstanceBase.prototype.__templatizeOptions;\n/** @type {!Polymer_PropertyEffects} */\nTemplateInstanceBase.prototype._methodHost;\n/** @type {!Object} */\nTemplateInstanceBase.prototype.__templatizeOwner;\n/** @type {!Object} */\nTemplateInstanceBase.prototype.__hostProps;\n\n/**\n * @constructor\n * @extends {TemplateInstanceBase}\n * @implements {Polymer_MutableData}\n */\nconst MutableTemplateInstanceBase = MutableData(TemplateInstanceBase);\n\nfunction findMethodHost(template) {\n  // Technically this should be the owner of the outermost template.\n  // In shadow dom, this is always getRootNode().host, but we can\n  // approximate this via cooperation with our dataHost always setting\n  // `_methodHost` as long as there were bindings (or id's) on this\n  // instance causing it to get a dataHost.\n  let templateHost = template.__dataHost;\n  return templateHost && templateHost._methodHost || templateHost;\n}\n\n/* eslint-disable valid-jsdoc */\n/**\n * @suppress {missingProperties} class.prototype is not defined for some reason\n */\nfunction createTemplatizerClass(template, templateInfo, options) {\n  // Anonymous class created by the templatize\n  let base = options.mutableData ?\n    MutableTemplateInstanceBase : TemplateInstanceBase;\n  /**\n   * @constructor\n   * @extends {base}\n   * @private\n   */\n  let klass = class extends base { };\n  klass.prototype.__templatizeOptions = options;\n  klass.prototype._bindTemplate(template);\n  addNotifyEffects(klass, template, templateInfo, options);\n  return klass;\n}\n\n/**\n * @suppress {missingProperties} class.prototype is not defined for some reason\n */\nfunction addPropagateEffects(template, templateInfo, options) {\n  let userForwardHostProp = options.forwardHostProp;\n  if (userForwardHostProp) {\n    // Provide data API and property effects on memoized template class\n    let klass = templateInfo.templatizeTemplateClass;\n    if (!klass) {\n      let base = options.mutableData ? MutableDataTemplate : DataTemplate;\n      klass = templateInfo.templatizeTemplateClass =\n        class TemplatizedTemplate extends base {};\n      // Add template - >instances effects\n      // and host <- template effects\n      let hostProps = templateInfo.hostProps;\n      for (let prop in hostProps) {\n        klass.prototype._addPropertyEffect('_host_' + prop,\n          klass.prototype.PROPERTY_EFFECT_TYPES.PROPAGATE,\n          {fn: createForwardHostPropEffect(prop, userForwardHostProp)});\n        klass.prototype._createNotifyingProperty('_host_' + prop);\n      }\n    }\n    upgradeTemplate(template, klass);\n    // Mix any pre-bound data into __data; no need to flush this to\n    // instances since they pull from the template at instance-time\n    if (template.__dataProto) {\n      // Note, generally `__dataProto` could be chained, but it's guaranteed\n      // to not be since this is a vanilla template we just added effects to\n      Object.assign(template.__data, template.__dataProto);\n    }\n    // Clear any pending data for performance\n    template.__dataTemp = {};\n    template.__dataPending = null;\n    template.__dataOld = null;\n    template._enableProperties();\n  }\n}\n/* eslint-enable valid-jsdoc */\n\nfunction createForwardHostPropEffect(hostProp, userForwardHostProp) {\n  return function forwardHostProp(template, prop, props) {\n    userForwardHostProp.call(template.__templatizeOwner,\n      prop.substring('_host_'.length), props[prop]);\n  };\n}\n\nfunction addNotifyEffects(klass, template, templateInfo, options) {\n  let hostProps = templateInfo.hostProps || {};\n  for (let iprop in options.instanceProps) {\n    delete hostProps[iprop];\n    let userNotifyInstanceProp = options.notifyInstanceProp;\n    if (userNotifyInstanceProp) {\n      klass.prototype._addPropertyEffect(iprop,\n        klass.prototype.PROPERTY_EFFECT_TYPES.NOTIFY,\n        {fn: createNotifyInstancePropEffect(iprop, userNotifyInstanceProp)});\n    }\n  }\n  if (options.forwardHostProp && template.__dataHost) {\n    for (let hprop in hostProps) {\n      klass.prototype._addPropertyEffect(hprop,\n        klass.prototype.PROPERTY_EFFECT_TYPES.NOTIFY,\n        {fn: createNotifyHostPropEffect()});\n    }\n  }\n}\n\nfunction createNotifyInstancePropEffect(instProp, userNotifyInstanceProp) {\n  return function notifyInstanceProp(inst, prop, props) {\n    userNotifyInstanceProp.call(inst.__templatizeOwner,\n      inst, prop, props[prop]);\n  };\n}\n\nfunction createNotifyHostPropEffect() {\n  return function notifyHostProp(inst, prop, props) {\n    inst.__dataHost._setPendingPropertyOrPath('_host_' + prop, props[prop], true, true);\n  };\n}\n\n/**\n * Module for preparing and stamping instances of templates that utilize\n * Polymer's data-binding and declarative event listener features.\n *\n * Example:\n *\n *     // Get a template from somewhere, e.g. light DOM\n *     let template = this.querySelector('template');\n *     // Prepare the template\n *     let TemplateClass = Templatize.templatize(template);\n *     // Instance the template with an initial data model\n *     let instance = new TemplateClass({myProp: 'initial'});\n *     // Insert the instance's DOM somewhere, e.g. element's shadow DOM\n *     this.shadowRoot.appendChild(instance.root);\n *     // Changing a property on the instance will propagate to bindings\n *     // in the template\n *     instance.myProp = 'new value';\n *\n * The `options` dictionary passed to `templatize` allows for customizing\n * features of the generated template class, including how outer-scope host\n * properties should be forwarded into template instances, how any instance\n * properties added into the template's scope should be notified out to\n * the host, and whether the instance should be decorated as a \"parent model\"\n * of any event handlers.\n *\n *     // Customize property forwarding and event model decoration\n *     let TemplateClass = Templatize.templatize(template, this, {\n *       parentModel: true,\n *       forwardHostProp(property, value) {...},\n *       instanceProps: {...},\n *       notifyInstanceProp(instance, property, value) {...},\n *     });\n *\n * @summary Module for preparing and stamping instances of templates\n *   utilizing Polymer templating features.\n */\n`TODO(modulizer): A namespace named Polymer.Templatize was\ndeclared here. The surrounding comments should be reviewed,\nand this string can then be deleted`;\n\n/**\n * Returns an anonymous `PropertyEffects` class bound to the\n * `<template>` provided.  Instancing the class will result in the\n * template being stamped into a document fragment stored as the instance's\n * `root` property, after which it can be appended to the DOM.\n *\n * Templates may utilize all Polymer data-binding features as well as\n * declarative event listeners.  Event listeners and inline computing\n * functions in the template will be called on the host of the template.\n *\n * The constructor returned takes a single argument dictionary of initial\n * property values to propagate into template bindings.  Additionally\n * host properties can be forwarded in, and instance properties can be\n * notified out by providing optional callbacks in the `options` dictionary.\n *\n * Valid configuration in `options` are as follows:\n *\n * - `forwardHostProp(property, value)`: Called when a property referenced\n *   in the template changed on the template's host. As this library does\n *   not retain references to templates instanced by the user, it is the\n *   templatize owner's responsibility to forward host property changes into\n *   user-stamped instances.  The `instance.forwardHostProp(property, value)`\n *    method on the generated class should be called to forward host\n *   properties into the template to prevent unnecessary property-changed\n *   notifications. Any properties referenced in the template that are not\n *   defined in `instanceProps` will be notified up to the template's host\n *   automatically.\n * - `instanceProps`: Dictionary of property names that will be added\n *   to the instance by the templatize owner.  These properties shadow any\n *   host properties, and changes within the template to these properties\n *   will result in `notifyInstanceProp` being called.\n * - `mutableData`: When `true`, the generated class will skip strict\n *   dirty-checking for objects and arrays (always consider them to be\n *   \"dirty\").\n * - `notifyInstanceProp(instance, property, value)`: Called when\n *   an instance property changes.  Users may choose to call `notifyPath`\n *   on e.g. the owner to notify the change.\n * - `parentModel`: When `true`, events handled by declarative event listeners\n *   (`on-event=\"handler\"`) will be decorated with a `model` property pointing\n *   to the template instance that stamped it.  It will also be returned\n *   from `instance.parentModel` in cases where template instance nesting\n *   causes an inner model to shadow an outer model.\n *\n * All callbacks are called bound to the `owner`. Any context\n * needed for the callbacks (such as references to `instances` stamped)\n * should be stored on the `owner` such that they can be retrieved via\n * `this`.\n *\n * When `options.forwardHostProp` is declared as an option, any properties\n * referenced in the template will be automatically forwarded from the host of\n * the `<template>` to instances, with the exception of any properties listed in\n * the `options.instanceProps` object.  `instanceProps` are assumed to be\n * managed by the owner of the instances, either passed into the constructor\n * or set after the fact.  Note, any properties passed into the constructor will\n * always be set to the instance (regardless of whether they would normally\n * be forwarded from the host).\n *\n * Note that `templatize()` can be run only once for a given `<template>`.\n * Further calls will result in an error. Also, there is a special\n * behavior if the template was duplicated through a mechanism such as\n * `<dom-repeat>` or `<test-fixture>`. In this case, all calls to\n * `templatize()` return the same class for all duplicates of a template.\n * The class returned from `templatize()` is generated only once using\n * the `options` from the first call. This means that any `options`\n * provided to subsequent calls will be ignored. Therefore, it is very\n * important not to close over any variables inside the callbacks. Also,\n * arrow functions must be avoided because they bind the outer `this`.\n * Inside the callbacks, any contextual information can be accessed\n * through `this`, which points to the `owner`.\n *\n * @param {!HTMLTemplateElement} template Template to templatize\n * @param {Polymer_PropertyEffects=} owner Owner of the template instances;\n *   any optional callbacks will be bound to this owner.\n * @param {Object=} options Options dictionary (see summary for details)\n * @return {function(new:TemplateInstanceBase)} Generated class bound to the template\n *   provided\n * @suppress {invalidCasts}\n */\nexport function templatize(template, owner, options) {\n  options = /** @type {!TemplatizeOptions} */(options || {});\n  if (template.__templatizeOwner) {\n    throw new Error('A <template> can only be templatized once');\n  }\n  template.__templatizeOwner = owner;\n  const ctor = owner ? owner.constructor : TemplateInstanceBase;\n  let templateInfo = ctor._parseTemplate(template);\n  // Get memoized base class for the prototypical template, which\n  // includes property effects for binding template & forwarding\n  let baseClass = templateInfo.templatizeInstanceClass;\n  if (!baseClass) {\n    baseClass = createTemplatizerClass(template, templateInfo, options);\n    templateInfo.templatizeInstanceClass = baseClass;\n  }\n  // Host property forwarding must be installed onto template instance\n  addPropagateEffects(template, templateInfo, options);\n  // Subclass base class and add reference for this specific template\n  /** @private */\n  let klass = class TemplateInstance extends baseClass {};\n  klass.prototype._methodHost = findMethodHost(template);\n  klass.prototype.__dataHost = template;\n  klass.prototype.__templatizeOwner = owner;\n  klass.prototype.__hostProps = templateInfo.hostProps;\n  klass = /** @type {function(new:TemplateInstanceBase)} */(klass); //eslint-disable-line no-self-assign\n  return klass;\n}\n\n/**\n * Returns the template \"model\" associated with a given element, which\n * serves as the binding scope for the template instance the element is\n * contained in. A template model is an instance of\n * `TemplateInstanceBase`, and should be used to manipulate data\n * associated with this template instance.\n *\n * Example:\n *\n *   let model = modelForElement(el);\n *   if (model.index < 10) {\n *     model.set('item.checked', true);\n *   }\n *\n * @param {HTMLTemplateElement} template The model will be returned for\n *   elements stamped from this template\n * @param {Node=} node Node for which to return a template model.\n * @return {TemplateInstanceBase} Template instance representing the\n *   binding scope for the element\n */\nexport function modelForElement(template, node) {\n  let model;\n  while (node) {\n    // An element with a __templatizeInstance marks the top boundary\n    // of a scope; walk up until we find one, and then ensure that\n    // its __dataHost matches `this`, meaning this dom-repeat stamped it\n    if ((model = node.__templatizeInstance)) {\n      // Found an element stamped by another template; keep walking up\n      // from its __dataHost\n      if (model.__dataHost != template) {\n        node = model.__dataHost;\n      } else {\n        return model;\n      }\n    } else {\n      // Still in a template scope, keep going up until\n      // a __templatizeInstance is found\n      node = node.parentNode;\n    }\n  }\n  return null;\n}\n\nexport { TemplateInstanceBase };\n","/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\nimport './boot.js';\n\nlet debouncerQueue = [];\n\n/**\n * Adds a `Debouncer` to a list of globally flushable tasks.\n *\n * @param {!Debouncer} debouncer Debouncer to enqueue\n * @return {void}\n */\nexport const enqueueDebouncer = function(debouncer) {\n  debouncerQueue.push(debouncer);\n};\n\nfunction flushDebouncers() {\n  const didFlush = Boolean(debouncerQueue.length);\n  while (debouncerQueue.length) {\n    try {\n      debouncerQueue.shift().flush();\n    } catch(e) {\n      setTimeout(() => {\n        throw e;\n      });\n    }\n  }\n  return didFlush;\n}\n\n/**\n * Forces several classes of asynchronously queued tasks to flush:\n * - Debouncers added via `enqueueDebouncer`\n * - ShadyDOM distribution\n *\n * @return {void}\n */\nexport const flush = function() {\n  let shadyDOM, debouncers;\n  do {\n    shadyDOM = window.ShadyDOM && ShadyDOM.flush();\n    if (window.ShadyCSS && window.ShadyCSS.ScopingShim) {\n      window.ShadyCSS.ScopingShim.flush();\n    }\n    debouncers = flushDebouncers();\n  } while (shadyDOM || debouncers);\n};\n","/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\nimport { PolymerElement } from '../../polymer-element.js';\n\nimport { templatize } from '../utils/templatize.js';\nimport { Debouncer } from '../utils/debounce.js';\nimport { enqueueDebouncer, flush } from '../utils/flush.js';\nimport { microTask } from '../utils/async.js';\nimport { root as root$0 } from '../utils/path.js';\n\n/**\n * The `<dom-if>` element will stamp a light-dom `<template>` child when\n * the `if` property becomes truthy, and the template can use Polymer\n * data-binding and declarative event features when used in the context of\n * a Polymer element's template.\n *\n * When `if` becomes falsy, the stamped content is hidden but not\n * removed from dom. When `if` subsequently becomes truthy again, the content\n * is simply re-shown. This approach is used due to its favorable performance\n * characteristics: the expense of creating template content is paid only\n * once and lazily.\n *\n * Set the `restamp` property to true to force the stamped content to be\n * created / destroyed when the `if` condition changes.\n *\n * @customElement\n * @polymer\n * @extends PolymerElement\n * @summary Custom element that conditionally stamps and hides or removes\n *   template content based on a boolean flag.\n */\nexport class DomIf extends PolymerElement {\n\n  // Not needed to find template; can be removed once the analyzer\n  // can find the tag name from customElements.define call\n  static get is() { return 'dom-if'; }\n\n  static get template() { return null; }\n\n  static get properties() {\n\n    return {\n\n      /**\n       * Fired whenever DOM is added or removed/hidden by this template (by\n       * default, rendering occurs lazily).  To force immediate rendering, call\n       * `render`.\n       *\n       * @event dom-change\n       */\n\n      /**\n       * A boolean indicating whether this template should stamp.\n       */\n      if: {\n        type: Boolean,\n        observer: '__debounceRender'\n      },\n\n      /**\n       * When true, elements will be removed from DOM and discarded when `if`\n       * becomes false and re-created and added back to the DOM when `if`\n       * becomes true.  By default, stamped elements will be hidden but left\n       * in the DOM when `if` becomes false, which is generally results\n       * in better performance.\n       */\n      restamp: {\n        type: Boolean,\n        observer: '__debounceRender'\n      }\n\n    };\n\n  }\n\n  constructor() {\n    super();\n    this.__renderDebouncer = null;\n    this.__invalidProps = null;\n    this.__instance = null;\n    this._lastIf = false;\n    this.__ctor = null;\n  }\n\n  __debounceRender() {\n    // Render is async for 2 reasons:\n    // 1. To eliminate dom creation trashing if user code thrashes `if` in the\n    //    same turn. This was more common in 1.x where a compound computed\n    //    property could result in the result changing multiple times, but is\n    //    mitigated to a large extent by batched property processing in 2.x.\n    // 2. To avoid double object propagation when a bag including values bound\n    //    to the `if` property as well as one or more hostProps could enqueue\n    //    the <dom-if> to flush before the <template>'s host property\n    //    forwarding. In that scenario creating an instance would result in\n    //    the host props being set once, and then the enqueued changes on the\n    //    template would set properties a second time, potentially causing an\n    //    object to be set to an instance more than once.  Creating the\n    //    instance async from flushing data ensures this doesn't happen. If\n    //    we wanted a sync option in the future, simply having <dom-if> flush\n    //    (or clear) its template's pending host properties before creating\n    //    the instance would also avoid the problem.\n    this.__renderDebouncer = Debouncer.debounce(\n          this.__renderDebouncer\n        , microTask\n        , () => this.__render());\n    enqueueDebouncer(this.__renderDebouncer);\n  }\n\n  /**\n   * @return {void}\n   */\n  disconnectedCallback() {\n    super.disconnectedCallback();\n    if (!this.parentNode ||\n        (this.parentNode.nodeType == Node.DOCUMENT_FRAGMENT_NODE &&\n         !this.parentNode.host)) {\n      this.__teardownInstance();\n    }\n  }\n\n  /**\n   * @return {void}\n   */\n  connectedCallback() {\n    super.connectedCallback();\n    this.style.display = 'none';\n    if (this.if) {\n      this.__debounceRender();\n    }\n  }\n\n  /**\n   * Forces the element to render its content. Normally rendering is\n   * asynchronous to a provoking change. This is done for efficiency so\n   * that multiple changes trigger only a single render. The render method\n   * should be called if, for example, template rendering is required to\n   * validate application state.\n   * @return {void}\n   */\n  render() {\n    flush();\n  }\n\n  __render() {\n    if (this.if) {\n      if (!this.__ensureInstance()) {\n        // No template found yet\n        return;\n      }\n      this._showHideChildren();\n    } else if (this.restamp) {\n      this.__teardownInstance();\n    }\n    if (!this.restamp && this.__instance) {\n      this._showHideChildren();\n    }\n    if (this.if != this._lastIf) {\n      this.dispatchEvent(new CustomEvent('dom-change', {\n        bubbles: true,\n        composed: true\n      }));\n      this._lastIf = this.if;\n    }\n  }\n\n  __ensureInstance() {\n    let parentNode = this.parentNode;\n    // Guard against element being detached while render was queued\n    if (parentNode) {\n      if (!this.__ctor) {\n        let template = /** @type {HTMLTemplateElement} */(this.querySelector('template'));\n        if (!template) {\n          // Wait until childList changes and template should be there by then\n          let observer = new MutationObserver(() => {\n            if (this.querySelector('template')) {\n              observer.disconnect();\n              this.__render();\n            } else {\n              throw new Error('dom-if requires a <template> child');\n            }\n          });\n          observer.observe(this, {childList: true});\n          return false;\n        }\n        this.__ctor = templatize(template, this, {\n          // dom-if templatizer instances require `mutable: true`, as\n          // `__syncHostProperties` relies on that behavior to sync objects\n          mutableData: true,\n          /**\n           * @param {string} prop Property to forward\n           * @param {*} value Value of property\n           * @this {this}\n           */\n          forwardHostProp: function(prop, value) {\n            if (this.__instance) {\n              if (this.if) {\n                this.__instance.forwardHostProp(prop, value);\n              } else {\n                // If we have an instance but are squelching host property\n                // forwarding due to if being false, note the invalidated\n                // properties so `__syncHostProperties` can sync them the next\n                // time `if` becomes true\n                this.__invalidProps = this.__invalidProps || Object.create(null);\n                this.__invalidProps[root$0(prop)] = true;\n              }\n            }\n          }\n        });\n      }\n      if (!this.__instance) {\n        this.__instance = new this.__ctor();\n        parentNode.insertBefore(this.__instance.root, this);\n      } else {\n        this.__syncHostProperties();\n        let c$ = this.__instance.children;\n        if (c$ && c$.length) {\n          // Detect case where dom-if was re-attached in new position\n          let lastChild = this.previousSibling;\n          if (lastChild !== c$[c$.length-1]) {\n            for (let i=0, n; (i<c$.length) && (n=c$[i]); i++) {\n              parentNode.insertBefore(n, this);\n            }\n          }\n        }\n      }\n    }\n    return true;\n  }\n\n  __syncHostProperties() {\n    let props = this.__invalidProps;\n    if (props) {\n      for (let prop in props) {\n        this.__instance._setPendingProperty(prop, this.__dataHost[prop]);\n      }\n      this.__invalidProps = null;\n      this.__instance._flushProperties();\n    }\n  }\n\n  __teardownInstance() {\n    if (this.__instance) {\n      let c$ = this.__instance.children;\n      if (c$ && c$.length) {\n        // use first child parent, for case when dom-if may have been detached\n        let parent = c$[0].parentNode;\n        for (let i=0, n; (i<c$.length) && (n=c$[i]); i++) {\n          parent.removeChild(n);\n        }\n      }\n      this.__instance = null;\n      this.__invalidProps = null;\n    }\n  }\n\n  /**\n   * Shows or hides the template instance top level child elements. For\n   * text nodes, `textContent` is removed while \"hidden\" and replaced when\n   * \"shown.\"\n   * @return {void}\n   * @protected\n   */\n  _showHideChildren() {\n    let hidden = this.__hideTemplateChildren__ || !this.if;\n    if (this.__instance) {\n      this.__instance._showHideChildren(hidden);\n    }\n  }\n\n}\n\ncustomElements.define(DomIf.is, DomIf);\n","'use strict';\n// 19.1.2.1 Object.assign(target, source, ...)\nvar getKeys = require('./_object-keys');\nvar gOPS = require('./_object-gops');\nvar pIE = require('./_object-pie');\nvar toObject = require('./_to-object');\nvar IObject = require('./_iobject');\nvar $assign = Object.assign;\n\n// should work with symbols and should have deterministic property order (V8 bug)\nmodule.exports = !$assign || require('./_fails')(function () {\n  var A = {};\n  var B = {};\n  // eslint-disable-next-line no-undef\n  var S = Symbol();\n  var K = 'abcdefghijklmnopqrst';\n  A[S] = 7;\n  K.split('').forEach(function (k) { B[k] = k; });\n  return $assign({}, A)[S] != 7 || Object.keys($assign({}, B)).join('') != K;\n}) ? function assign(target, source) { // eslint-disable-line no-unused-vars\n  var T = toObject(target);\n  var aLen = arguments.length;\n  var index = 1;\n  var getSymbols = gOPS.f;\n  var isEnum = pIE.f;\n  while (aLen > index) {\n    var S = IObject(arguments[index++]);\n    var keys = getSymbols ? getKeys(S).concat(getSymbols(S)) : getKeys(S);\n    var length = keys.length;\n    var j = 0;\n    var key;\n    while (length > j) if (isEnum.call(S, key = keys[j++])) T[key] = S[key];\n  } return T;\n} : $assign;\n","// 19.1.3.1 Object.assign(target, source)\nvar $export = require('./_export');\n\n$export($export.S + $export.F, 'Object', { assign: require('./_object-assign') });\n","require('../../modules/es6.object.assign');\nmodule.exports = require('../../modules/_core').Object.assign;\n","module.exports = { \"default\": require(\"core-js/library/fn/object/assign\"), __esModule: true };","class CustomEventsCollection {\n  constructor() {}\n\n  static get sliderStart() {\n    return \"slider-start\";\n  }\n\n  static get sliderMove() {\n    return \"slider-move\";\n  }\n\n  static get sliderStop() {\n    return \"slider-stop\";\n  }\n\n  static get defaultParams() {\n    return {bubbles: true, composed: true};\n  }\n\n  static sliderStartObj(dataJSON=null) {\n    let params = Object.assign({}, this.defaultParams, {\"detail\": dataJSON});\n    return new CustomEvent(this.sliderStart, params);\n  }\n\n  static sliderMoveObj(dataJSON=null) {\n    let params = Object.assign({}, this.defaultParams, {\"detail\": dataJSON});\n    return new CustomEvent(this.sliderMove, params);\n  }\n\n  static sliderStopObj(dataJSON=null) {\n    let params = Object.assign({}, this.defaultParams, {\"detail\": dataJSON});\n    return new CustomEvent(this.sliderStop, params);\n  }\n}\n\nexport default CustomEventsCollection;\n","var $export = require('./_export');\n// 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])\n$export($export.S, 'Object', { create: require('./_object-create') });\n","require('../../modules/es6.object.create');\nvar $Object = require('../../modules/_core').Object;\nmodule.exports = function create(P, D) {\n  return $Object.create(P, D);\n};\n","module.exports = { \"default\": require(\"core-js/library/fn/object/create\"), __esModule: true };","// Works with __proto__ only. Old v8 can't work with null proto objects.\n/* eslint-disable no-proto */\nvar isObject = require('./_is-object');\nvar anObject = require('./_an-object');\nvar check = function (O, proto) {\n  anObject(O);\n  if (!isObject(proto) && proto !== null) throw TypeError(proto + \": can't set as prototype!\");\n};\nmodule.exports = {\n  set: Object.setPrototypeOf || ('__proto__' in {} ? // eslint-disable-line\n    function (test, buggy, set) {\n      try {\n        set = require('./_ctx')(Function.call, require('./_object-gopd').f(Object.prototype, '__proto__').set, 2);\n        set(test, []);\n        buggy = !(test instanceof Array);\n      } catch (e) { buggy = true; }\n      return function setPrototypeOf(O, proto) {\n        check(O, proto);\n        if (buggy) O.__proto__ = proto;\n        else set(O, proto);\n        return O;\n      };\n    }({}, false) : undefined),\n  check: check\n};\n","// 19.1.3.19 Object.setPrototypeOf(O, proto)\nvar $export = require('./_export');\n$export($export.S, 'Object', { setPrototypeOf: require('./_set-proto').set });\n","require('../../modules/es6.object.set-prototype-of');\nmodule.exports = require('../../modules/_core').Object.setPrototypeOf;\n","module.exports = { \"default\": require(\"core-js/library/fn/object/set-prototype-of\"), __esModule: true };","\"use strict\";\n\nexports.__esModule = true;\n\nvar _setPrototypeOf = require(\"../core-js/object/set-prototype-of\");\n\nvar _setPrototypeOf2 = _interopRequireDefault(_setPrototypeOf);\n\nvar _create = require(\"../core-js/object/create\");\n\nvar _create2 = _interopRequireDefault(_create);\n\nvar _typeof2 = require(\"../helpers/typeof\");\n\nvar _typeof3 = _interopRequireDefault(_typeof2);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nexports.default = function (subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + (typeof superClass === \"undefined\" ? \"undefined\" : (0, _typeof3.default)(superClass)));\n  }\n\n  subClass.prototype = (0, _create2.default)(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf2.default ? (0, _setPrototypeOf2.default)(subClass, superClass) : subClass.__proto__ = superClass;\n};","var $export = require('./_export');\n// 19.1.2.4 / 15.2.3.6 Object.defineProperty(O, P, Attributes)\n$export($export.S + $export.F * !require('./_descriptors'), 'Object', { defineProperty: require('./_object-dp').f });\n","require('../../modules/es6.object.define-property');\nvar $Object = require('../../modules/_core').Object;\nmodule.exports = function defineProperty(it, key, desc) {\n  return $Object.defineProperty(it, key, desc);\n};\n","module.exports = { \"default\": require(\"core-js/library/fn/object/define-property\"), __esModule: true };","require('./_wks-define')('observable');\n","// fallback for IE11 buggy Object.getOwnPropertyNames with iframe and window\nvar toIObject = require('./_to-iobject');\nvar gOPN = require('./_object-gopn').f;\nvar toString = {}.toString;\n\nvar windowNames = typeof window == 'object' && window && Object.getOwnPropertyNames\n  ? Object.getOwnPropertyNames(window) : [];\n\nvar getWindowNames = function (it) {\n  try {\n    return gOPN(it);\n  } catch (e) {\n    return windowNames.slice();\n  }\n};\n\nmodule.exports.f = function getOwnPropertyNames(it) {\n  return windowNames && toString.call(it) == '[object Window]' ? getWindowNames(it) : gOPN(toIObject(it));\n};\n","// 7.2.2 IsArray(argument)\nvar cof = require('./_cof');\nmodule.exports = Array.isArray || function isArray(arg) {\n  return cof(arg) == 'Array';\n};\n","// all enumerable object keys, includes symbols\nvar getKeys = require('./_object-keys');\nvar gOPS = require('./_object-gops');\nvar pIE = require('./_object-pie');\nmodule.exports = function (it) {\n  var result = getKeys(it);\n  var getSymbols = gOPS.f;\n  if (getSymbols) {\n    var symbols = getSymbols(it);\n    var isEnum = pIE.f;\n    var i = 0;\n    var key;\n    while (symbols.length > i) if (isEnum.call(it, key = symbols[i++])) result.push(key);\n  } return result;\n};\n","'use strict';\n// ECMAScript 6 symbols shim\nvar global = require('./_global');\nvar has = require('./_has');\nvar DESCRIPTORS = require('./_descriptors');\nvar $export = require('./_export');\nvar redefine = require('./_redefine');\nvar META = require('./_meta').KEY;\nvar $fails = require('./_fails');\nvar shared = require('./_shared');\nvar setToStringTag = require('./_set-to-string-tag');\nvar uid = require('./_uid');\nvar wks = require('./_wks');\nvar wksExt = require('./_wks-ext');\nvar wksDefine = require('./_wks-define');\nvar enumKeys = require('./_enum-keys');\nvar isArray = require('./_is-array');\nvar anObject = require('./_an-object');\nvar isObject = require('./_is-object');\nvar toIObject = require('./_to-iobject');\nvar toPrimitive = require('./_to-primitive');\nvar createDesc = require('./_property-desc');\nvar _create = require('./_object-create');\nvar gOPNExt = require('./_object-gopn-ext');\nvar $GOPD = require('./_object-gopd');\nvar $DP = require('./_object-dp');\nvar $keys = require('./_object-keys');\nvar gOPD = $GOPD.f;\nvar dP = $DP.f;\nvar gOPN = gOPNExt.f;\nvar $Symbol = global.Symbol;\nvar $JSON = global.JSON;\nvar _stringify = $JSON && $JSON.stringify;\nvar PROTOTYPE = 'prototype';\nvar HIDDEN = wks('_hidden');\nvar TO_PRIMITIVE = wks('toPrimitive');\nvar isEnum = {}.propertyIsEnumerable;\nvar SymbolRegistry = shared('symbol-registry');\nvar AllSymbols = shared('symbols');\nvar OPSymbols = shared('op-symbols');\nvar ObjectProto = Object[PROTOTYPE];\nvar USE_NATIVE = typeof $Symbol == 'function';\nvar QObject = global.QObject;\n// Don't use setters in Qt Script, https://github.com/zloirock/core-js/issues/173\nvar setter = !QObject || !QObject[PROTOTYPE] || !QObject[PROTOTYPE].findChild;\n\n// fallback for old Android, https://code.google.com/p/v8/issues/detail?id=687\nvar setSymbolDesc = DESCRIPTORS && $fails(function () {\n  return _create(dP({}, 'a', {\n    get: function () { return dP(this, 'a', { value: 7 }).a; }\n  })).a != 7;\n}) ? function (it, key, D) {\n  var protoDesc = gOPD(ObjectProto, key);\n  if (protoDesc) delete ObjectProto[key];\n  dP(it, key, D);\n  if (protoDesc && it !== ObjectProto) dP(ObjectProto, key, protoDesc);\n} : dP;\n\nvar wrap = function (tag) {\n  var sym = AllSymbols[tag] = _create($Symbol[PROTOTYPE]);\n  sym._k = tag;\n  return sym;\n};\n\nvar isSymbol = USE_NATIVE && typeof $Symbol.iterator == 'symbol' ? function (it) {\n  return typeof it == 'symbol';\n} : function (it) {\n  return it instanceof $Symbol;\n};\n\nvar $defineProperty = function defineProperty(it, key, D) {\n  if (it === ObjectProto) $defineProperty(OPSymbols, key, D);\n  anObject(it);\n  key = toPrimitive(key, true);\n  anObject(D);\n  if (has(AllSymbols, key)) {\n    if (!D.enumerable) {\n      if (!has(it, HIDDEN)) dP(it, HIDDEN, createDesc(1, {}));\n      it[HIDDEN][key] = true;\n    } else {\n      if (has(it, HIDDEN) && it[HIDDEN][key]) it[HIDDEN][key] = false;\n      D = _create(D, { enumerable: createDesc(0, false) });\n    } return setSymbolDesc(it, key, D);\n  } return dP(it, key, D);\n};\nvar $defineProperties = function defineProperties(it, P) {\n  anObject(it);\n  var keys = enumKeys(P = toIObject(P));\n  var i = 0;\n  var l = keys.length;\n  var key;\n  while (l > i) $defineProperty(it, key = keys[i++], P[key]);\n  return it;\n};\nvar $create = function create(it, P) {\n  return P === undefined ? _create(it) : $defineProperties(_create(it), P);\n};\nvar $propertyIsEnumerable = function propertyIsEnumerable(key) {\n  var E = isEnum.call(this, key = toPrimitive(key, true));\n  if (this === ObjectProto && has(AllSymbols, key) && !has(OPSymbols, key)) return false;\n  return E || !has(this, key) || !has(AllSymbols, key) || has(this, HIDDEN) && this[HIDDEN][key] ? E : true;\n};\nvar $getOwnPropertyDescriptor = function getOwnPropertyDescriptor(it, key) {\n  it = toIObject(it);\n  key = toPrimitive(key, true);\n  if (it === ObjectProto && has(AllSymbols, key) && !has(OPSymbols, key)) return;\n  var D = gOPD(it, key);\n  if (D && has(AllSymbols, key) && !(has(it, HIDDEN) && it[HIDDEN][key])) D.enumerable = true;\n  return D;\n};\nvar $getOwnPropertyNames = function getOwnPropertyNames(it) {\n  var names = gOPN(toIObject(it));\n  var result = [];\n  var i = 0;\n  var key;\n  while (names.length > i) {\n    if (!has(AllSymbols, key = names[i++]) && key != HIDDEN && key != META) result.push(key);\n  } return result;\n};\nvar $getOwnPropertySymbols = function getOwnPropertySymbols(it) {\n  var IS_OP = it === ObjectProto;\n  var names = gOPN(IS_OP ? OPSymbols : toIObject(it));\n  var result = [];\n  var i = 0;\n  var key;\n  while (names.length > i) {\n    if (has(AllSymbols, key = names[i++]) && (IS_OP ? has(ObjectProto, key) : true)) result.push(AllSymbols[key]);\n  } return result;\n};\n\n// 19.4.1.1 Symbol([description])\nif (!USE_NATIVE) {\n  $Symbol = function Symbol() {\n    if (this instanceof $Symbol) throw TypeError('Symbol is not a constructor!');\n    var tag = uid(arguments.length > 0 ? arguments[0] : undefined);\n    var $set = function (value) {\n      if (this === ObjectProto) $set.call(OPSymbols, value);\n      if (has(this, HIDDEN) && has(this[HIDDEN], tag)) this[HIDDEN][tag] = false;\n      setSymbolDesc(this, tag, createDesc(1, value));\n    };\n    if (DESCRIPTORS && setter) setSymbolDesc(ObjectProto, tag, { configurable: true, set: $set });\n    return wrap(tag);\n  };\n  redefine($Symbol[PROTOTYPE], 'toString', function toString() {\n    return this._k;\n  });\n\n  $GOPD.f = $getOwnPropertyDescriptor;\n  $DP.f = $defineProperty;\n  require('./_object-gopn').f = gOPNExt.f = $getOwnPropertyNames;\n  require('./_object-pie').f = $propertyIsEnumerable;\n  require('./_object-gops').f = $getOwnPropertySymbols;\n\n  if (DESCRIPTORS && !require('./_library')) {\n    redefine(ObjectProto, 'propertyIsEnumerable', $propertyIsEnumerable, true);\n  }\n\n  wksExt.f = function (name) {\n    return wrap(wks(name));\n  };\n}\n\n$export($export.G + $export.W + $export.F * !USE_NATIVE, { Symbol: $Symbol });\n\nfor (var es6Symbols = (\n  // 19.4.2.2, 19.4.2.3, 19.4.2.4, 19.4.2.6, 19.4.2.8, 19.4.2.9, 19.4.2.10, 19.4.2.11, 19.4.2.12, 19.4.2.13, 19.4.2.14\n  'hasInstance,isConcatSpreadable,iterator,match,replace,search,species,split,toPrimitive,toStringTag,unscopables'\n).split(','), j = 0; es6Symbols.length > j;)wks(es6Symbols[j++]);\n\nfor (var wellKnownSymbols = $keys(wks.store), k = 0; wellKnownSymbols.length > k;) wksDefine(wellKnownSymbols[k++]);\n\n$export($export.S + $export.F * !USE_NATIVE, 'Symbol', {\n  // 19.4.2.1 Symbol.for(key)\n  'for': function (key) {\n    return has(SymbolRegistry, key += '')\n      ? SymbolRegistry[key]\n      : SymbolRegistry[key] = $Symbol(key);\n  },\n  // 19.4.2.5 Symbol.keyFor(sym)\n  keyFor: function keyFor(sym) {\n    if (!isSymbol(sym)) throw TypeError(sym + ' is not a symbol!');\n    for (var key in SymbolRegistry) if (SymbolRegistry[key] === sym) return key;\n  },\n  useSetter: function () { setter = true; },\n  useSimple: function () { setter = false; }\n});\n\n$export($export.S + $export.F * !USE_NATIVE, 'Object', {\n  // 19.1.2.2 Object.create(O [, Properties])\n  create: $create,\n  // 19.1.2.4 Object.defineProperty(O, P, Attributes)\n  defineProperty: $defineProperty,\n  // 19.1.2.3 Object.defineProperties(O, Properties)\n  defineProperties: $defineProperties,\n  // 19.1.2.6 Object.getOwnPropertyDescriptor(O, P)\n  getOwnPropertyDescriptor: $getOwnPropertyDescriptor,\n  // 19.1.2.7 Object.getOwnPropertyNames(O)\n  getOwnPropertyNames: $getOwnPropertyNames,\n  // 19.1.2.8 Object.getOwnPropertySymbols(O)\n  getOwnPropertySymbols: $getOwnPropertySymbols\n});\n\n// 24.3.2 JSON.stringify(value [, replacer [, space]])\n$JSON && $export($export.S + $export.F * (!USE_NATIVE || $fails(function () {\n  var S = $Symbol();\n  // MS Edge converts symbol values to JSON as {}\n  // WebKit converts symbol values to JSON as null\n  // V8 throws on boxed symbols\n  return _stringify([S]) != '[null]' || _stringify({ a: S }) != '{}' || _stringify(Object(S)) != '{}';\n})), 'JSON', {\n  stringify: function stringify(it) {\n    var args = [it];\n    var i = 1;\n    var replacer, $replacer;\n    while (arguments.length > i) args.push(arguments[i++]);\n    $replacer = replacer = args[1];\n    if (!isObject(replacer) && it === undefined || isSymbol(it)) return; // IE8 returns string on undefined\n    if (!isArray(replacer)) replacer = function (key, value) {\n      if (typeof $replacer == 'function') value = $replacer.call(this, key, value);\n      if (!isSymbol(value)) return value;\n    };\n    args[1] = replacer;\n    return _stringify.apply($JSON, args);\n  }\n});\n\n// 19.4.3.4 Symbol.prototype[@@toPrimitive](hint)\n$Symbol[PROTOTYPE][TO_PRIMITIVE] || require('./_hide')($Symbol[PROTOTYPE], TO_PRIMITIVE, $Symbol[PROTOTYPE].valueOf);\n// 19.4.3.5 Symbol.prototype[@@toStringTag]\nsetToStringTag($Symbol, 'Symbol');\n// 20.2.1.9 Math[@@toStringTag]\nsetToStringTag(Math, 'Math', true);\n// 24.3.3 JSON[@@toStringTag]\nsetToStringTag(global.JSON, 'JSON', true);\n","require('../../modules/es6.symbol');\nrequire('../../modules/es6.object.to-string');\nrequire('../../modules/es7.symbol.async-iterator');\nrequire('../../modules/es7.symbol.observable');\nmodule.exports = require('../../modules/_core').Symbol;\n","module.exports = { \"default\": require(\"core-js/library/fn/symbol\"), __esModule: true };","module.exports = function (done, value) {\n  return { value: value, done: !!done };\n};\n","module.exports = function () { /* empty */ };\n","'use strict';\nvar addToUnscopables = require('./_add-to-unscopables');\nvar step = require('./_iter-step');\nvar Iterators = require('./_iterators');\nvar toIObject = require('./_to-iobject');\n\n// 22.1.3.4 Array.prototype.entries()\n// 22.1.3.13 Array.prototype.keys()\n// 22.1.3.29 Array.prototype.values()\n// 22.1.3.30 Array.prototype[@@iterator]()\nmodule.exports = require('./_iter-define')(Array, 'Array', function (iterated, kind) {\n  this._t = toIObject(iterated); // target\n  this._i = 0;                   // next index\n  this._k = kind;                // kind\n// 22.1.5.2.1 %ArrayIteratorPrototype%.next()\n}, function () {\n  var O = this._t;\n  var kind = this._k;\n  var index = this._i++;\n  if (!O || index >= O.length) {\n    this._t = undefined;\n    return step(1);\n  }\n  if (kind == 'keys') return step(0, index);\n  if (kind == 'values') return step(0, O[index]);\n  return step(0, [index, O[index]]);\n}, 'values');\n\n// argumentsList[@@iterator] is %ArrayProto_values% (9.4.4.6, 9.4.4.7)\nIterators.Arguments = Iterators.Array;\n\naddToUnscopables('keys');\naddToUnscopables('values');\naddToUnscopables('entries');\n","require('./es6.array.iterator');\nvar global = require('./_global');\nvar hide = require('./_hide');\nvar Iterators = require('./_iterators');\nvar TO_STRING_TAG = require('./_wks')('toStringTag');\n\nvar DOMIterables = ('CSSRuleList,CSSStyleDeclaration,CSSValueList,ClientRectList,DOMRectList,DOMStringList,' +\n  'DOMTokenList,DataTransferItemList,FileList,HTMLAllCollection,HTMLCollection,HTMLFormElement,HTMLSelectElement,' +\n  'MediaList,MimeTypeArray,NamedNodeMap,NodeList,PaintRequestList,Plugin,PluginArray,SVGLengthList,SVGNumberList,' +\n  'SVGPathSegList,SVGPointList,SVGStringList,SVGTransformList,SourceBufferList,StyleSheetList,TextTrackCueList,' +\n  'TextTrackList,TouchList').split(',');\n\nfor (var i = 0; i < DOMIterables.length; i++) {\n  var NAME = DOMIterables[i];\n  var Collection = global[NAME];\n  var proto = Collection && Collection.prototype;\n  if (proto && !proto[TO_STRING_TAG]) hide(proto, TO_STRING_TAG, NAME);\n  Iterators[NAME] = Iterators.Array;\n}\n","var document = require('./_global').document;\nmodule.exports = document && document.documentElement;\n","'use strict';\nvar create = require('./_object-create');\nvar descriptor = require('./_property-desc');\nvar setToStringTag = require('./_set-to-string-tag');\nvar IteratorPrototype = {};\n\n// 25.1.2.1.1 %IteratorPrototype%[@@iterator]()\nrequire('./_hide')(IteratorPrototype, require('./_wks')('iterator'), function () { return this; });\n\nmodule.exports = function (Constructor, NAME, next) {\n  Constructor.prototype = create(IteratorPrototype, { next: descriptor(1, next) });\n  setToStringTag(Constructor, NAME + ' Iterator');\n};\n","var toInteger = require('./_to-integer');\nvar defined = require('./_defined');\n// true  -> String#at\n// false -> String#codePointAt\nmodule.exports = function (TO_STRING) {\n  return function (that, pos) {\n    var s = String(defined(that));\n    var i = toInteger(pos);\n    var l = s.length;\n    var a, b;\n    if (i < 0 || i >= l) return TO_STRING ? '' : undefined;\n    a = s.charCodeAt(i);\n    return a < 0xd800 || a > 0xdbff || i + 1 === l || (b = s.charCodeAt(i + 1)) < 0xdc00 || b > 0xdfff\n      ? TO_STRING ? s.charAt(i) : a\n      : TO_STRING ? s.slice(i, i + 2) : (a - 0xd800 << 10) + (b - 0xdc00) + 0x10000;\n  };\n};\n","'use strict';\nvar $at = require('./_string-at')(true);\n\n// 21.1.3.27 String.prototype[@@iterator]()\nrequire('./_iter-define')(String, 'String', function (iterated) {\n  this._t = String(iterated); // target\n  this._i = 0;                // next index\n// 21.1.5.2.1 %StringIteratorPrototype%.next()\n}, function () {\n  var O = this._t;\n  var index = this._i;\n  var point;\n  if (index >= O.length) return { value: undefined, done: true };\n  point = $at(O, index);\n  this._i += point.length;\n  return { value: point, done: false };\n});\n","require('../../modules/es6.string.iterator');\nrequire('../../modules/web.dom.iterable');\nmodule.exports = require('../../modules/_wks-ext').f('iterator');\n","module.exports = { \"default\": require(\"core-js/library/fn/symbol/iterator\"), __esModule: true };","\"use strict\";\n\nexports.__esModule = true;\n\nvar _typeof2 = require(\"../helpers/typeof\");\n\nvar _typeof3 = _interopRequireDefault(_typeof2);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nexports.default = function (self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && ((typeof call === \"undefined\" ? \"undefined\" : (0, _typeof3.default)(call)) === \"object\" || typeof call === \"function\") ? call : self;\n};","// 19.1.2.5 Object.freeze(O)\nvar isObject = require('./_is-object');\nvar meta = require('./_meta').onFreeze;\n\nrequire('./_object-sap')('freeze', function ($freeze) {\n  return function freeze(it) {\n    return $freeze && isObject(it) ? $freeze(meta(it)) : it;\n  };\n});\n","require('../../modules/es6.object.freeze');\nmodule.exports = require('../../modules/_core').Object.freeze;\n","module.exports = { \"default\": require(\"core-js/library/fn/object/freeze\"), __esModule: true };","var toInteger = require('./_to-integer');\nvar max = Math.max;\nvar min = Math.min;\nmodule.exports = function (index, length) {\n  index = toInteger(index);\n  return index < 0 ? max(index + length, 0) : min(index, length);\n};\n","// 7.1.15 ToLength\nvar toInteger = require('./_to-integer');\nvar min = Math.min;\nmodule.exports = function (it) {\n  return it > 0 ? min(toInteger(it), 0x1fffffffffffff) : 0; // pow(2, 53) - 1 == 9007199254740991\n};\n","// false -> Array#indexOf\n// true  -> Array#includes\nvar toIObject = require('./_to-iobject');\nvar toLength = require('./_to-length');\nvar toAbsoluteIndex = require('./_to-absolute-index');\nmodule.exports = function (IS_INCLUDES) {\n  return function ($this, el, fromIndex) {\n    var O = toIObject($this);\n    var length = toLength(O.length);\n    var index = toAbsoluteIndex(fromIndex, length);\n    var value;\n    // Array#includes uses SameValueZero equality algorithm\n    // eslint-disable-next-line no-self-compare\n    if (IS_INCLUDES && el != el) while (length > index) {\n      value = O[index++];\n      // eslint-disable-next-line no-self-compare\n      if (value != value) return true;\n    // Array#indexOf ignores holes, Array#includes - not\n    } else for (;length > index; index++) if (IS_INCLUDES || index in O) {\n      if (O[index] === el) return IS_INCLUDES || index || 0;\n    } return !IS_INCLUDES && -1;\n  };\n};\n","var $export = require('./_export');\n// 19.1.2.3 / 15.2.3.7 Object.defineProperties(O, Properties)\n$export($export.S + $export.F * !require('./_descriptors'), 'Object', { defineProperties: require('./_object-dps') });\n","require('../../modules/es6.object.define-properties');\nvar $Object = require('../../modules/_core').Object;\nmodule.exports = function defineProperties(T, D) {\n  return $Object.defineProperties(T, D);\n};\n","module.exports = { \"default\": require(\"core-js/library/fn/object/define-properties\"), __esModule: true };","\"use strict\";\n\nexports.__esModule = true;\n\nvar _defineProperties = require(\"../core-js/object/define-properties\");\n\nvar _defineProperties2 = _interopRequireDefault(_defineProperties);\n\nvar _freeze = require(\"../core-js/object/freeze\");\n\nvar _freeze2 = _interopRequireDefault(_freeze);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nexports.default = function (strings, raw) {\n  return (0, _freeze2.default)((0, _defineProperties2.default)(strings, {\n    raw: {\n      value: (0, _freeze2.default)(raw)\n    }\n  }));\n};","// 19.1.2.9 Object.getPrototypeOf(O)\nvar toObject = require('./_to-object');\nvar $getPrototypeOf = require('./_object-gpo');\n\nrequire('./_object-sap')('getPrototypeOf', function () {\n  return function getPrototypeOf(it) {\n    return $getPrototypeOf(toObject(it));\n  };\n});\n","require('../../modules/es6.object.get-prototype-of');\nmodule.exports = require('../../modules/_core').Object.getPrototypeOf;\n","module.exports = { \"default\": require(\"core-js/library/fn/object/get-prototype-of\"), __esModule: true };","module.exports = function (it) {\n  if (typeof it != 'function') throw TypeError(it + ' is not a function!');\n  return it;\n};\n","// 20.1.2.4 Number.isNaN(number)\nvar $export = require('./_export');\n\n$export($export.S, 'Number', {\n  isNaN: function isNaN(number) {\n    // eslint-disable-next-line no-self-compare\n    return number != number;\n  }\n});\n","require('../../modules/es6.number.is-nan');\nmodule.exports = require('../../modules/_core').Number.isNaN;\n","module.exports = { \"default\": require(\"core-js/library/fn/number/is-nan\"), __esModule: true };","import {PolymerElement} from '@polymer/polymer/polymer-element.js';\nimport {html} from '@polymer/polymer/lib/utils/html-tag.js';\nimport '@polymer/polymer/lib/elements/dom-if.js';\nimport {GestureEventListeners} from '@polymer/polymer/lib/mixins/gesture-event-listeners.js';\nimport ce from './common/customEvents.js';\n\n/**\n * `dynamic-slider`\n * Renders a slider between any 2 arbitrary points on the screen.\n *\n * @customElement\n * @polymer\n * @demo demo/index.html\n */\nclass DynamicSlider extends GestureEventListeners(PolymerElement) {\n  static get template() {\n    return html `\n      <style>\n        :host {\n          pointer-events: none;\n          display: block;\n          height: auto;\n          width: auto;\n          position: absolute;\n        }\n      </style>\n      <template is=\"dom-if\" if=\"[[__isShowSlider]]\" on-dom-change=\"displayChange\">\n        <svg id=\"container\"\n             width$=\"[[__width]]\"\n             height$=\"[[__height]]\"\n             style$=\"[[__containerStyle]]\">\n          <line id=\"track\"\n                x1$=\"[[__adjustedPts.from.x]]\"\n                y1$=\"[[__adjustedPts.from.y]]\"\n                x2$=\"[[__adjustedPts.to.x]]\"\n                y2$=\"[[__adjustedPts.to.y]]\"\n                style$=\"[[__trackStyle]]\" />\n          <line id=\"track-overlay\"\n                x1$=\"[[__adjustedPts.from.x]]\"\n                y1$=\"[[__adjustedPts.from.y]]\"\n                x2$=\"[[__adjustedPts.to.x]]\"\n                y2$=\"[[__adjustedPts.to.y]]\"\n                style$=\"[[__trackOverlayStyle]]\"\n                on-track=\"adjustHandle\" />\n          <circle id=\"handle-circle\"\n                  style$=\"[[__circleHandleStyle]]\"\n                  r$=\"[[handleRadius]]\"\n                  cx$=\"[[handlePositionX]]\"\n                  cy$=\"[[handlePositionY]]\"></circle>\n          <image id=\"handle-img\"\n                 preserveAspectRatio=\"xMidYMid meet\"\n                 width$=\"[[__imgHandleSize.width]]\"\n                 height$=\"[[__imgHandleSize.height]]\"\n                 x$=\"[[handlePositionX]]\"\n                 y$=\"[[handlePositionY]]\"\n                 style$=\"[[__imgHandleStyle]]\" />\n           </svg>\n        </svg>\n      </template>\n      `;\n  }\n\n  constructor() {\n    super();\n    this.handlePositionX = undefined;\n    this.handlePositionY = undefined;\n    this.parentBoundaries = undefined;\n    this.isSliderShown = false;\n  }\n\n  displayChange(e) {\n    if (!this.__isShowSlider) {\n      this.isSliderShown = false;\n      return;\n    }\n    this.isSliderShown = true;\n    // Update the objective location offset for this element.\n    this.parentBoundaries = this.shadowRoot.querySelector(\"#container\").getBoundingClientRect();\n    // Update the current handle position\n    this.setDefaultHandlePosition(this.val, this.__adjustedPts, this.handleRadius);\n    // Find the image handle, if is available, then set the image for it.\n    let imageHandle = this.shadowRoot.querySelectorAll(`#handle-img:not([style*=\"display:none\"]):not([style*=\"display: none\"])`)[0];\n    if (imageHandle && this.imgHandle) {\n      imageHandle.setAttributeNS(\"http://www.w3.org/1999/xlink\", \"href\", this.imgHandle);\n    }\n  }\n\n  adjustHandle(e) {\n    if (!this.parentBoundaries) {\n      return;\n    }\n    let localX = e.detail.x - this.parentBoundaries.left;\n    let localY = e.detail.y - this.parentBoundaries.top;\n    // Use the simplified expression for getting the intersecting line's point intersection\n    // between localX/Y and the slider line to find out where to place the handle on the\n    // slider. Clamp the values with the given x_min and x_max values.\n    this.handlePositionX = (localX < this.__lineParam.x_min)\n      ? this.__lineParam.x_min\n      : (localX > this.__lineParam.x_max)\n        ? this.__lineParam.x_max\n        : (localX + (this.__lineParam.m * (localY - this.__lineParam.b))) / (this.__lineParam.m**2 + 1);\n    this.handlePositionY = (this.__lineParam.m * this.handlePositionX) + this.__lineParam.b;\n    // Calculate the proportion between the current handle position and slider's length.\n    let currentDistance = this.calculateDistance(this.__adjustedPts.from.x,\n                                                 this.__adjustedPts.from.y,\n                                                 this.handlePositionX,\n                                                 this.handlePositionY);\n    // If an image handle is being used, offset the position to the image center\n    if (this.imgHandle) {\n      this.handlePositionX -= this.handleRadius;\n      this.handlePositionY -= this.handleRadius;\n    }\n    let data = {\n      proportion: currentDistance / this.__length\n    };\n    switch(e.detail.state) {\n      case \"start\":\n        this.shadowRoot.querySelector(\"#container\").dispatchEvent(ce.sliderStartObj(data));\n        break;\n      case \"track\":\n        this.shadowRoot.querySelector(\"#container\").dispatchEvent(ce.sliderMoveObj(data));\n        break;\n      case \"end\":\n        this.shadowRoot.querySelector(\"#container\").dispatchEvent(ce.sliderStopObj(data));\n        break;\n    }\n  }\n\n  static get is() {\n    return 'dynamic-slider';\n  }\n\n  static get properties() {\n    return {\n      lineThickness: {\n        type: Number,\n        value: 2\n      },\n      lineColor: {\n        type: String,\n        value: \"black\"\n      },\n      handleRadius: {\n        type: Number,\n        value: 8\n      },\n      handleColor: {\n        type: String,\n        value: \"black\"\n      },\n      x1: Number,\n      y1: Number,\n      x2: Number,\n      y2: Number,\n      val: Number,\n      imgHandle: {\n        type: String,\n        value: \"\"\n      },\n      __overlayThickness: {\n        type: Number,\n        computed: \"computeOverlayThickness(lineThickness)\"\n      },\n      __pt1: {\n        type: Object,\n        computed: \"computePoint(x1, y1)\"\n      },\n      __pt2: {\n        type: Object,\n        computed: \"computePoint(x2, y2)\"\n      },\n      __isShowSlider: {\n        type: Boolean,\n        computed: \"computeIsShowSlider(__pt1, __pt2)\"\n      },\n      __drawStartPt: {\n        type: Object,\n        computed: \"computeDrawStartPoint(__isShowSlider, handleRadius, __pt1, __pt2)\"\n      },\n      __adjustedPts: {\n        type: Object,\n        computed: \"computeAdjustedPoints(__isShowSlider, handleRadius, __pt1, __pt2)\"\n      },\n      __length: {\n        type: Number,\n        computed: \"computeDistance(__adjustedPts)\"\n      },\n      __lineParam: {\n        type: Object,\n        computed: \"computeLineParam(__adjustedPts)\"\n      },\n      __width: {\n        type: Number,\n        computed: \"computeWidth(__isShowSlider, handleRadius, __pt1, __pt2)\"\n      },\n      __height: {\n        type: Number,\n        computed: \"computeHeight(__isShowSlider, handleRadius, __pt1, __pt2)\"\n      },\n      __containerStyle: {\n        type: String,\n        computed: \"computeContainerStyle(__drawStartPt)\"\n      },\n      __trackStyle: {\n        type: String,\n        computed: \"computeTrackStyle(lineThickness, lineColor)\"\n      },\n      __trackOverlayStyle: {\n        type: String,\n        computed: \"computeTrackOverlayStyle(__overlayThickness)\"\n      },\n      __circleHandleStyle: {\n        type: String,\n        computed: \"computeCircleHandleStyle(imgHandle, handleColor)\"\n      },\n      __imgHandleStyle: {\n        type: String,\n        computed: \"computeImageHandleStyle(imgHandle)\"\n      },\n      __imgHandleSize: {\n        type: Object,\n        computed: \"computeImageHandleSize(handleRadius)\"\n      }\n    };\n  }\n\n  static get observers() {\n    return [\n      \"setDefaultHandlePosition(val, __adjustedPts, handleRadius)\"\n    ];\n  }\n\n  computeOverlayThickness(lineThickness) {\n    return lineThickness * 6;\n  }\n\n  computePoint(x, y) {\n    return (x !== undefined && y !== undefined && !Number.isNaN(x) && !Number.isNaN(y))\n      ? { x, y }\n      : undefined;\n  }\n\n  computeIsShowSlider(__pt1, __pt2) {\n    return __pt1 !== undefined && __pt2 !== undefined;\n  }\n\n  computeDrawStartPoint(__isShowSlider, handleRadius, __pt1, __pt2) {\n    return (__isShowSlider)\n      ? {\n        x: ((__pt2.x <= __pt1.x) ? __pt2.x : __pt1.x) - handleRadius,\n        y: ((__pt2.y <= __pt1.y) ? __pt2.y : __pt1.y) - handleRadius\n      }\n      : undefined;\n  }\n\n  computeAdjustedPoints(__isShowSlider, handleRadius, __pt1, __pt2) {\n    if (!__isShowSlider) {\n      return;\n    }\n    let xOffset = (__pt1.x <= __pt2.x) ? __pt1.x : __pt2.x;\n    let yOffset = (__pt1.y <= __pt2.y) ? __pt1.y : __pt2.y;\n    let x1 = (__pt1.x - xOffset) + handleRadius;\n    let y1 = (__pt1.y - yOffset) + handleRadius;\n    let x2 = (__pt2.x - xOffset) + handleRadius;\n    let y2 = (__pt2.y - yOffset) + handleRadius;\n    return {\n      from: { x: x1, y: y1 },\n      to: { x: x2, y: y2 }\n    };\n  }\n\n  computeDistance(__adjustedPts) {\n    if (!__adjustedPts) {\n      return;\n    }\n    return this.calculateDistance(__adjustedPts.from.x, __adjustedPts.from.y, __adjustedPts.to.x, __adjustedPts.to.y);\n  }\n\n  computeLineParam(__adjustedPts) {\n    if (!__adjustedPts) {\n      return;\n    }\n    let m = (__adjustedPts.to.y - __adjustedPts.from.y) / (__adjustedPts.to.x - __adjustedPts.from.x);\n    let b = __adjustedPts.to.y - (m * __adjustedPts.to.x);\n    let bSanityCheck = __adjustedPts.from.y - (m * __adjustedPts.from.x);\n    let compareSensitivity = 1e-14;\n    if (Math.abs(b - bSanityCheck) > 1e-14) {\n      throw `Something went wrong while extrapolating linear parameters from dynamic slider. Points: from (${__adjustedPts.from.x}, ${__adjustedPts.from.y}) to (${__adjustedPts.to.x}, ${__adjustedPts.to.y})`;\n    }\n    let x_min = __adjustedPts.from.x;\n    let x_max = __adjustedPts.to.x;\n    if (__adjustedPts.to.x < __adjustedPts.from.x) {\n      x_min = __adjustedPts.to.x;\n      x_max = __adjustedPts.from.x;\n    }\n    return { m, b, x_min, x_max };\n  }\n\n  computeWidth(__isShowSlider, handleRadius, __pt1, __pt2) {\n    return (__isShowSlider)\n      ? Math.abs(__pt1.x - __pt2.x) + (2 * handleRadius)\n      : undefined;\n  }\n\n  computeHeight(__isShowSlider, handleRadius, __pt1, __pt2) {\n    return (__isShowSlider)\n      ? Math.abs(__pt1.y - __pt2.y) + (2 * handleRadius)\n      : undefined;\n  }\n\n  computeContainerStyle(__drawStartPt) {\n    return (__drawStartPt)\n    ? `\n      pointer-events: none;\n      transform: translate(${__drawStartPt.x}px, ${__drawStartPt.y}px);\n    `\n    : undefined;\n  }\n\n  computeTrackStyle(lineThickness, lineColor) {\n    return `\n      pointer-events: none;\n      stroke: ${lineColor};\n      stroke-width: ${lineThickness}px;\n      stroke-linecap: round;\n    `;\n  }\n\n  computeTrackOverlayStyle(__overlayThickness) {\n    return `\n      pointer-events: stroke;\n      cursor: pointer;\n      stroke-width: ${__overlayThickness}px;\n      stroke-linecap: round;\n\n    `;\n  }\n\n  computeCircleHandleStyle(imgHandle, handleColor) {\n    let style = `\n      fill: ${handleColor};\n    `;\n    style += (!imgHandle) ? `` : `display: none;`;\n    return style;\n  }\n\n  computeImageHandleStyle(imgHandle) {\n    let style = ``;\n    style += (!imgHandle) ? `display: none;` : ``;\n    return style;\n  }\n\n  computeImageHandleSize(handleRadius) {\n    return {\n      width: 2 * handleRadius,\n      height: 2 * handleRadius\n    };\n  }\n\n  setDefaultHandlePosition(val, __adjustedPts, handleRadius) {\n    // If the reference points do not exist, do nothing.\n    if (!__adjustedPts || !this.isSliderShown) {\n      return;\n    }\n    if (val !== undefined && !Number.isNaN(val) && val >= 0 && val <= 1) {\n      // If user provided an input value and that value is in a valid range (0 - 1),\n      // set the handle to that value. When handle position change, emit an event\n      // to notify the change.\n      this.handlePositionX = __adjustedPts.from.x + (val * (__adjustedPts.to.x - __adjustedPts.from.x));\n      this.handlePositionY = __adjustedPts.from.y + (val * (__adjustedPts.to.y - __adjustedPts.from.y));\n      this.shadowRoot.querySelector(\"#container\").dispatchEvent(ce.sliderMoveObj({ proportion: val }));\n    } else {\n      // Assign default location of the handlers to be the starting point\n      this.handlePositionX = this.handlePositionX || __adjustedPts.from.x;\n      this.handlePositionY = this.handlePositionY || __adjustedPts.from.y;\n    }\n    // If an image handle is being used, offset the position to the image center\n    if (this.imgHandle) {\n      this.handlePositionX -= handleRadius;\n      this.handlePositionY -= handleRadius;\n    }\n  }\n\n  calculateDistance(x1, y1, x2, y2) {\n    return Math.sqrt((x1 - x2)**2 + (y1 - y2)**2);\n  }\n}\n\nwindow.customElements.define(DynamicSlider.is, DynamicSlider);\n"],"sourceRoot":""}